
hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004964  08004964  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800496c  0800496c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00012ee0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012f50  20012f50  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c902  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000220b  00000000  00000000  0002c9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d60  00000000  00000000  0002ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a54  00000000  00000000  0002f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023512  00000000  00000000  000303a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f15e  00000000  00000000  000538b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d833a  00000000  00000000  00062a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004044  00000000  00000000  0013ad50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0013ed94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800486c 	.word	0x0800486c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800486c 	.word	0x0800486c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	printf("Hi lmi World! -> is PreemptionEnabled? %d \r\n", configUSE_PREEMPTION);
 8000572:	2100      	movs	r1, #0
 8000574:	481f      	ldr	r0, [pc, #124]	; (80005f4 <main+0x88>)
 8000576:	f003 f911 	bl	800379c <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fbfb 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f847 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8af 	bl	80006e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2302      	movs	r3, #2
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <main+0x8c>)
 8000592:	22c8      	movs	r2, #200	; 0xc8
 8000594:	4919      	ldr	r1, [pc, #100]	; (80005fc <main+0x90>)
 8000596:	481a      	ldr	r0, [pc, #104]	; (8000600 <main+0x94>)
 8000598:	f001 febd 	bl	8002316 <xTaskCreate>
 800059c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d00a      	beq.n	80005ba <main+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a8:	f383 8811 	msr	BASEPRI, r3
 80005ac:	f3bf 8f6f 	isb	sy
 80005b0:	f3bf 8f4f 	dsb	sy
 80005b4:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <main+0x4c>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <main+0x98>)
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	4910      	ldr	r1, [pc, #64]	; (8000608 <main+0x9c>)
 80005c8:	4810      	ldr	r0, [pc, #64]	; (800060c <main+0xa0>)
 80005ca:	f001 fea4 	bl	8002316 <xTaskCreate>
 80005ce:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x80>
    __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	60fb      	str	r3, [r7, #12]
}
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x7e>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005ec:	f002 f814 	bl	8002618 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x84>
 80005f2:	bf00      	nop
 80005f4:	08004884 	.word	0x08004884
 80005f8:	080048b4 	.word	0x080048b4
 80005fc:	080048cc 	.word	0x080048cc
 8000600:	080009a1 	.word	0x080009a1
 8000604:	080048d4 	.word	0x080048d4
 8000608:	080048ec 	.word	0x080048ec
 800060c:	080009dd 	.word	0x080009dd

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 f945 	bl	80038ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000684:	2332      	movs	r3, #50	; 0x32
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000688:	2304      	movs	r3, #4
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fe47 	bl	8001328 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f9cc 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f8a8 	bl	8001818 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f9b5 	bl	8000a3c <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	4ba2      	ldr	r3, [pc, #648]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4aa1      	ldr	r2, [pc, #644]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b9f      	ldr	r3, [pc, #636]	; (8000988 <MX_GPIO_Init+0x2a4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	4b9b      	ldr	r3, [pc, #620]	; (8000988 <MX_GPIO_Init+0x2a4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a9a      	ldr	r2, [pc, #616]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b98      	ldr	r3, [pc, #608]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b94      	ldr	r3, [pc, #592]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a93      	ldr	r2, [pc, #588]	; (8000988 <MX_GPIO_Init+0x2a4>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b91      	ldr	r3, [pc, #580]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b8d      	ldr	r3, [pc, #564]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a8c      	ldr	r2, [pc, #560]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b8a      	ldr	r3, [pc, #552]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b86      	ldr	r3, [pc, #536]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a85      	ldr	r2, [pc, #532]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b83      	ldr	r3, [pc, #524]	; (8000988 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b7f      	ldr	r3, [pc, #508]	; (8000988 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a7e      	ldr	r2, [pc, #504]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b7c      	ldr	r3, [pc, #496]	; (8000988 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2108      	movs	r1, #8
 80007a6:	4879      	ldr	r0, [pc, #484]	; (800098c <MX_GPIO_Init+0x2a8>)
 80007a8:	f000 fda4 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	4877      	ldr	r0, [pc, #476]	; (8000990 <MX_GPIO_Init+0x2ac>)
 80007b2:	f000 fd9f 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007b6:	2200      	movs	r2, #0
 80007b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007bc:	4875      	ldr	r0, [pc, #468]	; (8000994 <MX_GPIO_Init+0x2b0>)
 80007be:	f000 fd99 	bl	80012f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007c2:	2308      	movs	r3, #8
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	486c      	ldr	r0, [pc, #432]	; (800098c <MX_GPIO_Init+0x2a8>)
 80007da:	f000 fbef 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007de:	2301      	movs	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4866      	ldr	r0, [pc, #408]	; (8000990 <MX_GPIO_Init+0x2ac>)
 80007f6:	f000 fbe1 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007fa:	2308      	movs	r3, #8
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080a:	2305      	movs	r3, #5
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	485e      	ldr	r0, [pc, #376]	; (8000990 <MX_GPIO_Init+0x2ac>)
 8000816:	f000 fbd1 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	485a      	ldr	r0, [pc, #360]	; (8000998 <MX_GPIO_Init+0x2b4>)
 8000830:	f000 fbc4 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000834:	2310      	movs	r3, #16
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000844:	2306      	movs	r3, #6
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4852      	ldr	r0, [pc, #328]	; (8000998 <MX_GPIO_Init+0x2b4>)
 8000850:	f000 fbb4 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000854:	23e0      	movs	r3, #224	; 0xe0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000864:	2305      	movs	r3, #5
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	484a      	ldr	r0, [pc, #296]	; (8000998 <MX_GPIO_Init+0x2b4>)
 8000870:	f000 fba4 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000874:	2304      	movs	r3, #4
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4845      	ldr	r0, [pc, #276]	; (800099c <MX_GPIO_Init+0x2b8>)
 8000888:	f000 fb98 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	483c      	ldr	r0, [pc, #240]	; (800099c <MX_GPIO_Init+0x2b8>)
 80008aa:	f000 fb87 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4833      	ldr	r0, [pc, #204]	; (8000994 <MX_GPIO_Init+0x2b0>)
 80008c8:	f000 fb78 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008cc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008de:	2306      	movs	r3, #6
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4829      	ldr	r0, [pc, #164]	; (8000990 <MX_GPIO_Init+0x2ac>)
 80008ea:	f000 fb67 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4825      	ldr	r0, [pc, #148]	; (8000998 <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fb5a 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000908:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800091a:	230a      	movs	r3, #10
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	481c      	ldr	r0, [pc, #112]	; (8000998 <MX_GPIO_Init+0x2b4>)
 8000926:	f000 fb49 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800092a:	2320      	movs	r3, #32
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4815      	ldr	r0, [pc, #84]	; (8000994 <MX_GPIO_Init+0x2b0>)
 800093e:	f000 fb3d 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000942:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000948:	2312      	movs	r3, #18
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000954:	2304      	movs	r3, #4
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	480f      	ldr	r0, [pc, #60]	; (800099c <MX_GPIO_Init+0x2b8>)
 8000960:	f000 fb2c 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000964:	2302      	movs	r3, #2
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000968:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_GPIO_Init+0x2a8>)
 800097a:	f000 fb1f 	bl	8000fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40021000 	.word	0x40021000
 8000990:	40020800 	.word	0x40020800
 8000994:	40020c00 	.word	0x40020c00
 8000998:	40020000 	.word	0x40020000
 800099c:	40020400 	.word	0x40020400

080009a0 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b09c      	sub	sp, #112	; 0x70
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 80009a8:	f107 000c 	add.w	r0, r7, #12
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <task1_handler+0x30>)
 80009b0:	2164      	movs	r1, #100	; 0x64
 80009b2:	f002 ff05 	bl	80037c0 <sniprintf>
//		SEGGER_SYSVIEW_PrintfTarget(msg);
		printf("task 1 \n\r");
 80009b6:	4807      	ldr	r0, [pc, #28]	; (80009d4 <task1_handler+0x34>)
 80009b8:	f002 fef0 	bl	800379c <iprintf>
		taskYIELD();
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <task1_handler+0x38>)
 80009be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 80009cc:	e7ec      	b.n	80009a8 <task1_handler+0x8>
 80009ce:	bf00      	nop
 80009d0:	080048f4 	.word	0x080048f4
 80009d4:	080048f8 	.word	0x080048f8
 80009d8:	e000ed04 	.word	0xe000ed04

080009dc <task2_handler>:

}


static void task2_handler(void* parameters)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09c      	sub	sp, #112	; 0x70
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 80009e4:	f107 000c 	add.w	r0, r7, #12
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <task2_handler+0x30>)
 80009ec:	2164      	movs	r1, #100	; 0x64
 80009ee:	f002 fee7 	bl	80037c0 <sniprintf>
//		SEGGER_SYSVIEW_PrintfTarget(msg);
		printf("task 2 \n\r");
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <task2_handler+0x34>)
 80009f4:	f002 fed2 	bl	800379c <iprintf>
		taskYIELD();
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <task2_handler+0x38>)
 80009fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	f3bf 8f4f 	dsb	sy
 8000a04:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a08:	e7ec      	b.n	80009e4 <task2_handler+0x8>
 8000a0a:	bf00      	nop
 8000a0c:	080048f4 	.word	0x080048f4
 8000a10:	08004904 	.word	0x08004904
 8000a14:	e000ed04 	.word	0xe000ed04

08000a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2a:	f000 f9c5 	bl	8000db8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40001000 	.word	0x40001000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	; 0x38
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <HAL_InitTick+0xe4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <HAL_InitTick+0xe4>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <HAL_InitTick+0xe4>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac4:	f107 0210 	add.w	r2, r7, #16
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f8ae 	bl	8001c30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ade:	f001 f893 	bl	8001c08 <HAL_RCC_GetPCLK1Freq>
 8000ae2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ae4:	e004      	b.n	8000af0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ae6:	f001 f88f 	bl	8001c08 <HAL_RCC_GetPCLK1Freq>
 8000aea:	4603      	mov	r3, r0
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af2:	4a23      	ldr	r2, [pc, #140]	; (8000b80 <HAL_InitTick+0xe8>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	0c9b      	lsrs	r3, r3, #18
 8000afa:	3b01      	subs	r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_InitTick+0xec>)
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <HAL_InitTick+0xf0>)
 8000b02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_InitTick+0xec>)
 8000b06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <HAL_InitTick+0xec>)
 8000b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_InitTick+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_InitTick+0xec>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_InitTick+0xec>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b24:	4817      	ldr	r0, [pc, #92]	; (8000b84 <HAL_InitTick+0xec>)
 8000b26:	f001 f8b5 	bl	8001c94 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11b      	bne.n	8000b70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b38:	4812      	ldr	r0, [pc, #72]	; (8000b84 <HAL_InitTick+0xec>)
 8000b3a:	f001 f905 	bl	8001d48 <HAL_TIM_Base_Start_IT>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d111      	bne.n	8000b70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b4c:	2036      	movs	r0, #54	; 0x36
 8000b4e:	f000 fa27 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d808      	bhi.n	8000b6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2036      	movs	r0, #54	; 0x36
 8000b5e:	f000 fa03 	bl	8000f68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_InitTick+0xf4>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e002      	b.n	8000b70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3738      	adds	r7, #56	; 0x38
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	431bde83 	.word	0x431bde83
 8000b84:	2000008c 	.word	0x2000008c
 8000b88:	40001000 	.word	0x40001000
 8000b8c:	20000004 	.word	0x20000004

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <TIM6_DAC_IRQHandler+0x10>)
 8000bc2:	f001 f931 	bl	8001e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000008c 	.word	0x2000008c

08000bd0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <ITM_SendChar+0x48>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <ITM_SendChar+0x48>)
 8000be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000be4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <ITM_SendChar+0x4c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <ITM_SendChar+0x4c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000bf2:	bf00      	nop
 8000bf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f8      	beq.n	8000bf4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	6013      	str	r3, [r2, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000edfc 	.word	0xe000edfc
 8000c1c:	e0000e00 	.word	0xe0000e00

08000c20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e00a      	b.n	8000c48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c32:	f3af 8000 	nop.w
 8000c36:	4601      	mov	r1, r0
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf0      	blt.n	8000c32 <_read+0x12>
  }

  return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	e009      	b.n	8000c80 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ffab 	bl	8000bd0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbf1      	blt.n	8000c6c <_write+0x12>
  }
  return len;
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_close>:

int _close(int file)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cba:	605a      	str	r2, [r3, #4]
  return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <_isatty>:

int _isatty(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d3c:	4c0b      	ldr	r4, [pc, #44]	; (8000d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff ffd7 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f002 fdfd 	bl	800394c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc0b 	bl	800056c <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d64:	08004974 	.word	0x08004974
  ldr r2, =_sbss
 8000d68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d6c:	20012f50 	.word	0x20012f50

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f8d8 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fe78 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fe4e 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	200000d4 	.word	0x200000d4

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200000d4 	.word	0x200000d4

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4c 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7a:	f7ff ff61 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffb1 	bl	8000eec <NVIC_EncodePriority>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff80 	bl	8000e98 <__NVIC_SetPriority>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff54 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e16b      	b.n	80012b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 815a 	bne.w	80012aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d005      	beq.n	800100e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	2b02      	cmp	r3, #2
 800100c:	d130      	bne.n	8001070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b03      	cmp	r3, #3
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80b4 	beq.w	80012aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b60      	ldr	r3, [pc, #384]	; (80012c8 <HAL_GPIO_Init+0x30c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a5f      	ldr	r2, [pc, #380]	; (80012c8 <HAL_GPIO_Init+0x30c>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <HAL_GPIO_Init+0x30c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a5b      	ldr	r2, [pc, #364]	; (80012cc <HAL_GPIO_Init+0x310>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_GPIO_Init+0x314>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d02b      	beq.n	80011e2 <HAL_GPIO_Init+0x226>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a51      	ldr	r2, [pc, #324]	; (80012d4 <HAL_GPIO_Init+0x318>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x222>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a50      	ldr	r2, [pc, #320]	; (80012d8 <HAL_GPIO_Init+0x31c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x21e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <HAL_GPIO_Init+0x320>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x21a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4e      	ldr	r2, [pc, #312]	; (80012e0 <HAL_GPIO_Init+0x324>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x216>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <HAL_GPIO_Init+0x328>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x212>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <HAL_GPIO_Init+0x32c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x20e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4b      	ldr	r2, [pc, #300]	; (80012ec <HAL_GPIO_Init+0x330>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x20a>
 80011c2:	2307      	movs	r3, #7
 80011c4:	e00e      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011c6:	2308      	movs	r3, #8
 80011c8:	e00c      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011ca:	2306      	movs	r3, #6
 80011cc:	e00a      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011ce:	2305      	movs	r3, #5
 80011d0:	e008      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011d2:	2304      	movs	r3, #4
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e004      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011da:	2302      	movs	r3, #2
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011e2:	2300      	movs	r3, #0
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4093      	lsls	r3, r2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f4:	4935      	ldr	r1, [pc, #212]	; (80012cc <HAL_GPIO_Init+0x310>)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_GPIO_Init+0x334>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001226:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <HAL_GPIO_Init+0x334>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_GPIO_Init+0x334>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001250:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <HAL_GPIO_Init+0x334>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_GPIO_Init+0x334>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127a:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <HAL_GPIO_Init+0x334>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_GPIO_Init+0x334>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <HAL_GPIO_Init+0x334>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	f67f ae90 	bls.w	8000fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40021400 	.word	0x40021400
 80012e8:	40021800 	.word	0x40021800
 80012ec:	40021c00 	.word	0x40021c00
 80012f0:	40013c00 	.word	0x40013c00

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e267      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d075      	beq.n	8001432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001346:	4b88      	ldr	r3, [pc, #544]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b04      	cmp	r3, #4
 8001350:	d00c      	beq.n	800136c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001352:	4b85      	ldr	r3, [pc, #532]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135a:	2b08      	cmp	r3, #8
 800135c:	d112      	bne.n	8001384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135e:	4b82      	ldr	r3, [pc, #520]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800136a:	d10b      	bne.n	8001384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	4b7e      	ldr	r3, [pc, #504]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d05b      	beq.n	8001430 <HAL_RCC_OscConfig+0x108>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d157      	bne.n	8001430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e242      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138c:	d106      	bne.n	800139c <HAL_RCC_OscConfig+0x74>
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a75      	ldr	r2, [pc, #468]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e01d      	b.n	80013d8 <HAL_RCC_OscConfig+0xb0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x98>
 80013a6:	4b70      	ldr	r3, [pc, #448]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a6f      	ldr	r2, [pc, #444]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b6d      	ldr	r3, [pc, #436]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6c      	ldr	r2, [pc, #432]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xb0>
 80013c0:	4b69      	ldr	r3, [pc, #420]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a68      	ldr	r2, [pc, #416]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b66      	ldr	r3, [pc, #408]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a65      	ldr	r2, [pc, #404]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fcfe 	bl	8000de0 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fcfa 	bl	8000de0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e207      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b5b      	ldr	r3, [pc, #364]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0xc0>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fcea 	bl	8000de0 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fce6 	bl	8000de0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1f3      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	4b51      	ldr	r3, [pc, #324]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0xe8>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d063      	beq.n	8001506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800143e:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	2b08      	cmp	r3, #8
 8001454:	d11c      	bne.n	8001490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d116      	bne.n	8001490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x152>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e1c7      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4937      	ldr	r1, [pc, #220]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148e:	e03a      	b.n	8001506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001498:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_RCC_OscConfig+0x244>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff fc9f 	bl	8000de0 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fc9b 	bl	8000de0 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e1a8      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4925      	ldr	r1, [pc, #148]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	e015      	b.n	8001506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_RCC_OscConfig+0x244>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc7e 	bl	8000de0 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc7a 	bl	8000de0 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e187      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d036      	beq.n	8001580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d016      	beq.n	8001548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_RCC_OscConfig+0x248>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fc5e 	bl	8000de0 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fc5a 	bl	8000de0 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e167      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_RCC_OscConfig+0x240>)
 800153c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x200>
 8001546:	e01b      	b.n	8001580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_RCC_OscConfig+0x248>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7ff fc47 	bl	8000de0 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001554:	e00e      	b.n	8001574 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001556:	f7ff fc43 	bl	8000de0 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d907      	bls.n	8001574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e150      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
 8001568:	40023800 	.word	0x40023800
 800156c:	42470000 	.word	0x42470000
 8001570:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ea      	bne.n	8001556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8097 	beq.w	80016bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001592:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10f      	bne.n	80015be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b7d      	ldr	r3, [pc, #500]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a7c      	ldr	r2, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b7a      	ldr	r3, [pc, #488]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ba:	2301      	movs	r3, #1
 80015bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015be:	4b77      	ldr	r3, [pc, #476]	; (800179c <HAL_RCC_OscConfig+0x474>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d118      	bne.n	80015fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ca:	4b74      	ldr	r3, [pc, #464]	; (800179c <HAL_RCC_OscConfig+0x474>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a73      	ldr	r2, [pc, #460]	; (800179c <HAL_RCC_OscConfig+0x474>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fc03 	bl	8000de0 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015de:	f7ff fbff 	bl	8000de0 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e10c      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	4b6a      	ldr	r3, [pc, #424]	; (800179c <HAL_RCC_OscConfig+0x474>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x2ea>
 8001604:	4b64      	ldr	r3, [pc, #400]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	4a63      	ldr	r2, [pc, #396]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6713      	str	r3, [r2, #112]	; 0x70
 8001610:	e01c      	b.n	800164c <HAL_RCC_OscConfig+0x324>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x30c>
 800161a:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	4a5e      	ldr	r2, [pc, #376]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6713      	str	r3, [r2, #112]	; 0x70
 8001626:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162a:	4a5b      	ldr	r2, [pc, #364]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6713      	str	r3, [r2, #112]	; 0x70
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0x324>
 8001634:	4b58      	ldr	r3, [pc, #352]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a57      	ldr	r2, [pc, #348]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	4b55      	ldr	r3, [pc, #340]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a54      	ldr	r2, [pc, #336]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001646:	f023 0304 	bic.w	r3, r3, #4
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d015      	beq.n	8001680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff fbc4 	bl	8000de0 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165a:	e00a      	b.n	8001672 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff fbc0 	bl	8000de0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	; 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0cb      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001672:	4b49      	ldr	r3, [pc, #292]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0ee      	beq.n	800165c <HAL_RCC_OscConfig+0x334>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff fbae 	bl	8000de0 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001686:	e00a      	b.n	800169e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff fbaa 	bl	8000de0 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e0b5      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169e:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1ee      	bne.n	8001688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d105      	bne.n	80016bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b0:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a38      	ldr	r2, [pc, #224]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 80016b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a1 	beq.w	8001808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016c6:	4b34      	ldr	r3, [pc, #208]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d05c      	beq.n	800178c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d141      	bne.n	800175e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_RCC_OscConfig+0x478>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb7e 	bl	8000de0 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fb7a 	bl	8000de0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e087      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69da      	ldr	r2, [r3, #28]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	3b01      	subs	r3, #1
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	061b      	lsls	r3, r3, #24
 800172a:	491b      	ldr	r1, [pc, #108]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x478>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff fb53 	bl	8000de0 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fb4f 	bl	8000de0 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e05c      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x416>
 800175c:	e054      	b.n	8001808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_RCC_OscConfig+0x478>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fb3c 	bl	8000de0 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fb38 	bl	8000de0 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e045      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_RCC_OscConfig+0x470>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x444>
 800178a:	e03d      	b.n	8001808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e038      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
 8001798:	40023800 	.word	0x40023800
 800179c:	40007000 	.word	0x40007000
 80017a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x4ec>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d028      	beq.n	8001804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d121      	bne.n	8001804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d11a      	bne.n	8001804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017d4:	4013      	ands	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017dc:	4293      	cmp	r3, r2
 80017de:	d111      	bne.n	8001804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	085b      	lsrs	r3, r3, #1
 80017ec:	3b01      	subs	r3, #1
 80017ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800

08001818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0cc      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d90c      	bls.n	8001854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0b8      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d020      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800186c:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001884:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4a52      	ldr	r2, [pc, #328]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800188e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001890:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	494d      	ldr	r1, [pc, #308]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d044      	beq.n	8001938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d119      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e07f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e06f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e067      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f023 0203 	bic.w	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4934      	ldr	r1, [pc, #208]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001908:	f7ff fa6a 	bl	8000de0 <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	e00a      	b.n	8001926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7ff fa66 	bl	8000de0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e04f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 020c 	and.w	r2, r3, #12
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	429a      	cmp	r2, r3
 8001936:	d1eb      	bne.n	8001910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d20c      	bcs.n	8001960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e032      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4916      	ldr	r1, [pc, #88]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	490e      	ldr	r1, [pc, #56]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800199e:	f000 f821 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	490a      	ldr	r1, [pc, #40]	; (80019d8 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	5ccb      	ldrb	r3, [r1, r3]
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f86a 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00
 80019d4:	40023800 	.word	0x40023800
 80019d8:	08004918 	.word	0x08004918
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e8:	b094      	sub	sp, #80	; 0x50
 80019ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	647b      	str	r3, [r7, #68]	; 0x44
 80019f0:	2300      	movs	r3, #0
 80019f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f4:	2300      	movs	r3, #0
 80019f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019fc:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d00d      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x40>
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	f200 80e1 	bhi.w	8001bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x34>
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a16:	e0db      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b73      	ldr	r3, [pc, #460]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a1c:	e0db      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a1e:	4b73      	ldr	r3, [pc, #460]	; (8001bec <HAL_RCC_GetSysClockFreq+0x208>)
 8001a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a22:	e0d8      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a24:	4b6f      	ldr	r3, [pc, #444]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a2e:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d063      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	2200      	movs	r2, #0
 8001a42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a4e:	2300      	movs	r3, #0
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
 8001a52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a56:	4622      	mov	r2, r4
 8001a58:	462b      	mov	r3, r5
 8001a5a:	f04f 0000 	mov.w	r0, #0
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	0159      	lsls	r1, r3, #5
 8001a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a68:	0150      	lsls	r0, r2, #5
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4621      	mov	r1, r4
 8001a70:	1a51      	subs	r1, r2, r1
 8001a72:	6139      	str	r1, [r7, #16]
 8001a74:	4629      	mov	r1, r5
 8001a76:	eb63 0301 	sbc.w	r3, r3, r1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a88:	4659      	mov	r1, fp
 8001a8a:	018b      	lsls	r3, r1, #6
 8001a8c:	4651      	mov	r1, sl
 8001a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a92:	4651      	mov	r1, sl
 8001a94:	018a      	lsls	r2, r1, #6
 8001a96:	4651      	mov	r1, sl
 8001a98:	ebb2 0801 	subs.w	r8, r2, r1
 8001a9c:	4659      	mov	r1, fp
 8001a9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ab6:	4690      	mov	r8, r2
 8001ab8:	4699      	mov	r9, r3
 8001aba:	4623      	mov	r3, r4
 8001abc:	eb18 0303 	adds.w	r3, r8, r3
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	462b      	mov	r3, r5
 8001ac4:	eb49 0303 	adc.w	r3, r9, r3
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	024b      	lsls	r3, r1, #9
 8001ada:	4621      	mov	r1, r4
 8001adc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	024a      	lsls	r2, r1, #9
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aea:	2200      	movs	r2, #0
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001af4:	f7fe fbbc 	bl	8000270 <__aeabi_uldivmod>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4613      	mov	r3, r2
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b00:	e058      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	099b      	lsrs	r3, r3, #6
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
 8001b18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b1c:	4642      	mov	r2, r8
 8001b1e:	464b      	mov	r3, r9
 8001b20:	f04f 0000 	mov.w	r0, #0
 8001b24:	f04f 0100 	mov.w	r1, #0
 8001b28:	0159      	lsls	r1, r3, #5
 8001b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b2e:	0150      	lsls	r0, r2, #5
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4641      	mov	r1, r8
 8001b36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b3a:	4649      	mov	r1, r9
 8001b3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b54:	ebb2 040a 	subs.w	r4, r2, sl
 8001b58:	eb63 050b 	sbc.w	r5, r3, fp
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	00eb      	lsls	r3, r5, #3
 8001b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b6a:	00e2      	lsls	r2, r4, #3
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	461d      	mov	r5, r3
 8001b70:	4643      	mov	r3, r8
 8001b72:	18e3      	adds	r3, r4, r3
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	464b      	mov	r3, r9
 8001b78:	eb45 0303 	adc.w	r3, r5, r3
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	028b      	lsls	r3, r1, #10
 8001b8e:	4621      	mov	r1, r4
 8001b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b94:	4621      	mov	r1, r4
 8001b96:	028a      	lsls	r2, r1, #10
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	61fa      	str	r2, [r7, #28]
 8001ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba8:	f7fe fb62 	bl	8000270 <__aeabi_uldivmod>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bce:	e002      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3750      	adds	r7, #80	; 0x50
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	00f42400 	.word	0x00f42400
 8001bec:	007a1200 	.word	0x007a1200

08001bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000000 	.word	0x20000000

08001c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c0c:	f7ff fff0 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	0a9b      	lsrs	r3, r3, #10
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4903      	ldr	r1, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	08004928 	.word	0x08004928

08001c30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_RCC_GetClockConfig+0x5c>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_RCC_GetClockConfig+0x5c>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_RCC_GetClockConfig+0x5c>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_GetClockConfig+0x5c>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	08db      	lsrs	r3, r3, #3
 8001c6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_RCC_GetClockConfig+0x60>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0207 	and.w	r2, r3, #7
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40023c00 	.word	0x40023c00

08001c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e041      	b.n	8001d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f839 	bl	8001d32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f000 f9d8 	bl	8002088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d001      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e04e      	b.n	8001dfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <HAL_TIM_Base_Start_IT+0xc4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d022      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8a:	d01d      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d018      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_TIM_Base_Start_IT+0xd0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00e      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_TIM_Base_Start_IT+0xd4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <HAL_TIM_Base_Start_IT+0xdc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d111      	bne.n	8001dec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d010      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dea:	e007      	b.n	8001dfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40000800 	.word	0x40000800
 8001e18:	40000c00 	.word	0x40000c00
 8001e1c:	40010400 	.word	0x40010400
 8001e20:	40014000 	.word	0x40014000
 8001e24:	40001800 	.word	0x40001800

08001e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0202 	mvn.w	r2, #2
 8001e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8ee 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8e0 	bl	8002038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8f1 	bl	8002060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0204 	mvn.w	r2, #4
 8001ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2202      	movs	r2, #2
 8001eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8c4 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8b6 	bl	8002038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8c7 	bl	8002060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0208 	mvn.w	r2, #8
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2204      	movs	r2, #4
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f89a 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f88c 	bl	8002038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f89d 	bl	8002060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b10      	cmp	r3, #16
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0210 	mvn.w	r2, #16
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2208      	movs	r2, #8
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f870 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f862 	bl	8002038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f873 	bl	8002060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0201 	mvn.w	r2, #1
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fd36 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb6:	2b80      	cmp	r3, #128	; 0x80
 8001fb8:	d10e      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d107      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f902 	bl	80021dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	2b40      	cmp	r3, #64	; 0x40
 8001fe4:	d10e      	bne.n	8002004 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d107      	bne.n	8002004 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f838 	bl	8002074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b20      	cmp	r3, #32
 8002010:	d10e      	bne.n	8002030 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b20      	cmp	r3, #32
 800201e:	d107      	bne.n	8002030 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0220 	mvn.w	r2, #32
 8002028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8cc 	bl	80021c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a40      	ldr	r2, [pc, #256]	; (800219c <TIM_Base_SetConfig+0x114>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d013      	beq.n	80020c8 <TIM_Base_SetConfig+0x40>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a6:	d00f      	beq.n	80020c8 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3d      	ldr	r2, [pc, #244]	; (80021a0 <TIM_Base_SetConfig+0x118>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00b      	beq.n	80020c8 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <TIM_Base_SetConfig+0x11c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d007      	beq.n	80020c8 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3b      	ldr	r2, [pc, #236]	; (80021a8 <TIM_Base_SetConfig+0x120>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d003      	beq.n	80020c8 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3a      	ldr	r2, [pc, #232]	; (80021ac <TIM_Base_SetConfig+0x124>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d108      	bne.n	80020da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a2f      	ldr	r2, [pc, #188]	; (800219c <TIM_Base_SetConfig+0x114>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d02b      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e8:	d027      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2c      	ldr	r2, [pc, #176]	; (80021a0 <TIM_Base_SetConfig+0x118>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d023      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <TIM_Base_SetConfig+0x11c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01f      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <TIM_Base_SetConfig+0x120>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01b      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a29      	ldr	r2, [pc, #164]	; (80021ac <TIM_Base_SetConfig+0x124>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d017      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <TIM_Base_SetConfig+0x128>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <TIM_Base_SetConfig+0x12c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00f      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <TIM_Base_SetConfig+0x130>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00b      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a25      	ldr	r2, [pc, #148]	; (80021bc <TIM_Base_SetConfig+0x134>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <TIM_Base_SetConfig+0x138>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <TIM_Base_SetConfig+0x13c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d108      	bne.n	800214c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <TIM_Base_SetConfig+0x114>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d003      	beq.n	8002180 <TIM_Base_SetConfig+0xf8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <TIM_Base_SetConfig+0x124>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d103      	bne.n	8002188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	615a      	str	r2, [r3, #20]
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40010000 	.word	0x40010000
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40000800 	.word	0x40000800
 80021a8:	40000c00 	.word	0x40000c00
 80021ac:	40010400 	.word	0x40010400
 80021b0:	40014000 	.word	0x40014000
 80021b4:	40014400 	.word	0x40014400
 80021b8:	40014800 	.word	0x40014800
 80021bc:	40001800 	.word	0x40001800
 80021c0:	40001c00 	.word	0x40001c00
 80021c4:	40002000 	.word	0x40002000

080021c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f103 0208 	add.w	r2, r3, #8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f103 0208 	add.w	r2, r3, #8
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0208 	add.w	r2, r3, #8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6892      	ldr	r2, [r2, #8]
 8002260:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6852      	ldr	r2, [r2, #4]
 800226a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	429a      	cmp	r2, r3
 8002274:	d103      	bne.n	800227e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800229e:	b580      	push	{r7, lr}
 80022a0:	b08a      	sub	sp, #40	; 0x28
 80022a2:	af04      	add	r7, sp, #16
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 ff4b 	bl	800314c <pvPortMalloc>
 80022b6:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d013      	beq.n	80022e6 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80022be:	2058      	movs	r0, #88	; 0x58
 80022c0:	f000 ff44 	bl	800314c <pvPortMalloc>
 80022c4:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022cc:	2258      	movs	r2, #88	; 0x58
 80022ce:	2100      	movs	r1, #0
 80022d0:	6978      	ldr	r0, [r7, #20]
 80022d2:	f001 faec 	bl	80038ae <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
 80022dc:	e005      	b.n	80022ea <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80022de:	6938      	ldr	r0, [r7, #16]
 80022e0:	f001 f860 	bl	80033a4 <vPortFree>
 80022e4:	e001      	b.n	80022ea <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00d      	beq.n	800230c <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022f0:	2300      	movs	r3, #0
 80022f2:	9303      	str	r3, [sp, #12]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	9302      	str	r3, [sp, #8]
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f828 	bl	800235c <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800230c:	697b      	ldr	r3, [r7, #20]
    }
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002316:	b580      	push	{r7, lr}
 8002318:	b088      	sub	sp, #32
 800231a:	af02      	add	r7, sp, #8
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff ffb3 	bl	800229e <prvCreateTask>
 8002338:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002340:	6938      	ldr	r0, [r7, #16]
 8002342:	f000 f899 	bl	8002478 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002346:	2301      	movs	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e002      	b.n	8002352 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8002352:	697b      	ldr	r3, [r7, #20]
    }
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	461a      	mov	r2, r3
 8002374:	21a5      	movs	r1, #165	; 0xa5
 8002376:	f001 fa9a 	bl	80038ae <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002384:	3b01      	subs	r3, #1
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f023 0307 	bic.w	r3, r3, #7
 8002392:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <prvInitialiseNewTask+0x58>
    __asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	617b      	str	r3, [r7, #20]
}
 80023b0:	bf00      	nop
 80023b2:	e7fe      	b.n	80023b2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01e      	beq.n	80023f8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e012      	b.n	80023e6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	7819      	ldrb	r1, [r3, #0]
 80023c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	4413      	add	r3, r2
 80023ce:	3334      	adds	r3, #52	; 0x34
 80023d0:	460a      	mov	r2, r1
 80023d2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	2b09      	cmp	r3, #9
 80023ea:	d9e9      	bls.n	80023c0 <prvInitialiseNewTask+0x64>
 80023ec:	e000      	b.n	80023f0 <prvInitialiseNewTask+0x94>
            {
                break;
 80023ee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d90a      	bls.n	8002414 <prvInitialiseNewTask+0xb8>
    __asm volatile
 80023fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002402:	f383 8811 	msr	BASEPRI, r3
 8002406:	f3bf 8f6f 	isb	sy
 800240a:	f3bf 8f4f 	dsb	sy
 800240e:	613b      	str	r3, [r7, #16]
}
 8002410:	bf00      	nop
 8002412:	e7fe      	b.n	8002412 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	2b04      	cmp	r3, #4
 8002418:	d901      	bls.n	800241e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800241a:	2304      	movs	r3, #4
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002428:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	3304      	adds	r3, #4
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fefe 	bl	8002230 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	3318      	adds	r3, #24
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fef9 	bl	8002230 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002442:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	f1c3 0205 	rsb	r2, r3, #5
 800244a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	69b8      	ldr	r0, [r7, #24]
 800245a:	f000 fc1f 	bl	8002c9c <pxPortInitialiseStack>
 800245e:	4602      	mov	r2, r0
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800246e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002470:	bf00      	nop
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002480:	f000 fd82 	bl	8002f88 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002484:	4b39      	ldr	r3, [pc, #228]	; (800256c <prvAddNewTaskToReadyList+0xf4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	4a38      	ldr	r2, [pc, #224]	; (800256c <prvAddNewTaskToReadyList+0xf4>)
 800248c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <prvAddNewTaskToReadyList+0xf8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002496:	4a36      	ldr	r2, [pc, #216]	; (8002570 <prvAddNewTaskToReadyList+0xf8>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800249c:	4b33      	ldr	r3, [pc, #204]	; (800256c <prvAddNewTaskToReadyList+0xf4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d110      	bne.n	80024c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80024a4:	f000 fb60 	bl	8002b68 <prvInitialiseTaskLists>
 80024a8:	e00d      	b.n	80024c6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80024aa:	4b32      	ldr	r3, [pc, #200]	; (8002574 <prvAddNewTaskToReadyList+0xfc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024b2:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <prvAddNewTaskToReadyList+0xf8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	429a      	cmp	r2, r3
 80024be:	d802      	bhi.n	80024c6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80024c0:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <prvAddNewTaskToReadyList+0xf8>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80024c6:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <prvAddNewTaskToReadyList+0x100>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <prvAddNewTaskToReadyList+0x100>)
 80024ce:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024d0:	4b29      	ldr	r3, [pc, #164]	; (8002578 <prvAddNewTaskToReadyList+0x100>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	2201      	movs	r2, #1
 80024de:	409a      	lsls	r2, r3
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <prvAddNewTaskToReadyList+0x104>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	4a25      	ldr	r2, [pc, #148]	; (800257c <prvAddNewTaskToReadyList+0x104>)
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ee:	4924      	ldr	r1, [pc, #144]	; (8002580 <prvAddNewTaskToReadyList+0x108>)
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3304      	adds	r3, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	3204      	adds	r2, #4
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	1d1a      	adds	r2, r3, #4
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <prvAddNewTaskToReadyList+0x108>)
 800252e:	441a      	add	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	615a      	str	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002538:	4911      	ldr	r1, [pc, #68]	; (8002580 <prvAddNewTaskToReadyList+0x108>)
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800254a:	1c59      	adds	r1, r3, #1
 800254c:	480c      	ldr	r0, [pc, #48]	; (8002580 <prvAddNewTaskToReadyList+0x108>)
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4403      	add	r3, r0
 8002558:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800255a:	f000 fd45 	bl	8002fe8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <prvAddNewTaskToReadyList+0xfc>)
 8002560:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200001b0 	.word	0x200001b0
 8002570:	200000d8 	.word	0x200000d8
 8002574:	200001bc 	.word	0x200001bc
 8002578:	200001cc 	.word	0x200001cc
 800257c:	200001b8 	.word	0x200001b8
 8002580:	200000dc 	.word	0x200000dc

08002584 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800258a:	2301      	movs	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e011      	b.n	80025bc <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <prvCreateIdleTasks+0x88>)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4413      	add	r3, r2
 800259e:	7819      	ldrb	r1, [r3, #0]
 80025a0:	1d3a      	adds	r2, r7, #4
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	4413      	add	r3, r2
 80025a6:	460a      	mov	r2, r1
 80025a8:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80025aa:	1d3a      	adds	r2, r7, #4
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4413      	add	r3, r2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d006      	beq.n	80025c4 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b09      	cmp	r3, #9
 80025c0:	ddea      	ble.n	8002598 <prvCreateIdleTasks+0x14>
 80025c2:	e000      	b.n	80025c6 <prvCreateIdleTasks+0x42>
        {
            break;
 80025c4:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e015      	b.n	80025f8 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <prvCreateIdleTasks+0x8c>)
 80025ce:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <prvCreateIdleTasks+0x90>)
 80025d6:	4413      	add	r3, r2
 80025d8:	1d39      	adds	r1, r7, #4
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2300      	movs	r3, #0
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2300      	movs	r3, #0
 80025e2:	2282      	movs	r2, #130	; 0x82
 80025e4:	6938      	ldr	r0, [r7, #16]
 80025e6:	f7ff fe96 	bl	8002316 <xTaskCreate>
 80025ea:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	3301      	adds	r3, #1
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	dde6      	ble.n	80025cc <prvCreateIdleTasks+0x48>
 80025fe:	e000      	b.n	8002602 <prvCreateIdleTasks+0x7e>
        {
            break;
 8002600:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002602:	69fb      	ldr	r3, [r7, #28]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	08004910 	.word	0x08004910
 8002610:	08002b45 	.word	0x08002b45
 8002614:	200001d4 	.word	0x200001d4

08002618 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800261e:	f7ff ffb1 	bl	8002584 <prvCreateIdleTasks>
 8002622:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d116      	bne.n	8002658 <vTaskStartScheduler+0x40>
    __asm volatile
 800262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262e:	f383 8811 	msr	BASEPRI, r3
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	60bb      	str	r3, [r7, #8]
}
 800263c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <vTaskStartScheduler+0x6c>)
 8002640:	f04f 32ff 	mov.w	r2, #4294967295
 8002644:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <vTaskStartScheduler+0x70>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <vTaskStartScheduler+0x74>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002652:	f000 fbaf 	bl	8002db4 <xPortStartScheduler>
 8002656:	e00e      	b.n	8002676 <vTaskStartScheduler+0x5e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d10a      	bne.n	8002676 <vTaskStartScheduler+0x5e>
    __asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	607b      	str	r3, [r7, #4]
}
 8002672:	bf00      	nop
 8002674:	e7fe      	b.n	8002674 <vTaskStartScheduler+0x5c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <vTaskStartScheduler+0x78>)
 8002678:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200001d0 	.word	0x200001d0
 8002688:	200001bc 	.word	0x200001bc
 800268c:	200001b4 	.word	0x200001b4
 8002690:	2000000c 	.word	0x2000000c

08002694 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <vTaskSuspendAll+0x18>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	4a03      	ldr	r2, [pc, #12]	; (80026ac <vTaskSuspendAll+0x18>)
 80026a0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	200001d8 	.word	0x200001d8

080026b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80026be:	f000 fc63 	bl	8002f88 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80026c6:	4b6e      	ldr	r3, [pc, #440]	; (8002880 <xTaskResumeAll+0x1d0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10a      	bne.n	80026e4 <xTaskResumeAll+0x34>
    __asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	603b      	str	r3, [r7, #0]
}
 80026e0:	bf00      	nop
 80026e2:	e7fe      	b.n	80026e2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80026e4:	4b66      	ldr	r3, [pc, #408]	; (8002880 <xTaskResumeAll+0x1d0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	4a65      	ldr	r2, [pc, #404]	; (8002880 <xTaskResumeAll+0x1d0>)
 80026ec:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80026ee:	4b64      	ldr	r3, [pc, #400]	; (8002880 <xTaskResumeAll+0x1d0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 80bc 	bne.w	8002870 <xTaskResumeAll+0x1c0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026f8:	4b62      	ldr	r3, [pc, #392]	; (8002884 <xTaskResumeAll+0x1d4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80b7 	beq.w	8002870 <xTaskResumeAll+0x1c0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002702:	e08e      	b.n	8002822 <xTaskResumeAll+0x172>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002704:	4b60      	ldr	r3, [pc, #384]	; (8002888 <xTaskResumeAll+0x1d8>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	6a12      	ldr	r2, [r2, #32]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	69d2      	ldr	r2, [r2, #28]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3318      	adds	r3, #24
 800272e:	429a      	cmp	r2, r3
 8002730:	d103      	bne.n	800273a <xTaskResumeAll+0x8a>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	6a1a      	ldr	r2, [r3, #32]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2200      	movs	r2, #0
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	68d2      	ldr	r2, [r2, #12]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	6892      	ldr	r2, [r2, #8]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3304      	adds	r3, #4
 800276c:	429a      	cmp	r2, r3
 800276e:	d103      	bne.n	8002778 <xTaskResumeAll+0xc8>
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2200      	movs	r2, #0
 800277c:	615a      	str	r2, [r3, #20]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	1e5a      	subs	r2, r3, #1
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	2201      	movs	r2, #1
 800278e:	409a      	lsls	r2, r3
 8002790:	4b3e      	ldr	r3, [pc, #248]	; (800288c <xTaskResumeAll+0x1dc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4313      	orrs	r3, r2
 8002796:	4a3d      	ldr	r2, [pc, #244]	; (800288c <xTaskResumeAll+0x1dc>)
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279e:	493c      	ldr	r1, [pc, #240]	; (8002890 <xTaskResumeAll+0x1e0>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3304      	adds	r3, #4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	3204      	adds	r2, #4
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	1d1a      	adds	r2, r3, #4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <xTaskResumeAll+0x1e0>)
 80027de:	441a      	add	r2, r3
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	615a      	str	r2, [r3, #20]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e8:	4929      	ldr	r1, [pc, #164]	; (8002890 <xTaskResumeAll+0x1e0>)
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	4824      	ldr	r0, [pc, #144]	; (8002890 <xTaskResumeAll+0x1e0>)
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4403      	add	r3, r0
 8002808:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <xTaskResumeAll+0x1e4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	429a      	cmp	r2, r3
 8002816:	d904      	bls.n	8002822 <xTaskResumeAll+0x172>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <xTaskResumeAll+0x1e8>)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2101      	movs	r1, #1
 800281e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <xTaskResumeAll+0x1d8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f47f af6c 	bne.w	8002704 <xTaskResumeAll+0x54>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <xTaskResumeAll+0x186>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002832:	f000 fa17 	bl	8002c64 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <xTaskResumeAll+0x1ec>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d012      	beq.n	8002868 <xTaskResumeAll+0x1b8>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002842:	f000 f82d 	bl	80028a0 <xTaskIncrementTick>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <xTaskResumeAll+0x1a6>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800284c:	4a12      	ldr	r2, [pc, #72]	; (8002898 <xTaskResumeAll+0x1e8>)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2101      	movs	r1, #1
 8002852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	3b01      	subs	r3, #1
 800285a:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ef      	bne.n	8002842 <xTaskResumeAll+0x192>

                            xPendedTicks = 0;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <xTaskResumeAll+0x1ec>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <xTaskResumeAll+0x1e8>)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002870:	f000 fbba 	bl	8002fe8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8002874:	697b      	ldr	r3, [r7, #20]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200001d8 	.word	0x200001d8
 8002884:	200001b0 	.word	0x200001b0
 8002888:	20000170 	.word	0x20000170
 800288c:	200001b8 	.word	0x200001b8
 8002890:	200000dc 	.word	0x200000dc
 8002894:	200000d8 	.word	0x200000d8
 8002898:	200001c4 	.word	0x200001c4
 800289c:	200001c0 	.word	0x200001c0

080028a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80028aa:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <xTaskIncrementTick+0x1c8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 80cf 	bne.w	8002a52 <xTaskIncrementTick+0x1b2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028b4:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <xTaskIncrementTick+0x1cc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028bc:	4a6b      	ldr	r2, [pc, #428]	; (8002a6c <xTaskIncrementTick+0x1cc>)
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d120      	bne.n	800290a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80028c8:	4b69      	ldr	r3, [pc, #420]	; (8002a70 <xTaskIncrementTick+0x1d0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <xTaskIncrementTick+0x48>
    __asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	607b      	str	r3, [r7, #4]
}
 80028e4:	bf00      	nop
 80028e6:	e7fe      	b.n	80028e6 <xTaskIncrementTick+0x46>
 80028e8:	4b61      	ldr	r3, [pc, #388]	; (8002a70 <xTaskIncrementTick+0x1d0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <xTaskIncrementTick+0x1d4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a5f      	ldr	r2, [pc, #380]	; (8002a70 <xTaskIncrementTick+0x1d0>)
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4a5f      	ldr	r2, [pc, #380]	; (8002a74 <xTaskIncrementTick+0x1d4>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b5e      	ldr	r3, [pc, #376]	; (8002a78 <xTaskIncrementTick+0x1d8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	4a5d      	ldr	r2, [pc, #372]	; (8002a78 <xTaskIncrementTick+0x1d8>)
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	f000 f9ad 	bl	8002c64 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800290a:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <xTaskIncrementTick+0x1dc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a3a      	ldr	r2, [r7, #32]
 8002910:	429a      	cmp	r2, r3
 8002912:	f0c0 80a3 	bcc.w	8002a5c <xTaskIncrementTick+0x1bc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002916:	4b56      	ldr	r3, [pc, #344]	; (8002a70 <xTaskIncrementTick+0x1d0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002920:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <xTaskIncrementTick+0x1dc>)
 8002922:	f04f 32ff 	mov.w	r2, #4294967295
 8002926:	601a      	str	r2, [r3, #0]
                    break;
 8002928:	e098      	b.n	8002a5c <xTaskIncrementTick+0x1bc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800292a:	4b51      	ldr	r3, [pc, #324]	; (8002a70 <xTaskIncrementTick+0x1d0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800293a:	6a3a      	ldr	r2, [r7, #32]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	429a      	cmp	r2, r3
 8002940:	d203      	bcs.n	800294a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002942:	4a4e      	ldr	r2, [pc, #312]	; (8002a7c <xTaskIncrementTick+0x1dc>)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	6013      	str	r3, [r2, #0]
                        break;
 8002948:	e088      	b.n	8002a5c <xTaskIncrementTick+0x1bc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	68d2      	ldr	r2, [r2, #12]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	6892      	ldr	r2, [r2, #8]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	3304      	adds	r3, #4
 800296c:	429a      	cmp	r2, r3
 800296e:	d103      	bne.n	8002978 <xTaskIncrementTick+0xd8>
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2200      	movs	r2, #0
 800297c:	615a      	str	r2, [r3, #20]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1e5a      	subs	r2, r3, #1
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01e      	beq.n	80029ce <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	6a12      	ldr	r2, [r2, #32]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	69d2      	ldr	r2, [r2, #28]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	3318      	adds	r3, #24
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d103      	bne.n	80029be <xTaskIncrementTick+0x11e>
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	6a1a      	ldr	r2, [r3, #32]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	2201      	movs	r2, #1
 80029d4:	409a      	lsls	r2, r3
 80029d6:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <xTaskIncrementTick+0x1e0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	4a28      	ldr	r2, [pc, #160]	; (8002a80 <xTaskIncrementTick+0x1e0>)
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e4:	4927      	ldr	r1, [pc, #156]	; (8002a84 <xTaskIncrementTick+0x1e4>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3304      	adds	r3, #4
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	60da      	str	r2, [r3, #12]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	3204      	adds	r2, #4
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1d1a      	adds	r2, r3, #4
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4a18      	ldr	r2, [pc, #96]	; (8002a84 <xTaskIncrementTick+0x1e4>)
 8002a24:	441a      	add	r2, r3
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	615a      	str	r2, [r3, #20]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	4915      	ldr	r1, [pc, #84]	; (8002a84 <xTaskIncrementTick+0x1e4>)
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a40:	1c59      	adds	r1, r3, #1
 8002a42:	4810      	ldr	r0, [pc, #64]	; (8002a84 <xTaskIncrementTick+0x1e4>)
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4403      	add	r3, r0
 8002a4e:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a50:	e761      	b.n	8002916 <xTaskIncrementTick+0x76>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <xTaskIncrementTick+0x1e8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <xTaskIncrementTick+0x1e8>)
 8002a5a:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3728      	adds	r7, #40	; 0x28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200001d8 	.word	0x200001d8
 8002a6c:	200001b4 	.word	0x200001b4
 8002a70:	20000168 	.word	0x20000168
 8002a74:	2000016c 	.word	0x2000016c
 8002a78:	200001c8 	.word	0x200001c8
 8002a7c:	200001d0 	.word	0x200001d0
 8002a80:	200001b8 	.word	0x200001b8
 8002a84:	200000dc 	.word	0x200000dc
 8002a88:	200001c0 	.word	0x200001c0

08002a8c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002a92:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <vTaskSwitchContext+0xa4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <vTaskSwitchContext+0xa8>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002aa0:	e040      	b.n	8002b24 <vTaskSwitchContext+0x98>
            xYieldPendings[ 0 ] = pdFALSE;
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <vTaskSwitchContext+0xa8>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <vTaskSwitchContext+0xac>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002ab6:	7afb      	ldrb	r3, [r7, #11]
 8002ab8:	f1c3 031f 	rsb	r3, r3, #31
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	491f      	ldr	r1, [pc, #124]	; (8002b3c <vTaskSwitchContext+0xb0>)
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10a      	bne.n	8002ae8 <vTaskSwitchContext+0x5c>
    __asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	607b      	str	r3, [r7, #4]
}
 8002ae4:	bf00      	nop
 8002ae6:	e7fe      	b.n	8002ae6 <vTaskSwitchContext+0x5a>
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <vTaskSwitchContext+0xb0>)
 8002af4:	4413      	add	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	3308      	adds	r3, #8
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d103      	bne.n	8002b16 <vTaskSwitchContext+0x8a>
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <vTaskSwitchContext+0xb4>)
 8002b1e:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <vTaskSwitchContext+0xb4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
    }
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	200001d8 	.word	0x200001d8
 8002b34:	200001c4 	.word	0x200001c4
 8002b38:	200001b8 	.word	0x200001b8
 8002b3c:	200000dc 	.word	0x200000dc
 8002b40:	200000d8 	.word	0x200000d8

08002b44 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b4c:	f000 f84c 	bl	8002be8 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <prvIdleTask+0x20>)
 8002b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b60:	e7f4      	b.n	8002b4c <prvIdleTask+0x8>
 8002b62:	bf00      	nop
 8002b64:	e000ed04 	.word	0xe000ed04

08002b68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	e00c      	b.n	8002b8e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <prvInitialiseTaskLists+0x60>)
 8002b80:	4413      	add	r3, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fb34 	bl	80021f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d9ef      	bls.n	8002b74 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b94:	480d      	ldr	r0, [pc, #52]	; (8002bcc <prvInitialiseTaskLists+0x64>)
 8002b96:	f7ff fb2b 	bl	80021f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b9a:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <prvInitialiseTaskLists+0x68>)
 8002b9c:	f7ff fb28 	bl	80021f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ba0:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <prvInitialiseTaskLists+0x6c>)
 8002ba2:	f7ff fb25 	bl	80021f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002ba6:	480c      	ldr	r0, [pc, #48]	; (8002bd8 <prvInitialiseTaskLists+0x70>)
 8002ba8:	f7ff fb22 	bl	80021f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002bac:	480b      	ldr	r0, [pc, #44]	; (8002bdc <prvInitialiseTaskLists+0x74>)
 8002bae:	f7ff fb1f 	bl	80021f0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <prvInitialiseTaskLists+0x78>)
 8002bb4:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <prvInitialiseTaskLists+0x64>)
 8002bb6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <prvInitialiseTaskLists+0x7c>)
 8002bba:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <prvInitialiseTaskLists+0x68>)
 8002bbc:	601a      	str	r2, [r3, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200000dc 	.word	0x200000dc
 8002bcc:	20000140 	.word	0x20000140
 8002bd0:	20000154 	.word	0x20000154
 8002bd4:	20000170 	.word	0x20000170
 8002bd8:	20000184 	.word	0x20000184
 8002bdc:	2000019c 	.word	0x2000019c
 8002be0:	20000168 	.word	0x20000168
 8002be4:	2000016c 	.word	0x2000016c

08002be8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bee:	e019      	b.n	8002c24 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002bf0:	f000 f9ca 	bl	8002f88 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <prvCheckTasksWaitingTermination+0x50>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fb22 	bl	800224a <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <prvCheckTasksWaitingTermination+0x54>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <prvCheckTasksWaitingTermination+0x54>)
 8002c0e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <prvCheckTasksWaitingTermination+0x58>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <prvCheckTasksWaitingTermination+0x58>)
 8002c18:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002c1a:	f000 f9e5 	bl	8002fe8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f810 	bl	8002c44 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <prvCheckTasksWaitingTermination+0x58>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e1      	bne.n	8002bf0 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000184 	.word	0x20000184
 8002c3c:	200001b0 	.word	0x200001b0
 8002c40:	20000198 	.word	0x20000198

08002c44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fba7 	bl	80033a4 <vPortFree>
            vPortFree( pxTCB );
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fba4 	bl	80033a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <prvResetNextTaskUnblockTime+0x30>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d104      	bne.n	8002c7c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <prvResetNextTaskUnblockTime+0x34>)
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c7a:	e005      	b.n	8002c88 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <prvResetNextTaskUnblockTime+0x30>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <prvResetNextTaskUnblockTime+0x34>)
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000168 	.word	0x20000168
 8002c98:	200001d0 	.word	0x200001d0

08002c9c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3b04      	subs	r3, #4
 8002cac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3b04      	subs	r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f023 0201 	bic.w	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3b04      	subs	r3, #4
 8002cca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <pxPortInitialiseStack+0x64>)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3b14      	subs	r3, #20
 8002cd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3b04      	subs	r3, #4
 8002ce2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f06f 0202 	mvn.w	r2, #2
 8002cea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3b20      	subs	r3, #32
 8002cf0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	08002d05 	.word	0x08002d05

08002d04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <prvTaskExitError+0x54>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d00a      	beq.n	8002d2e <prvTaskExitError+0x2a>
    __asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	60fb      	str	r3, [r7, #12]
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <prvTaskExitError+0x28>
    __asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	60bb      	str	r3, [r7, #8]
}
 8002d40:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d42:	bf00      	nop
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0fc      	beq.n	8002d44 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	20000010 	.word	0x20000010
 8002d5c:	00000000 	.word	0x00000000

08002d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <pxCurrentTCBConst2>)
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	6808      	ldr	r0, [r1, #0]
 8002d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6a:	f380 8809 	msr	PSP, r0
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f380 8811 	msr	BASEPRI, r0
 8002d7a:	4770      	bx	lr
 8002d7c:	f3af 8000 	nop.w

08002d80 <pxCurrentTCBConst2>:
 8002d80:	200000d8 	.word	0x200000d8
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop

08002d88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d88:	4808      	ldr	r0, [pc, #32]	; (8002dac <prvPortStartFirstTask+0x24>)
 8002d8a:	6800      	ldr	r0, [r0, #0]
 8002d8c:	6800      	ldr	r0, [r0, #0]
 8002d8e:	f380 8808 	msr	MSP, r0
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f380 8814 	msr	CONTROL, r0
 8002d9a:	b662      	cpsie	i
 8002d9c:	b661      	cpsie	f
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	df00      	svc	0
 8002da8:	bf00      	nop
 8002daa:	0000      	.short	0x0000
 8002dac:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop

08002db4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dba:	4b66      	ldr	r3, [pc, #408]	; (8002f54 <xPortStartScheduler+0x1a0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a66      	ldr	r2, [pc, #408]	; (8002f58 <xPortStartScheduler+0x1a4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10a      	bne.n	8002dda <xPortStartScheduler+0x26>
    __asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dda:	4b5e      	ldr	r3, [pc, #376]	; (8002f54 <xPortStartScheduler+0x1a0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a5f      	ldr	r2, [pc, #380]	; (8002f5c <xPortStartScheduler+0x1a8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10a      	bne.n	8002dfa <xPortStartScheduler+0x46>
    __asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	623b      	str	r3, [r7, #32]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xPortStartScheduler+0x44>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002dfa:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <xPortStartScheduler+0x1ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	332c      	adds	r3, #44	; 0x2c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a57      	ldr	r2, [pc, #348]	; (8002f64 <xPortStartScheduler+0x1b0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00a      	beq.n	8002e22 <xPortStartScheduler+0x6e>
    __asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	61fb      	str	r3, [r7, #28]
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xPortStartScheduler+0x6c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	3338      	adds	r3, #56	; 0x38
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a4f      	ldr	r2, [pc, #316]	; (8002f68 <xPortStartScheduler+0x1b4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00a      	beq.n	8002e44 <xPortStartScheduler+0x90>
    __asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	61bb      	str	r3, [r7, #24]
}
 8002e40:	bf00      	nop
 8002e42:	e7fe      	b.n	8002e42 <xPortStartScheduler+0x8e>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e48:	4b48      	ldr	r3, [pc, #288]	; (8002f6c <xPortStartScheduler+0x1b8>)
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	22ff      	movs	r2, #255	; 0xff
 8002e58:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b40      	ldr	r3, [pc, #256]	; (8002f70 <xPortStartScheduler+0x1bc>)
 8002e6e:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002e70:	4b3f      	ldr	r3, [pc, #252]	; (8002f70 <xPortStartScheduler+0x1bc>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xPortStartScheduler+0xda>
    __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	617b      	str	r3, [r7, #20]
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xPortStartScheduler+0xd8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <xPortStartScheduler+0x10e>
    __asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	613b      	str	r3, [r7, #16]
}
 8002eae:	bf00      	nop
 8002eb0:	e7fe      	b.n	8002eb0 <xPortStartScheduler+0xfc>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	d0f1      	beq.n	8002eb2 <xPortStartScheduler+0xfe>
        }

        if( ulImplementedPrioBits == 8 )
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d103      	bne.n	8002edc <xPortStartScheduler+0x128>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <xPortStartScheduler+0x1c0>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e004      	b.n	8002ee6 <xPortStartScheduler+0x132>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f1c3 0307 	rsb	r3, r3, #7
 8002ee2:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <xPortStartScheduler+0x1c0>)
 8002ee4:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ee6:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <xPortStartScheduler+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <xPortStartScheduler+0x1c0>)
 8002eee:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <xPortStartScheduler+0x1c0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <xPortStartScheduler+0x1c0>)
 8002efa:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f04:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <xPortStartScheduler+0x1c4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <xPortStartScheduler+0x1c4>)
 8002f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <xPortStartScheduler+0x1c4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <xPortStartScheduler+0x1c4>)
 8002f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <xPortStartScheduler+0x1c8>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002f22:	f000 f8e3 	bl	80030ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <xPortStartScheduler+0x1cc>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002f2c:	f000 f902 	bl	8003134 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <xPortStartScheduler+0x1d0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <xPortStartScheduler+0x1d0>)
 8002f36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f3a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002f3c:	f7ff ff24 	bl	8002d88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f40:	f7ff fda4 	bl	8002a8c <vTaskSwitchContext>
    prvTaskExitError();
 8002f44:	f7ff fede 	bl	8002d04 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3730      	adds	r7, #48	; 0x30
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	e000ed00 	.word	0xe000ed00
 8002f58:	410fc271 	.word	0x410fc271
 8002f5c:	410fc270 	.word	0x410fc270
 8002f60:	e000ed08 	.word	0xe000ed08
 8002f64:	08002d61 	.word	0x08002d61
 8002f68:	08003041 	.word	0x08003041
 8002f6c:	e000e400 	.word	0xe000e400
 8002f70:	200001dc 	.word	0x200001dc
 8002f74:	200001e0 	.word	0x200001e0
 8002f78:	e000ed20 	.word	0xe000ed20
 8002f7c:	e000ed1c 	.word	0xe000ed1c
 8002f80:	20000010 	.word	0x20000010
 8002f84:	e000ef34 	.word	0xe000ef34

08002f88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
    __asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	607b      	str	r3, [r7, #4]
}
 8002fa0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <vPortEnterCritical+0x58>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <vPortEnterCritical+0x58>)
 8002faa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <vPortEnterCritical+0x58>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10f      	bne.n	8002fd4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <vPortEnterCritical+0x5c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <vPortEnterCritical+0x4c>
    __asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	603b      	str	r3, [r7, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	e7fe      	b.n	8002fd2 <vPortEnterCritical+0x4a>
    }
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	20000010 	.word	0x20000010
 8002fe4:	e000ed04 	.word	0xe000ed04

08002fe8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <vPortExitCritical+0x50>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <vPortExitCritical+0x24>
    __asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	607b      	str	r3, [r7, #4]
}
 8003008:	bf00      	nop
 800300a:	e7fe      	b.n	800300a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <vPortExitCritical+0x50>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3b01      	subs	r3, #1
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <vPortExitCritical+0x50>)
 8003014:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <vPortExitCritical+0x50>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d105      	bne.n	800302a <vPortExitCritical+0x42>
 800301e:	2300      	movs	r3, #0
 8003020:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8003028:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000010 	.word	0x20000010
 800303c:	00000000 	.word	0x00000000

08003040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003040:	f3ef 8009 	mrs	r0, PSP
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <pxCurrentTCBConst>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f01e 0f10 	tst.w	lr, #16
 8003050:	bf08      	it	eq
 8003052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305a:	6010      	str	r0, [r2, #0]
 800305c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003064:	f380 8811 	msr	BASEPRI, r0
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f7ff fd0c 	bl	8002a8c <vTaskSwitchContext>
 8003074:	f04f 0000 	mov.w	r0, #0
 8003078:	f380 8811 	msr	BASEPRI, r0
 800307c:	bc09      	pop	{r0, r3}
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	6808      	ldr	r0, [r1, #0]
 8003082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003086:	f01e 0f10 	tst.w	lr, #16
 800308a:	bf08      	it	eq
 800308c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003090:	f380 8809 	msr	PSP, r0
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	f3af 8000 	nop.w

080030a0 <pxCurrentTCBConst>:
 80030a0:	200000d8 	.word	0x200000d8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop

080030a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
    __asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	607b      	str	r3, [r7, #4]
}
 80030c0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80030c2:	f7ff fbed 	bl	80028a0 <xTaskIncrementTick>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <SysTick_Handler+0x40>)
 80030ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	f383 8811 	msr	BASEPRI, r3
}
 80030de:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	e000ed04 	.word	0xe000ed04

080030ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <vPortSetupTimerInterrupt+0x34>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <vPortSetupTimerInterrupt+0x38>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <vPortSetupTimerInterrupt+0x3c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a0a      	ldr	r2, [pc, #40]	; (800312c <vPortSetupTimerInterrupt+0x40>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	4a09      	ldr	r2, [pc, #36]	; (8003130 <vPortSetupTimerInterrupt+0x44>)
 800310a:	3b01      	subs	r3, #1
 800310c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <vPortSetupTimerInterrupt+0x34>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010
 8003124:	e000e018 	.word	0xe000e018
 8003128:	20000000 	.word	0x20000000
 800312c:	10624dd3 	.word	0x10624dd3
 8003130:	e000e014 	.word	0xe000e014

08003134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003144 <vPortEnableVFP+0x10>
 8003138:	6801      	ldr	r1, [r0, #0]
 800313a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800313e:	6001      	str	r1, [r0, #0]
 8003140:	4770      	bx	lr
 8003142:	0000      	.short	0x0000
 8003144:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop

0800314c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08e      	sub	sp, #56	; 0x38
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003154:	2300      	movs	r3, #0
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d022      	beq.n	80031a4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800315e:	2308      	movs	r3, #8
 8003160:	43db      	mvns	r3, r3
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	d81b      	bhi.n	80031a0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003168:	2208      	movs	r2, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	2b00      	cmp	r3, #0
 8003178:	d014      	beq.n	80031a4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	f1c3 0308 	rsb	r3, r3, #8
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	43db      	mvns	r3, r3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d804      	bhi.n	800319a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	4413      	add	r3, r2
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	e004      	b.n	80031a4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	e001      	b.n	80031a4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80031a4:	f7ff fa76 	bl	8002694 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031a8:	4b77      	ldr	r3, [pc, #476]	; (8003388 <pvPortMalloc+0x23c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80031b0:	f000 f970 	bl	8003494 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f2c0 80ce 	blt.w	8003358 <pvPortMalloc+0x20c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80ca 	beq.w	8003358 <pvPortMalloc+0x20c>
 80031c4:	4b71      	ldr	r3, [pc, #452]	; (800338c <pvPortMalloc+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	f200 80c4 	bhi.w	8003358 <pvPortMalloc+0x20c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80031d0:	4b6f      	ldr	r3, [pc, #444]	; (8003390 <pvPortMalloc+0x244>)
 80031d2:	633b      	str	r3, [r7, #48]	; 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80031d4:	4b6e      	ldr	r3, [pc, #440]	; (8003390 <pvPortMalloc+0x244>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	4a6d      	ldr	r2, [pc, #436]	; (8003394 <pvPortMalloc+0x248>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d305      	bcc.n	80031ee <pvPortMalloc+0xa2>
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	4a6c      	ldr	r2, [pc, #432]	; (8003398 <pvPortMalloc+0x24c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d801      	bhi.n	80031ee <pvPortMalloc+0xa2>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <pvPortMalloc+0xa4>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d127      	bne.n	8003244 <pvPortMalloc+0xf8>
    __asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	623b      	str	r3, [r7, #32]
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	633b      	str	r3, [r7, #48]	; 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	4a5f      	ldr	r2, [pc, #380]	; (8003394 <pvPortMalloc+0x248>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d305      	bcc.n	8003228 <pvPortMalloc+0xdc>
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	4a5e      	ldr	r2, [pc, #376]	; (8003398 <pvPortMalloc+0x24c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d801      	bhi.n	8003228 <pvPortMalloc+0xdc>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <pvPortMalloc+0xde>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <pvPortMalloc+0xf8>
    __asm volatile
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	61fb      	str	r3, [r7, #28]
}
 8003240:	bf00      	nop
 8003242:	e7fe      	b.n	8003242 <pvPortMalloc+0xf6>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d903      	bls.n	8003256 <pvPortMalloc+0x10a>
 800324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1d9      	bne.n	800320a <pvPortMalloc+0xbe>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003256:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <pvPortMalloc+0x23c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800325c:	429a      	cmp	r2, r3
 800325e:	d07b      	beq.n	8003358 <pvPortMalloc+0x20c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2208      	movs	r2, #8
 8003266:	4413      	add	r3, r2
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	4a49      	ldr	r2, [pc, #292]	; (8003394 <pvPortMalloc+0x248>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d305      	bcc.n	800327e <pvPortMalloc+0x132>
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	4a48      	ldr	r2, [pc, #288]	; (8003398 <pvPortMalloc+0x24c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d801      	bhi.n	800327e <pvPortMalloc+0x132>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <pvPortMalloc+0x134>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <pvPortMalloc+0x14e>
    __asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	61bb      	str	r3, [r7, #24]
}
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <pvPortMalloc+0x14c>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80032a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d90a      	bls.n	80032c2 <pvPortMalloc+0x176>
    __asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	617b      	str	r3, [r7, #20]
}
 80032be:	bf00      	nop
 80032c0:	e7fe      	b.n	80032c0 <pvPortMalloc+0x174>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1ad2      	subs	r2, r2, r3
 80032ca:	2308      	movs	r3, #8
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d923      	bls.n	800331a <pvPortMalloc+0x1ce>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <pvPortMalloc+0x1ae>
    __asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	613b      	str	r3, [r7, #16]
}
 80032f6:	bf00      	nop
 80032f8:	e7fe      	b.n	80032f8 <pvPortMalloc+0x1ac>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	1ad2      	subs	r2, r2, r3
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003318:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800331a:	4b1c      	ldr	r3, [pc, #112]	; (800338c <pvPortMalloc+0x240>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	4a19      	ldr	r2, [pc, #100]	; (800338c <pvPortMalloc+0x240>)
 8003326:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <pvPortMalloc+0x240>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <pvPortMalloc+0x250>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d203      	bcs.n	800333c <pvPortMalloc+0x1f0>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <pvPortMalloc+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a18      	ldr	r2, [pc, #96]	; (800339c <pvPortMalloc+0x250>)
 800333a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800333c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <pvPortMalloc+0x254>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <pvPortMalloc+0x254>)
 8003356:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003358:	f7ff f9aa 	bl	80026b0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <pvPortMalloc+0x230>
    __asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	60fb      	str	r3, [r7, #12]
}
 8003378:	bf00      	nop
 800337a:	e7fe      	b.n	800337a <pvPortMalloc+0x22e>
    return pvReturn;
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800337e:	4618      	mov	r0, r3
 8003380:	3738      	adds	r7, #56	; 0x38
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20012dec 	.word	0x20012dec
 800338c:	20012df0 	.word	0x20012df0
 8003390:	20012de4 	.word	0x20012de4
 8003394:	200001e4 	.word	0x200001e4
 8003398:	20012de3 	.word	0x20012de3
 800339c:	20012df4 	.word	0x20012df4
 80033a0:	20012df8 	.word	0x20012df8

080033a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d061      	beq.n	800347a <vPortFree+0xd6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80033b6:	2308      	movs	r3, #8
 80033b8:	425b      	negs	r3, r3
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	4413      	add	r3, r2
 80033be:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	4a2f      	ldr	r2, [pc, #188]	; (8003484 <vPortFree+0xe0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d305      	bcc.n	80033d8 <vPortFree+0x34>
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	4a2e      	ldr	r2, [pc, #184]	; (8003488 <vPortFree+0xe4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d801      	bhi.n	80033d8 <vPortFree+0x34>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <vPortFree+0x36>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <vPortFree+0x50>
    __asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	617b      	str	r3, [r7, #20]
}
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <vPortFree+0x6e>
    __asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	613b      	str	r3, [r7, #16]
}
 800340e:	bf00      	nop
 8003410:	e7fe      	b.n	8003410 <vPortFree+0x6c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <vPortFree+0x8c>
    __asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	60fb      	str	r3, [r7, #12]
}
 800342c:	bf00      	nop
 800342e:	e7fe      	b.n	800342e <vPortFree+0x8a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	0fdb      	lsrs	r3, r3, #31
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01c      	beq.n	800347a <vPortFree+0xd6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d118      	bne.n	800347a <vPortFree+0xd6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003454:	f7ff f91e 	bl	8002694 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <vPortFree+0xe8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4413      	add	r3, r2
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <vPortFree+0xe8>)
 8003464:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003466:	69b8      	ldr	r0, [r7, #24]
 8003468:	f000 f86e 	bl	8003548 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <vPortFree+0xec>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3301      	adds	r3, #1
 8003472:	4a07      	ldr	r2, [pc, #28]	; (8003490 <vPortFree+0xec>)
 8003474:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003476:	f7ff f91b 	bl	80026b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800347a:	bf00      	nop
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200001e4 	.word	0x200001e4
 8003488:	20012de3 	.word	0x20012de3
 800348c:	20012df0 	.word	0x20012df0
 8003490:	20012dfc 	.word	0x20012dfc

08003494 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800349a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800349e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80034a0:	4b24      	ldr	r3, [pc, #144]	; (8003534 <prvHeapInit+0xa0>)
 80034a2:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00c      	beq.n	80034c8 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	3307      	adds	r3, #7
 80034b2:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	4a1c      	ldr	r2, [pc, #112]	; (8003534 <prvHeapInit+0xa0>)
 80034c4:	4413      	add	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <prvHeapInit+0xa4>)
 80034cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <prvHeapInit+0xa4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4413      	add	r3, r2
 80034da:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80034dc:	2208      	movs	r2, #8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f023 0307 	bic.w	r3, r3, #7
 80034ea:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a13      	ldr	r2, [pc, #76]	; (800353c <prvHeapInit+0xa8>)
 80034f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <prvHeapInit+0xa8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2200      	movs	r2, #0
 80034f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <prvHeapInit+0xa8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	1ad2      	subs	r2, r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <prvHeapInit+0xa8>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4a08      	ldr	r2, [pc, #32]	; (8003540 <prvHeapInit+0xac>)
 800351e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a07      	ldr	r2, [pc, #28]	; (8003544 <prvHeapInit+0xb0>)
 8003526:	6013      	str	r3, [r2, #0]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	200001e4 	.word	0x200001e4
 8003538:	20012de4 	.word	0x20012de4
 800353c:	20012dec 	.word	0x20012dec
 8003540:	20012df4 	.word	0x20012df4
 8003544:	20012df0 	.word	0x20012df0

08003548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003550:	4b36      	ldr	r3, [pc, #216]	; (800362c <prvInsertBlockIntoFreeList+0xe4>)
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e002      	b.n	800355c <prvInsertBlockIntoFreeList+0x14>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d8f7      	bhi.n	8003556 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	4a30      	ldr	r2, [pc, #192]	; (800362c <prvInsertBlockIntoFreeList+0xe4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d017      	beq.n	800359e <prvInsertBlockIntoFreeList+0x56>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	4a2f      	ldr	r2, [pc, #188]	; (8003630 <prvInsertBlockIntoFreeList+0xe8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d305      	bcc.n	8003582 <prvInsertBlockIntoFreeList+0x3a>
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <prvInsertBlockIntoFreeList+0xec>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d801      	bhi.n	8003582 <prvInsertBlockIntoFreeList+0x3a>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <prvInsertBlockIntoFreeList+0x3c>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <prvInsertBlockIntoFreeList+0x56>
    __asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	60fb      	str	r3, [r7, #12]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d108      	bne.n	80035c2 <prvInsertBlockIntoFreeList+0x7a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	441a      	add	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	441a      	add	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d118      	bne.n	8003608 <prvInsertBlockIntoFreeList+0xc0>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b17      	ldr	r3, [pc, #92]	; (8003638 <prvInsertBlockIntoFreeList+0xf0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d00d      	beq.n	80035fe <prvInsertBlockIntoFreeList+0xb6>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	441a      	add	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e008      	b.n	8003610 <prvInsertBlockIntoFreeList+0xc8>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80035fe:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <prvInsertBlockIntoFreeList+0xf0>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e003      	b.n	8003610 <prvInsertBlockIntoFreeList+0xc8>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	429a      	cmp	r2, r3
 8003616:	d002      	beq.n	800361e <prvInsertBlockIntoFreeList+0xd6>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20012de4 	.word	0x20012de4
 8003630:	200001e4 	.word	0x200001e4
 8003634:	20012de3 	.word	0x20012de3
 8003638:	20012dec 	.word	0x20012dec

0800363c <std>:
 800363c:	2300      	movs	r3, #0
 800363e:	b510      	push	{r4, lr}
 8003640:	4604      	mov	r4, r0
 8003642:	e9c0 3300 	strd	r3, r3, [r0]
 8003646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800364a:	6083      	str	r3, [r0, #8]
 800364c:	8181      	strh	r1, [r0, #12]
 800364e:	6643      	str	r3, [r0, #100]	; 0x64
 8003650:	81c2      	strh	r2, [r0, #14]
 8003652:	6183      	str	r3, [r0, #24]
 8003654:	4619      	mov	r1, r3
 8003656:	2208      	movs	r2, #8
 8003658:	305c      	adds	r0, #92	; 0x5c
 800365a:	f000 f928 	bl	80038ae <memset>
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <std+0x38>)
 8003660:	6263      	str	r3, [r4, #36]	; 0x24
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <std+0x3c>)
 8003664:	62a3      	str	r3, [r4, #40]	; 0x28
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <std+0x40>)
 8003668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <std+0x44>)
 800366c:	6224      	str	r4, [r4, #32]
 800366e:	6323      	str	r3, [r4, #48]	; 0x30
 8003670:	bd10      	pop	{r4, pc}
 8003672:	bf00      	nop
 8003674:	08003829 	.word	0x08003829
 8003678:	0800384b 	.word	0x0800384b
 800367c:	08003883 	.word	0x08003883
 8003680:	080038a7 	.word	0x080038a7

08003684 <stdio_exit_handler>:
 8003684:	4a02      	ldr	r2, [pc, #8]	; (8003690 <stdio_exit_handler+0xc>)
 8003686:	4903      	ldr	r1, [pc, #12]	; (8003694 <stdio_exit_handler+0x10>)
 8003688:	4803      	ldr	r0, [pc, #12]	; (8003698 <stdio_exit_handler+0x14>)
 800368a:	f000 b869 	b.w	8003760 <_fwalk_sglue>
 800368e:	bf00      	nop
 8003690:	20000014 	.word	0x20000014
 8003694:	08004509 	.word	0x08004509
 8003698:	20000020 	.word	0x20000020

0800369c <cleanup_stdio>:
 800369c:	6841      	ldr	r1, [r0, #4]
 800369e:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <cleanup_stdio+0x34>)
 80036a0:	4299      	cmp	r1, r3
 80036a2:	b510      	push	{r4, lr}
 80036a4:	4604      	mov	r4, r0
 80036a6:	d001      	beq.n	80036ac <cleanup_stdio+0x10>
 80036a8:	f000 ff2e 	bl	8004508 <_fflush_r>
 80036ac:	68a1      	ldr	r1, [r4, #8]
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <cleanup_stdio+0x38>)
 80036b0:	4299      	cmp	r1, r3
 80036b2:	d002      	beq.n	80036ba <cleanup_stdio+0x1e>
 80036b4:	4620      	mov	r0, r4
 80036b6:	f000 ff27 	bl	8004508 <_fflush_r>
 80036ba:	68e1      	ldr	r1, [r4, #12]
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <cleanup_stdio+0x3c>)
 80036be:	4299      	cmp	r1, r3
 80036c0:	d004      	beq.n	80036cc <cleanup_stdio+0x30>
 80036c2:	4620      	mov	r0, r4
 80036c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c8:	f000 bf1e 	b.w	8004508 <_fflush_r>
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	bf00      	nop
 80036d0:	20012e00 	.word	0x20012e00
 80036d4:	20012e68 	.word	0x20012e68
 80036d8:	20012ed0 	.word	0x20012ed0

080036dc <global_stdio_init.part.0>:
 80036dc:	b510      	push	{r4, lr}
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <global_stdio_init.part.0+0x30>)
 80036e0:	4c0b      	ldr	r4, [pc, #44]	; (8003710 <global_stdio_init.part.0+0x34>)
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <global_stdio_init.part.0+0x38>)
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	4620      	mov	r0, r4
 80036e8:	2200      	movs	r2, #0
 80036ea:	2104      	movs	r1, #4
 80036ec:	f7ff ffa6 	bl	800363c <std>
 80036f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80036f4:	2201      	movs	r2, #1
 80036f6:	2109      	movs	r1, #9
 80036f8:	f7ff ffa0 	bl	800363c <std>
 80036fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003700:	2202      	movs	r2, #2
 8003702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003706:	2112      	movs	r1, #18
 8003708:	f7ff bf98 	b.w	800363c <std>
 800370c:	20012f38 	.word	0x20012f38
 8003710:	20012e00 	.word	0x20012e00
 8003714:	08003685 	.word	0x08003685

08003718 <__sfp_lock_acquire>:
 8003718:	4801      	ldr	r0, [pc, #4]	; (8003720 <__sfp_lock_acquire+0x8>)
 800371a:	f000 b93b 	b.w	8003994 <__retarget_lock_acquire_recursive>
 800371e:	bf00      	nop
 8003720:	20012f41 	.word	0x20012f41

08003724 <__sfp_lock_release>:
 8003724:	4801      	ldr	r0, [pc, #4]	; (800372c <__sfp_lock_release+0x8>)
 8003726:	f000 b936 	b.w	8003996 <__retarget_lock_release_recursive>
 800372a:	bf00      	nop
 800372c:	20012f41 	.word	0x20012f41

08003730 <__sinit>:
 8003730:	b510      	push	{r4, lr}
 8003732:	4604      	mov	r4, r0
 8003734:	f7ff fff0 	bl	8003718 <__sfp_lock_acquire>
 8003738:	6a23      	ldr	r3, [r4, #32]
 800373a:	b11b      	cbz	r3, 8003744 <__sinit+0x14>
 800373c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003740:	f7ff bff0 	b.w	8003724 <__sfp_lock_release>
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <__sinit+0x28>)
 8003746:	6223      	str	r3, [r4, #32]
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <__sinit+0x2c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f5      	bne.n	800373c <__sinit+0xc>
 8003750:	f7ff ffc4 	bl	80036dc <global_stdio_init.part.0>
 8003754:	e7f2      	b.n	800373c <__sinit+0xc>
 8003756:	bf00      	nop
 8003758:	0800369d 	.word	0x0800369d
 800375c:	20012f38 	.word	0x20012f38

08003760 <_fwalk_sglue>:
 8003760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003764:	4607      	mov	r7, r0
 8003766:	4688      	mov	r8, r1
 8003768:	4614      	mov	r4, r2
 800376a:	2600      	movs	r6, #0
 800376c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003770:	f1b9 0901 	subs.w	r9, r9, #1
 8003774:	d505      	bpl.n	8003782 <_fwalk_sglue+0x22>
 8003776:	6824      	ldr	r4, [r4, #0]
 8003778:	2c00      	cmp	r4, #0
 800377a:	d1f7      	bne.n	800376c <_fwalk_sglue+0xc>
 800377c:	4630      	mov	r0, r6
 800377e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003782:	89ab      	ldrh	r3, [r5, #12]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d907      	bls.n	8003798 <_fwalk_sglue+0x38>
 8003788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800378c:	3301      	adds	r3, #1
 800378e:	d003      	beq.n	8003798 <_fwalk_sglue+0x38>
 8003790:	4629      	mov	r1, r5
 8003792:	4638      	mov	r0, r7
 8003794:	47c0      	blx	r8
 8003796:	4306      	orrs	r6, r0
 8003798:	3568      	adds	r5, #104	; 0x68
 800379a:	e7e9      	b.n	8003770 <_fwalk_sglue+0x10>

0800379c <iprintf>:
 800379c:	b40f      	push	{r0, r1, r2, r3}
 800379e:	b507      	push	{r0, r1, r2, lr}
 80037a0:	4906      	ldr	r1, [pc, #24]	; (80037bc <iprintf+0x20>)
 80037a2:	ab04      	add	r3, sp, #16
 80037a4:	6808      	ldr	r0, [r1, #0]
 80037a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80037aa:	6881      	ldr	r1, [r0, #8]
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	f000 fb7b 	bl	8003ea8 <_vfiprintf_r>
 80037b2:	b003      	add	sp, #12
 80037b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037b8:	b004      	add	sp, #16
 80037ba:	4770      	bx	lr
 80037bc:	2000006c 	.word	0x2000006c

080037c0 <sniprintf>:
 80037c0:	b40c      	push	{r2, r3}
 80037c2:	b530      	push	{r4, r5, lr}
 80037c4:	4b17      	ldr	r3, [pc, #92]	; (8003824 <sniprintf+0x64>)
 80037c6:	1e0c      	subs	r4, r1, #0
 80037c8:	681d      	ldr	r5, [r3, #0]
 80037ca:	b09d      	sub	sp, #116	; 0x74
 80037cc:	da08      	bge.n	80037e0 <sniprintf+0x20>
 80037ce:	238b      	movs	r3, #139	; 0x8b
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295
 80037d6:	b01d      	add	sp, #116	; 0x74
 80037d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037dc:	b002      	add	sp, #8
 80037de:	4770      	bx	lr
 80037e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80037e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80037e8:	bf14      	ite	ne
 80037ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80037ee:	4623      	moveq	r3, r4
 80037f0:	9304      	str	r3, [sp, #16]
 80037f2:	9307      	str	r3, [sp, #28]
 80037f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037f8:	9002      	str	r0, [sp, #8]
 80037fa:	9006      	str	r0, [sp, #24]
 80037fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003800:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003802:	ab21      	add	r3, sp, #132	; 0x84
 8003804:	a902      	add	r1, sp, #8
 8003806:	4628      	mov	r0, r5
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	f000 fa25 	bl	8003c58 <_svfiprintf_r>
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	bfbc      	itt	lt
 8003812:	238b      	movlt	r3, #139	; 0x8b
 8003814:	602b      	strlt	r3, [r5, #0]
 8003816:	2c00      	cmp	r4, #0
 8003818:	d0dd      	beq.n	80037d6 <sniprintf+0x16>
 800381a:	9b02      	ldr	r3, [sp, #8]
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e7d9      	b.n	80037d6 <sniprintf+0x16>
 8003822:	bf00      	nop
 8003824:	2000006c 	.word	0x2000006c

08003828 <__sread>:
 8003828:	b510      	push	{r4, lr}
 800382a:	460c      	mov	r4, r1
 800382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003830:	f000 f868 	bl	8003904 <_read_r>
 8003834:	2800      	cmp	r0, #0
 8003836:	bfab      	itete	ge
 8003838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800383a:	89a3      	ldrhlt	r3, [r4, #12]
 800383c:	181b      	addge	r3, r3, r0
 800383e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003842:	bfac      	ite	ge
 8003844:	6563      	strge	r3, [r4, #84]	; 0x54
 8003846:	81a3      	strhlt	r3, [r4, #12]
 8003848:	bd10      	pop	{r4, pc}

0800384a <__swrite>:
 800384a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800384e:	461f      	mov	r7, r3
 8003850:	898b      	ldrh	r3, [r1, #12]
 8003852:	05db      	lsls	r3, r3, #23
 8003854:	4605      	mov	r5, r0
 8003856:	460c      	mov	r4, r1
 8003858:	4616      	mov	r6, r2
 800385a:	d505      	bpl.n	8003868 <__swrite+0x1e>
 800385c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003860:	2302      	movs	r3, #2
 8003862:	2200      	movs	r2, #0
 8003864:	f000 f83c 	bl	80038e0 <_lseek_r>
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800386e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003872:	81a3      	strh	r3, [r4, #12]
 8003874:	4632      	mov	r2, r6
 8003876:	463b      	mov	r3, r7
 8003878:	4628      	mov	r0, r5
 800387a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800387e:	f000 b853 	b.w	8003928 <_write_r>

08003882 <__sseek>:
 8003882:	b510      	push	{r4, lr}
 8003884:	460c      	mov	r4, r1
 8003886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800388a:	f000 f829 	bl	80038e0 <_lseek_r>
 800388e:	1c43      	adds	r3, r0, #1
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	bf15      	itete	ne
 8003894:	6560      	strne	r0, [r4, #84]	; 0x54
 8003896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800389a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800389e:	81a3      	strheq	r3, [r4, #12]
 80038a0:	bf18      	it	ne
 80038a2:	81a3      	strhne	r3, [r4, #12]
 80038a4:	bd10      	pop	{r4, pc}

080038a6 <__sclose>:
 80038a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038aa:	f000 b809 	b.w	80038c0 <_close_r>

080038ae <memset>:
 80038ae:	4402      	add	r2, r0
 80038b0:	4603      	mov	r3, r0
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d100      	bne.n	80038b8 <memset+0xa>
 80038b6:	4770      	bx	lr
 80038b8:	f803 1b01 	strb.w	r1, [r3], #1
 80038bc:	e7f9      	b.n	80038b2 <memset+0x4>
	...

080038c0 <_close_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d06      	ldr	r5, [pc, #24]	; (80038dc <_close_r+0x1c>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	f7fd f9e1 	bl	8000c92 <_close>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_close_r+0x1a>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_close_r+0x1a>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	20012f3c 	.word	0x20012f3c

080038e0 <_lseek_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4d07      	ldr	r5, [pc, #28]	; (8003900 <_lseek_r+0x20>)
 80038e4:	4604      	mov	r4, r0
 80038e6:	4608      	mov	r0, r1
 80038e8:	4611      	mov	r1, r2
 80038ea:	2200      	movs	r2, #0
 80038ec:	602a      	str	r2, [r5, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f7fd f9f6 	bl	8000ce0 <_lseek>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_lseek_r+0x1e>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_lseek_r+0x1e>
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	20012f3c 	.word	0x20012f3c

08003904 <_read_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4d07      	ldr	r5, [pc, #28]	; (8003924 <_read_r+0x20>)
 8003908:	4604      	mov	r4, r0
 800390a:	4608      	mov	r0, r1
 800390c:	4611      	mov	r1, r2
 800390e:	2200      	movs	r2, #0
 8003910:	602a      	str	r2, [r5, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	f7fd f984 	bl	8000c20 <_read>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_read_r+0x1e>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	b103      	cbz	r3, 8003922 <_read_r+0x1e>
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	20012f3c 	.word	0x20012f3c

08003928 <_write_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4d07      	ldr	r5, [pc, #28]	; (8003948 <_write_r+0x20>)
 800392c:	4604      	mov	r4, r0
 800392e:	4608      	mov	r0, r1
 8003930:	4611      	mov	r1, r2
 8003932:	2200      	movs	r2, #0
 8003934:	602a      	str	r2, [r5, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	f7fd f98f 	bl	8000c5a <_write>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_write_r+0x1e>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_write_r+0x1e>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	20012f3c 	.word	0x20012f3c

0800394c <__libc_init_array>:
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	4d0d      	ldr	r5, [pc, #52]	; (8003984 <__libc_init_array+0x38>)
 8003950:	4c0d      	ldr	r4, [pc, #52]	; (8003988 <__libc_init_array+0x3c>)
 8003952:	1b64      	subs	r4, r4, r5
 8003954:	10a4      	asrs	r4, r4, #2
 8003956:	2600      	movs	r6, #0
 8003958:	42a6      	cmp	r6, r4
 800395a:	d109      	bne.n	8003970 <__libc_init_array+0x24>
 800395c:	4d0b      	ldr	r5, [pc, #44]	; (800398c <__libc_init_array+0x40>)
 800395e:	4c0c      	ldr	r4, [pc, #48]	; (8003990 <__libc_init_array+0x44>)
 8003960:	f000 ff84 	bl	800486c <_init>
 8003964:	1b64      	subs	r4, r4, r5
 8003966:	10a4      	asrs	r4, r4, #2
 8003968:	2600      	movs	r6, #0
 800396a:	42a6      	cmp	r6, r4
 800396c:	d105      	bne.n	800397a <__libc_init_array+0x2e>
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	f855 3b04 	ldr.w	r3, [r5], #4
 8003974:	4798      	blx	r3
 8003976:	3601      	adds	r6, #1
 8003978:	e7ee      	b.n	8003958 <__libc_init_array+0xc>
 800397a:	f855 3b04 	ldr.w	r3, [r5], #4
 800397e:	4798      	blx	r3
 8003980:	3601      	adds	r6, #1
 8003982:	e7f2      	b.n	800396a <__libc_init_array+0x1e>
 8003984:	0800496c 	.word	0x0800496c
 8003988:	0800496c 	.word	0x0800496c
 800398c:	0800496c 	.word	0x0800496c
 8003990:	08004970 	.word	0x08004970

08003994 <__retarget_lock_acquire_recursive>:
 8003994:	4770      	bx	lr

08003996 <__retarget_lock_release_recursive>:
 8003996:	4770      	bx	lr

08003998 <memcpy>:
 8003998:	440a      	add	r2, r1
 800399a:	4291      	cmp	r1, r2
 800399c:	f100 33ff 	add.w	r3, r0, #4294967295
 80039a0:	d100      	bne.n	80039a4 <memcpy+0xc>
 80039a2:	4770      	bx	lr
 80039a4:	b510      	push	{r4, lr}
 80039a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039ae:	4291      	cmp	r1, r2
 80039b0:	d1f9      	bne.n	80039a6 <memcpy+0xe>
 80039b2:	bd10      	pop	{r4, pc}

080039b4 <_free_r>:
 80039b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039b6:	2900      	cmp	r1, #0
 80039b8:	d044      	beq.n	8003a44 <_free_r+0x90>
 80039ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039be:	9001      	str	r0, [sp, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f1a1 0404 	sub.w	r4, r1, #4
 80039c6:	bfb8      	it	lt
 80039c8:	18e4      	addlt	r4, r4, r3
 80039ca:	f000 f8df 	bl	8003b8c <__malloc_lock>
 80039ce:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <_free_r+0x94>)
 80039d0:	9801      	ldr	r0, [sp, #4]
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	b933      	cbnz	r3, 80039e4 <_free_r+0x30>
 80039d6:	6063      	str	r3, [r4, #4]
 80039d8:	6014      	str	r4, [r2, #0]
 80039da:	b003      	add	sp, #12
 80039dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039e0:	f000 b8da 	b.w	8003b98 <__malloc_unlock>
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	d908      	bls.n	80039fa <_free_r+0x46>
 80039e8:	6825      	ldr	r5, [r4, #0]
 80039ea:	1961      	adds	r1, r4, r5
 80039ec:	428b      	cmp	r3, r1
 80039ee:	bf01      	itttt	eq
 80039f0:	6819      	ldreq	r1, [r3, #0]
 80039f2:	685b      	ldreq	r3, [r3, #4]
 80039f4:	1949      	addeq	r1, r1, r5
 80039f6:	6021      	streq	r1, [r4, #0]
 80039f8:	e7ed      	b.n	80039d6 <_free_r+0x22>
 80039fa:	461a      	mov	r2, r3
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	b10b      	cbz	r3, 8003a04 <_free_r+0x50>
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	d9fa      	bls.n	80039fa <_free_r+0x46>
 8003a04:	6811      	ldr	r1, [r2, #0]
 8003a06:	1855      	adds	r5, r2, r1
 8003a08:	42a5      	cmp	r5, r4
 8003a0a:	d10b      	bne.n	8003a24 <_free_r+0x70>
 8003a0c:	6824      	ldr	r4, [r4, #0]
 8003a0e:	4421      	add	r1, r4
 8003a10:	1854      	adds	r4, r2, r1
 8003a12:	42a3      	cmp	r3, r4
 8003a14:	6011      	str	r1, [r2, #0]
 8003a16:	d1e0      	bne.n	80039da <_free_r+0x26>
 8003a18:	681c      	ldr	r4, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	6053      	str	r3, [r2, #4]
 8003a1e:	440c      	add	r4, r1
 8003a20:	6014      	str	r4, [r2, #0]
 8003a22:	e7da      	b.n	80039da <_free_r+0x26>
 8003a24:	d902      	bls.n	8003a2c <_free_r+0x78>
 8003a26:	230c      	movs	r3, #12
 8003a28:	6003      	str	r3, [r0, #0]
 8003a2a:	e7d6      	b.n	80039da <_free_r+0x26>
 8003a2c:	6825      	ldr	r5, [r4, #0]
 8003a2e:	1961      	adds	r1, r4, r5
 8003a30:	428b      	cmp	r3, r1
 8003a32:	bf04      	itt	eq
 8003a34:	6819      	ldreq	r1, [r3, #0]
 8003a36:	685b      	ldreq	r3, [r3, #4]
 8003a38:	6063      	str	r3, [r4, #4]
 8003a3a:	bf04      	itt	eq
 8003a3c:	1949      	addeq	r1, r1, r5
 8003a3e:	6021      	streq	r1, [r4, #0]
 8003a40:	6054      	str	r4, [r2, #4]
 8003a42:	e7ca      	b.n	80039da <_free_r+0x26>
 8003a44:	b003      	add	sp, #12
 8003a46:	bd30      	pop	{r4, r5, pc}
 8003a48:	20012f44 	.word	0x20012f44

08003a4c <sbrk_aligned>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	4e0e      	ldr	r6, [pc, #56]	; (8003a88 <sbrk_aligned+0x3c>)
 8003a50:	460c      	mov	r4, r1
 8003a52:	6831      	ldr	r1, [r6, #0]
 8003a54:	4605      	mov	r5, r0
 8003a56:	b911      	cbnz	r1, 8003a5e <sbrk_aligned+0x12>
 8003a58:	f000 fe2e 	bl	80046b8 <_sbrk_r>
 8003a5c:	6030      	str	r0, [r6, #0]
 8003a5e:	4621      	mov	r1, r4
 8003a60:	4628      	mov	r0, r5
 8003a62:	f000 fe29 	bl	80046b8 <_sbrk_r>
 8003a66:	1c43      	adds	r3, r0, #1
 8003a68:	d00a      	beq.n	8003a80 <sbrk_aligned+0x34>
 8003a6a:	1cc4      	adds	r4, r0, #3
 8003a6c:	f024 0403 	bic.w	r4, r4, #3
 8003a70:	42a0      	cmp	r0, r4
 8003a72:	d007      	beq.n	8003a84 <sbrk_aligned+0x38>
 8003a74:	1a21      	subs	r1, r4, r0
 8003a76:	4628      	mov	r0, r5
 8003a78:	f000 fe1e 	bl	80046b8 <_sbrk_r>
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d101      	bne.n	8003a84 <sbrk_aligned+0x38>
 8003a80:	f04f 34ff 	mov.w	r4, #4294967295
 8003a84:	4620      	mov	r0, r4
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	20012f48 	.word	0x20012f48

08003a8c <_malloc_r>:
 8003a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a90:	1ccd      	adds	r5, r1, #3
 8003a92:	f025 0503 	bic.w	r5, r5, #3
 8003a96:	3508      	adds	r5, #8
 8003a98:	2d0c      	cmp	r5, #12
 8003a9a:	bf38      	it	cc
 8003a9c:	250c      	movcc	r5, #12
 8003a9e:	2d00      	cmp	r5, #0
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	db01      	blt.n	8003aa8 <_malloc_r+0x1c>
 8003aa4:	42a9      	cmp	r1, r5
 8003aa6:	d905      	bls.n	8003ab4 <_malloc_r+0x28>
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	2600      	movs	r6, #0
 8003aae:	4630      	mov	r0, r6
 8003ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ab4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b88 <_malloc_r+0xfc>
 8003ab8:	f000 f868 	bl	8003b8c <__malloc_lock>
 8003abc:	f8d8 3000 	ldr.w	r3, [r8]
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	bb5c      	cbnz	r4, 8003b1c <_malloc_r+0x90>
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	f7ff ffc0 	bl	8003a4c <sbrk_aligned>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	4604      	mov	r4, r0
 8003ad0:	d155      	bne.n	8003b7e <_malloc_r+0xf2>
 8003ad2:	f8d8 4000 	ldr.w	r4, [r8]
 8003ad6:	4626      	mov	r6, r4
 8003ad8:	2e00      	cmp	r6, #0
 8003ada:	d145      	bne.n	8003b68 <_malloc_r+0xdc>
 8003adc:	2c00      	cmp	r4, #0
 8003ade:	d048      	beq.n	8003b72 <_malloc_r+0xe6>
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	eb04 0903 	add.w	r9, r4, r3
 8003aea:	f000 fde5 	bl	80046b8 <_sbrk_r>
 8003aee:	4581      	cmp	r9, r0
 8003af0:	d13f      	bne.n	8003b72 <_malloc_r+0xe6>
 8003af2:	6821      	ldr	r1, [r4, #0]
 8003af4:	1a6d      	subs	r5, r5, r1
 8003af6:	4629      	mov	r1, r5
 8003af8:	4638      	mov	r0, r7
 8003afa:	f7ff ffa7 	bl	8003a4c <sbrk_aligned>
 8003afe:	3001      	adds	r0, #1
 8003b00:	d037      	beq.n	8003b72 <_malloc_r+0xe6>
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	442b      	add	r3, r5
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	f8d8 3000 	ldr.w	r3, [r8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d038      	beq.n	8003b82 <_malloc_r+0xf6>
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	42a2      	cmp	r2, r4
 8003b14:	d12b      	bne.n	8003b6e <_malloc_r+0xe2>
 8003b16:	2200      	movs	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	e00f      	b.n	8003b3c <_malloc_r+0xb0>
 8003b1c:	6822      	ldr	r2, [r4, #0]
 8003b1e:	1b52      	subs	r2, r2, r5
 8003b20:	d41f      	bmi.n	8003b62 <_malloc_r+0xd6>
 8003b22:	2a0b      	cmp	r2, #11
 8003b24:	d917      	bls.n	8003b56 <_malloc_r+0xca>
 8003b26:	1961      	adds	r1, r4, r5
 8003b28:	42a3      	cmp	r3, r4
 8003b2a:	6025      	str	r5, [r4, #0]
 8003b2c:	bf18      	it	ne
 8003b2e:	6059      	strne	r1, [r3, #4]
 8003b30:	6863      	ldr	r3, [r4, #4]
 8003b32:	bf08      	it	eq
 8003b34:	f8c8 1000 	streq.w	r1, [r8]
 8003b38:	5162      	str	r2, [r4, r5]
 8003b3a:	604b      	str	r3, [r1, #4]
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	f104 060b 	add.w	r6, r4, #11
 8003b42:	f000 f829 	bl	8003b98 <__malloc_unlock>
 8003b46:	f026 0607 	bic.w	r6, r6, #7
 8003b4a:	1d23      	adds	r3, r4, #4
 8003b4c:	1af2      	subs	r2, r6, r3
 8003b4e:	d0ae      	beq.n	8003aae <_malloc_r+0x22>
 8003b50:	1b9b      	subs	r3, r3, r6
 8003b52:	50a3      	str	r3, [r4, r2]
 8003b54:	e7ab      	b.n	8003aae <_malloc_r+0x22>
 8003b56:	42a3      	cmp	r3, r4
 8003b58:	6862      	ldr	r2, [r4, #4]
 8003b5a:	d1dd      	bne.n	8003b18 <_malloc_r+0x8c>
 8003b5c:	f8c8 2000 	str.w	r2, [r8]
 8003b60:	e7ec      	b.n	8003b3c <_malloc_r+0xb0>
 8003b62:	4623      	mov	r3, r4
 8003b64:	6864      	ldr	r4, [r4, #4]
 8003b66:	e7ac      	b.n	8003ac2 <_malloc_r+0x36>
 8003b68:	4634      	mov	r4, r6
 8003b6a:	6876      	ldr	r6, [r6, #4]
 8003b6c:	e7b4      	b.n	8003ad8 <_malloc_r+0x4c>
 8003b6e:	4613      	mov	r3, r2
 8003b70:	e7cc      	b.n	8003b0c <_malloc_r+0x80>
 8003b72:	230c      	movs	r3, #12
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	4638      	mov	r0, r7
 8003b78:	f000 f80e 	bl	8003b98 <__malloc_unlock>
 8003b7c:	e797      	b.n	8003aae <_malloc_r+0x22>
 8003b7e:	6025      	str	r5, [r4, #0]
 8003b80:	e7dc      	b.n	8003b3c <_malloc_r+0xb0>
 8003b82:	605b      	str	r3, [r3, #4]
 8003b84:	deff      	udf	#255	; 0xff
 8003b86:	bf00      	nop
 8003b88:	20012f44 	.word	0x20012f44

08003b8c <__malloc_lock>:
 8003b8c:	4801      	ldr	r0, [pc, #4]	; (8003b94 <__malloc_lock+0x8>)
 8003b8e:	f7ff bf01 	b.w	8003994 <__retarget_lock_acquire_recursive>
 8003b92:	bf00      	nop
 8003b94:	20012f40 	.word	0x20012f40

08003b98 <__malloc_unlock>:
 8003b98:	4801      	ldr	r0, [pc, #4]	; (8003ba0 <__malloc_unlock+0x8>)
 8003b9a:	f7ff befc 	b.w	8003996 <__retarget_lock_release_recursive>
 8003b9e:	bf00      	nop
 8003ba0:	20012f40 	.word	0x20012f40

08003ba4 <__ssputs_r>:
 8003ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba8:	688e      	ldr	r6, [r1, #8]
 8003baa:	461f      	mov	r7, r3
 8003bac:	42be      	cmp	r6, r7
 8003bae:	680b      	ldr	r3, [r1, #0]
 8003bb0:	4682      	mov	sl, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	4690      	mov	r8, r2
 8003bb6:	d82c      	bhi.n	8003c12 <__ssputs_r+0x6e>
 8003bb8:	898a      	ldrh	r2, [r1, #12]
 8003bba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bbe:	d026      	beq.n	8003c0e <__ssputs_r+0x6a>
 8003bc0:	6965      	ldr	r5, [r4, #20]
 8003bc2:	6909      	ldr	r1, [r1, #16]
 8003bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bc8:	eba3 0901 	sub.w	r9, r3, r1
 8003bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bd0:	1c7b      	adds	r3, r7, #1
 8003bd2:	444b      	add	r3, r9
 8003bd4:	106d      	asrs	r5, r5, #1
 8003bd6:	429d      	cmp	r5, r3
 8003bd8:	bf38      	it	cc
 8003bda:	461d      	movcc	r5, r3
 8003bdc:	0553      	lsls	r3, r2, #21
 8003bde:	d527      	bpl.n	8003c30 <__ssputs_r+0x8c>
 8003be0:	4629      	mov	r1, r5
 8003be2:	f7ff ff53 	bl	8003a8c <_malloc_r>
 8003be6:	4606      	mov	r6, r0
 8003be8:	b360      	cbz	r0, 8003c44 <__ssputs_r+0xa0>
 8003bea:	6921      	ldr	r1, [r4, #16]
 8003bec:	464a      	mov	r2, r9
 8003bee:	f7ff fed3 	bl	8003998 <memcpy>
 8003bf2:	89a3      	ldrh	r3, [r4, #12]
 8003bf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfc:	81a3      	strh	r3, [r4, #12]
 8003bfe:	6126      	str	r6, [r4, #16]
 8003c00:	6165      	str	r5, [r4, #20]
 8003c02:	444e      	add	r6, r9
 8003c04:	eba5 0509 	sub.w	r5, r5, r9
 8003c08:	6026      	str	r6, [r4, #0]
 8003c0a:	60a5      	str	r5, [r4, #8]
 8003c0c:	463e      	mov	r6, r7
 8003c0e:	42be      	cmp	r6, r7
 8003c10:	d900      	bls.n	8003c14 <__ssputs_r+0x70>
 8003c12:	463e      	mov	r6, r7
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	4632      	mov	r2, r6
 8003c18:	4641      	mov	r1, r8
 8003c1a:	f000 fd33 	bl	8004684 <memmove>
 8003c1e:	68a3      	ldr	r3, [r4, #8]
 8003c20:	1b9b      	subs	r3, r3, r6
 8003c22:	60a3      	str	r3, [r4, #8]
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	4433      	add	r3, r6
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c30:	462a      	mov	r2, r5
 8003c32:	f000 fd51 	bl	80046d8 <_realloc_r>
 8003c36:	4606      	mov	r6, r0
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d1e0      	bne.n	8003bfe <__ssputs_r+0x5a>
 8003c3c:	6921      	ldr	r1, [r4, #16]
 8003c3e:	4650      	mov	r0, sl
 8003c40:	f7ff feb8 	bl	80039b4 <_free_r>
 8003c44:	230c      	movs	r3, #12
 8003c46:	f8ca 3000 	str.w	r3, [sl]
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c50:	81a3      	strh	r3, [r4, #12]
 8003c52:	f04f 30ff 	mov.w	r0, #4294967295
 8003c56:	e7e9      	b.n	8003c2c <__ssputs_r+0x88>

08003c58 <_svfiprintf_r>:
 8003c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5c:	4698      	mov	r8, r3
 8003c5e:	898b      	ldrh	r3, [r1, #12]
 8003c60:	061b      	lsls	r3, r3, #24
 8003c62:	b09d      	sub	sp, #116	; 0x74
 8003c64:	4607      	mov	r7, r0
 8003c66:	460d      	mov	r5, r1
 8003c68:	4614      	mov	r4, r2
 8003c6a:	d50e      	bpl.n	8003c8a <_svfiprintf_r+0x32>
 8003c6c:	690b      	ldr	r3, [r1, #16]
 8003c6e:	b963      	cbnz	r3, 8003c8a <_svfiprintf_r+0x32>
 8003c70:	2140      	movs	r1, #64	; 0x40
 8003c72:	f7ff ff0b 	bl	8003a8c <_malloc_r>
 8003c76:	6028      	str	r0, [r5, #0]
 8003c78:	6128      	str	r0, [r5, #16]
 8003c7a:	b920      	cbnz	r0, 8003c86 <_svfiprintf_r+0x2e>
 8003c7c:	230c      	movs	r3, #12
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	e0d0      	b.n	8003e28 <_svfiprintf_r+0x1d0>
 8003c86:	2340      	movs	r3, #64	; 0x40
 8003c88:	616b      	str	r3, [r5, #20]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8e:	2320      	movs	r3, #32
 8003c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c98:	2330      	movs	r3, #48	; 0x30
 8003c9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e40 <_svfiprintf_r+0x1e8>
 8003c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ca2:	f04f 0901 	mov.w	r9, #1
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	469a      	mov	sl, r3
 8003caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cae:	b10a      	cbz	r2, 8003cb4 <_svfiprintf_r+0x5c>
 8003cb0:	2a25      	cmp	r2, #37	; 0x25
 8003cb2:	d1f9      	bne.n	8003ca8 <_svfiprintf_r+0x50>
 8003cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8003cb8:	d00b      	beq.n	8003cd2 <_svfiprintf_r+0x7a>
 8003cba:	465b      	mov	r3, fp
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	f7ff ff6f 	bl	8003ba4 <__ssputs_r>
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	f000 80a9 	beq.w	8003e1e <_svfiprintf_r+0x1c6>
 8003ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cce:	445a      	add	r2, fp
 8003cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8003cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80a1 	beq.w	8003e1e <_svfiprintf_r+0x1c6>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ce6:	f10a 0a01 	add.w	sl, sl, #1
 8003cea:	9304      	str	r3, [sp, #16]
 8003cec:	9307      	str	r3, [sp, #28]
 8003cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8003cf4:	4654      	mov	r4, sl
 8003cf6:	2205      	movs	r2, #5
 8003cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cfc:	4850      	ldr	r0, [pc, #320]	; (8003e40 <_svfiprintf_r+0x1e8>)
 8003cfe:	f7fc fa67 	bl	80001d0 <memchr>
 8003d02:	9a04      	ldr	r2, [sp, #16]
 8003d04:	b9d8      	cbnz	r0, 8003d3e <_svfiprintf_r+0xe6>
 8003d06:	06d0      	lsls	r0, r2, #27
 8003d08:	bf44      	itt	mi
 8003d0a:	2320      	movmi	r3, #32
 8003d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d10:	0711      	lsls	r1, r2, #28
 8003d12:	bf44      	itt	mi
 8003d14:	232b      	movmi	r3, #43	; 0x2b
 8003d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d20:	d015      	beq.n	8003d4e <_svfiprintf_r+0xf6>
 8003d22:	9a07      	ldr	r2, [sp, #28]
 8003d24:	4654      	mov	r4, sl
 8003d26:	2000      	movs	r0, #0
 8003d28:	f04f 0c0a 	mov.w	ip, #10
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d32:	3b30      	subs	r3, #48	; 0x30
 8003d34:	2b09      	cmp	r3, #9
 8003d36:	d94d      	bls.n	8003dd4 <_svfiprintf_r+0x17c>
 8003d38:	b1b0      	cbz	r0, 8003d68 <_svfiprintf_r+0x110>
 8003d3a:	9207      	str	r2, [sp, #28]
 8003d3c:	e014      	b.n	8003d68 <_svfiprintf_r+0x110>
 8003d3e:	eba0 0308 	sub.w	r3, r0, r8
 8003d42:	fa09 f303 	lsl.w	r3, r9, r3
 8003d46:	4313      	orrs	r3, r2
 8003d48:	9304      	str	r3, [sp, #16]
 8003d4a:	46a2      	mov	sl, r4
 8003d4c:	e7d2      	b.n	8003cf4 <_svfiprintf_r+0x9c>
 8003d4e:	9b03      	ldr	r3, [sp, #12]
 8003d50:	1d19      	adds	r1, r3, #4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	9103      	str	r1, [sp, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bfbb      	ittet	lt
 8003d5a:	425b      	neglt	r3, r3
 8003d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8003d60:	9307      	strge	r3, [sp, #28]
 8003d62:	9307      	strlt	r3, [sp, #28]
 8003d64:	bfb8      	it	lt
 8003d66:	9204      	strlt	r2, [sp, #16]
 8003d68:	7823      	ldrb	r3, [r4, #0]
 8003d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003d6c:	d10c      	bne.n	8003d88 <_svfiprintf_r+0x130>
 8003d6e:	7863      	ldrb	r3, [r4, #1]
 8003d70:	2b2a      	cmp	r3, #42	; 0x2a
 8003d72:	d134      	bne.n	8003dde <_svfiprintf_r+0x186>
 8003d74:	9b03      	ldr	r3, [sp, #12]
 8003d76:	1d1a      	adds	r2, r3, #4
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	9203      	str	r2, [sp, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bfb8      	it	lt
 8003d80:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d84:	3402      	adds	r4, #2
 8003d86:	9305      	str	r3, [sp, #20]
 8003d88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e50 <_svfiprintf_r+0x1f8>
 8003d8c:	7821      	ldrb	r1, [r4, #0]
 8003d8e:	2203      	movs	r2, #3
 8003d90:	4650      	mov	r0, sl
 8003d92:	f7fc fa1d 	bl	80001d0 <memchr>
 8003d96:	b138      	cbz	r0, 8003da8 <_svfiprintf_r+0x150>
 8003d98:	9b04      	ldr	r3, [sp, #16]
 8003d9a:	eba0 000a 	sub.w	r0, r0, sl
 8003d9e:	2240      	movs	r2, #64	; 0x40
 8003da0:	4082      	lsls	r2, r0
 8003da2:	4313      	orrs	r3, r2
 8003da4:	3401      	adds	r4, #1
 8003da6:	9304      	str	r3, [sp, #16]
 8003da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dac:	4825      	ldr	r0, [pc, #148]	; (8003e44 <_svfiprintf_r+0x1ec>)
 8003dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003db2:	2206      	movs	r2, #6
 8003db4:	f7fc fa0c 	bl	80001d0 <memchr>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d038      	beq.n	8003e2e <_svfiprintf_r+0x1d6>
 8003dbc:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <_svfiprintf_r+0x1f0>)
 8003dbe:	bb1b      	cbnz	r3, 8003e08 <_svfiprintf_r+0x1b0>
 8003dc0:	9b03      	ldr	r3, [sp, #12]
 8003dc2:	3307      	adds	r3, #7
 8003dc4:	f023 0307 	bic.w	r3, r3, #7
 8003dc8:	3308      	adds	r3, #8
 8003dca:	9303      	str	r3, [sp, #12]
 8003dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dce:	4433      	add	r3, r6
 8003dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd2:	e768      	b.n	8003ca6 <_svfiprintf_r+0x4e>
 8003dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dd8:	460c      	mov	r4, r1
 8003dda:	2001      	movs	r0, #1
 8003ddc:	e7a6      	b.n	8003d2c <_svfiprintf_r+0xd4>
 8003dde:	2300      	movs	r3, #0
 8003de0:	3401      	adds	r4, #1
 8003de2:	9305      	str	r3, [sp, #20]
 8003de4:	4619      	mov	r1, r3
 8003de6:	f04f 0c0a 	mov.w	ip, #10
 8003dea:	4620      	mov	r0, r4
 8003dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003df0:	3a30      	subs	r2, #48	; 0x30
 8003df2:	2a09      	cmp	r2, #9
 8003df4:	d903      	bls.n	8003dfe <_svfiprintf_r+0x1a6>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0c6      	beq.n	8003d88 <_svfiprintf_r+0x130>
 8003dfa:	9105      	str	r1, [sp, #20]
 8003dfc:	e7c4      	b.n	8003d88 <_svfiprintf_r+0x130>
 8003dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e02:	4604      	mov	r4, r0
 8003e04:	2301      	movs	r3, #1
 8003e06:	e7f0      	b.n	8003dea <_svfiprintf_r+0x192>
 8003e08:	ab03      	add	r3, sp, #12
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	462a      	mov	r2, r5
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <_svfiprintf_r+0x1f4>)
 8003e10:	a904      	add	r1, sp, #16
 8003e12:	4638      	mov	r0, r7
 8003e14:	f3af 8000 	nop.w
 8003e18:	1c42      	adds	r2, r0, #1
 8003e1a:	4606      	mov	r6, r0
 8003e1c:	d1d6      	bne.n	8003dcc <_svfiprintf_r+0x174>
 8003e1e:	89ab      	ldrh	r3, [r5, #12]
 8003e20:	065b      	lsls	r3, r3, #25
 8003e22:	f53f af2d 	bmi.w	8003c80 <_svfiprintf_r+0x28>
 8003e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e28:	b01d      	add	sp, #116	; 0x74
 8003e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e2e:	ab03      	add	r3, sp, #12
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	462a      	mov	r2, r5
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <_svfiprintf_r+0x1f4>)
 8003e36:	a904      	add	r1, sp, #16
 8003e38:	4638      	mov	r0, r7
 8003e3a:	f000 f9bd 	bl	80041b8 <_printf_i>
 8003e3e:	e7eb      	b.n	8003e18 <_svfiprintf_r+0x1c0>
 8003e40:	08004930 	.word	0x08004930
 8003e44:	0800493a 	.word	0x0800493a
 8003e48:	00000000 	.word	0x00000000
 8003e4c:	08003ba5 	.word	0x08003ba5
 8003e50:	08004936 	.word	0x08004936

08003e54 <__sfputc_r>:
 8003e54:	6893      	ldr	r3, [r2, #8]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	b410      	push	{r4}
 8003e5c:	6093      	str	r3, [r2, #8]
 8003e5e:	da08      	bge.n	8003e72 <__sfputc_r+0x1e>
 8003e60:	6994      	ldr	r4, [r2, #24]
 8003e62:	42a3      	cmp	r3, r4
 8003e64:	db01      	blt.n	8003e6a <__sfputc_r+0x16>
 8003e66:	290a      	cmp	r1, #10
 8003e68:	d103      	bne.n	8003e72 <__sfputc_r+0x1e>
 8003e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e6e:	f000 bb73 	b.w	8004558 <__swbuf_r>
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	1c58      	adds	r0, r3, #1
 8003e76:	6010      	str	r0, [r2, #0]
 8003e78:	7019      	strb	r1, [r3, #0]
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <__sfputs_r>:
 8003e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e84:	4606      	mov	r6, r0
 8003e86:	460f      	mov	r7, r1
 8003e88:	4614      	mov	r4, r2
 8003e8a:	18d5      	adds	r5, r2, r3
 8003e8c:	42ac      	cmp	r4, r5
 8003e8e:	d101      	bne.n	8003e94 <__sfputs_r+0x12>
 8003e90:	2000      	movs	r0, #0
 8003e92:	e007      	b.n	8003ea4 <__sfputs_r+0x22>
 8003e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e98:	463a      	mov	r2, r7
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f7ff ffda 	bl	8003e54 <__sfputc_r>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d1f3      	bne.n	8003e8c <__sfputs_r+0xa>
 8003ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ea8 <_vfiprintf_r>:
 8003ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eac:	460d      	mov	r5, r1
 8003eae:	b09d      	sub	sp, #116	; 0x74
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	4698      	mov	r8, r3
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	b118      	cbz	r0, 8003ec0 <_vfiprintf_r+0x18>
 8003eb8:	6a03      	ldr	r3, [r0, #32]
 8003eba:	b90b      	cbnz	r3, 8003ec0 <_vfiprintf_r+0x18>
 8003ebc:	f7ff fc38 	bl	8003730 <__sinit>
 8003ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ec2:	07d9      	lsls	r1, r3, #31
 8003ec4:	d405      	bmi.n	8003ed2 <_vfiprintf_r+0x2a>
 8003ec6:	89ab      	ldrh	r3, [r5, #12]
 8003ec8:	059a      	lsls	r2, r3, #22
 8003eca:	d402      	bmi.n	8003ed2 <_vfiprintf_r+0x2a>
 8003ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ece:	f7ff fd61 	bl	8003994 <__retarget_lock_acquire_recursive>
 8003ed2:	89ab      	ldrh	r3, [r5, #12]
 8003ed4:	071b      	lsls	r3, r3, #28
 8003ed6:	d501      	bpl.n	8003edc <_vfiprintf_r+0x34>
 8003ed8:	692b      	ldr	r3, [r5, #16]
 8003eda:	b99b      	cbnz	r3, 8003f04 <_vfiprintf_r+0x5c>
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f000 fb78 	bl	80045d4 <__swsetup_r>
 8003ee4:	b170      	cbz	r0, 8003f04 <_vfiprintf_r+0x5c>
 8003ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ee8:	07dc      	lsls	r4, r3, #31
 8003eea:	d504      	bpl.n	8003ef6 <_vfiprintf_r+0x4e>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	b01d      	add	sp, #116	; 0x74
 8003ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef6:	89ab      	ldrh	r3, [r5, #12]
 8003ef8:	0598      	lsls	r0, r3, #22
 8003efa:	d4f7      	bmi.n	8003eec <_vfiprintf_r+0x44>
 8003efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003efe:	f7ff fd4a 	bl	8003996 <__retarget_lock_release_recursive>
 8003f02:	e7f3      	b.n	8003eec <_vfiprintf_r+0x44>
 8003f04:	2300      	movs	r3, #0
 8003f06:	9309      	str	r3, [sp, #36]	; 0x24
 8003f08:	2320      	movs	r3, #32
 8003f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f12:	2330      	movs	r3, #48	; 0x30
 8003f14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80040c8 <_vfiprintf_r+0x220>
 8003f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f1c:	f04f 0901 	mov.w	r9, #1
 8003f20:	4623      	mov	r3, r4
 8003f22:	469a      	mov	sl, r3
 8003f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f28:	b10a      	cbz	r2, 8003f2e <_vfiprintf_r+0x86>
 8003f2a:	2a25      	cmp	r2, #37	; 0x25
 8003f2c:	d1f9      	bne.n	8003f22 <_vfiprintf_r+0x7a>
 8003f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f32:	d00b      	beq.n	8003f4c <_vfiprintf_r+0xa4>
 8003f34:	465b      	mov	r3, fp
 8003f36:	4622      	mov	r2, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff ffa1 	bl	8003e82 <__sfputs_r>
 8003f40:	3001      	adds	r0, #1
 8003f42:	f000 80a9 	beq.w	8004098 <_vfiprintf_r+0x1f0>
 8003f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f48:	445a      	add	r2, fp
 8003f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80a1 	beq.w	8004098 <_vfiprintf_r+0x1f0>
 8003f56:	2300      	movs	r3, #0
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f60:	f10a 0a01 	add.w	sl, sl, #1
 8003f64:	9304      	str	r3, [sp, #16]
 8003f66:	9307      	str	r3, [sp, #28]
 8003f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8003f6e:	4654      	mov	r4, sl
 8003f70:	2205      	movs	r2, #5
 8003f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f76:	4854      	ldr	r0, [pc, #336]	; (80040c8 <_vfiprintf_r+0x220>)
 8003f78:	f7fc f92a 	bl	80001d0 <memchr>
 8003f7c:	9a04      	ldr	r2, [sp, #16]
 8003f7e:	b9d8      	cbnz	r0, 8003fb8 <_vfiprintf_r+0x110>
 8003f80:	06d1      	lsls	r1, r2, #27
 8003f82:	bf44      	itt	mi
 8003f84:	2320      	movmi	r3, #32
 8003f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f8a:	0713      	lsls	r3, r2, #28
 8003f8c:	bf44      	itt	mi
 8003f8e:	232b      	movmi	r3, #43	; 0x2b
 8003f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f94:	f89a 3000 	ldrb.w	r3, [sl]
 8003f98:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9a:	d015      	beq.n	8003fc8 <_vfiprintf_r+0x120>
 8003f9c:	9a07      	ldr	r2, [sp, #28]
 8003f9e:	4654      	mov	r4, sl
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f04f 0c0a 	mov.w	ip, #10
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fac:	3b30      	subs	r3, #48	; 0x30
 8003fae:	2b09      	cmp	r3, #9
 8003fb0:	d94d      	bls.n	800404e <_vfiprintf_r+0x1a6>
 8003fb2:	b1b0      	cbz	r0, 8003fe2 <_vfiprintf_r+0x13a>
 8003fb4:	9207      	str	r2, [sp, #28]
 8003fb6:	e014      	b.n	8003fe2 <_vfiprintf_r+0x13a>
 8003fb8:	eba0 0308 	sub.w	r3, r0, r8
 8003fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	46a2      	mov	sl, r4
 8003fc6:	e7d2      	b.n	8003f6e <_vfiprintf_r+0xc6>
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	1d19      	adds	r1, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	9103      	str	r1, [sp, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bfbb      	ittet	lt
 8003fd4:	425b      	neglt	r3, r3
 8003fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8003fda:	9307      	strge	r3, [sp, #28]
 8003fdc:	9307      	strlt	r3, [sp, #28]
 8003fde:	bfb8      	it	lt
 8003fe0:	9204      	strlt	r2, [sp, #16]
 8003fe2:	7823      	ldrb	r3, [r4, #0]
 8003fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe6:	d10c      	bne.n	8004002 <_vfiprintf_r+0x15a>
 8003fe8:	7863      	ldrb	r3, [r4, #1]
 8003fea:	2b2a      	cmp	r3, #42	; 0x2a
 8003fec:	d134      	bne.n	8004058 <_vfiprintf_r+0x1b0>
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	9203      	str	r2, [sp, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bfb8      	it	lt
 8003ffa:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ffe:	3402      	adds	r4, #2
 8004000:	9305      	str	r3, [sp, #20]
 8004002:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80040d8 <_vfiprintf_r+0x230>
 8004006:	7821      	ldrb	r1, [r4, #0]
 8004008:	2203      	movs	r2, #3
 800400a:	4650      	mov	r0, sl
 800400c:	f7fc f8e0 	bl	80001d0 <memchr>
 8004010:	b138      	cbz	r0, 8004022 <_vfiprintf_r+0x17a>
 8004012:	9b04      	ldr	r3, [sp, #16]
 8004014:	eba0 000a 	sub.w	r0, r0, sl
 8004018:	2240      	movs	r2, #64	; 0x40
 800401a:	4082      	lsls	r2, r0
 800401c:	4313      	orrs	r3, r2
 800401e:	3401      	adds	r4, #1
 8004020:	9304      	str	r3, [sp, #16]
 8004022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004026:	4829      	ldr	r0, [pc, #164]	; (80040cc <_vfiprintf_r+0x224>)
 8004028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800402c:	2206      	movs	r2, #6
 800402e:	f7fc f8cf 	bl	80001d0 <memchr>
 8004032:	2800      	cmp	r0, #0
 8004034:	d03f      	beq.n	80040b6 <_vfiprintf_r+0x20e>
 8004036:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <_vfiprintf_r+0x228>)
 8004038:	bb1b      	cbnz	r3, 8004082 <_vfiprintf_r+0x1da>
 800403a:	9b03      	ldr	r3, [sp, #12]
 800403c:	3307      	adds	r3, #7
 800403e:	f023 0307 	bic.w	r3, r3, #7
 8004042:	3308      	adds	r3, #8
 8004044:	9303      	str	r3, [sp, #12]
 8004046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004048:	443b      	add	r3, r7
 800404a:	9309      	str	r3, [sp, #36]	; 0x24
 800404c:	e768      	b.n	8003f20 <_vfiprintf_r+0x78>
 800404e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004052:	460c      	mov	r4, r1
 8004054:	2001      	movs	r0, #1
 8004056:	e7a6      	b.n	8003fa6 <_vfiprintf_r+0xfe>
 8004058:	2300      	movs	r3, #0
 800405a:	3401      	adds	r4, #1
 800405c:	9305      	str	r3, [sp, #20]
 800405e:	4619      	mov	r1, r3
 8004060:	f04f 0c0a 	mov.w	ip, #10
 8004064:	4620      	mov	r0, r4
 8004066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800406a:	3a30      	subs	r2, #48	; 0x30
 800406c:	2a09      	cmp	r2, #9
 800406e:	d903      	bls.n	8004078 <_vfiprintf_r+0x1d0>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0c6      	beq.n	8004002 <_vfiprintf_r+0x15a>
 8004074:	9105      	str	r1, [sp, #20]
 8004076:	e7c4      	b.n	8004002 <_vfiprintf_r+0x15a>
 8004078:	fb0c 2101 	mla	r1, ip, r1, r2
 800407c:	4604      	mov	r4, r0
 800407e:	2301      	movs	r3, #1
 8004080:	e7f0      	b.n	8004064 <_vfiprintf_r+0x1bc>
 8004082:	ab03      	add	r3, sp, #12
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	462a      	mov	r2, r5
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <_vfiprintf_r+0x22c>)
 800408a:	a904      	add	r1, sp, #16
 800408c:	4630      	mov	r0, r6
 800408e:	f3af 8000 	nop.w
 8004092:	4607      	mov	r7, r0
 8004094:	1c78      	adds	r0, r7, #1
 8004096:	d1d6      	bne.n	8004046 <_vfiprintf_r+0x19e>
 8004098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800409a:	07d9      	lsls	r1, r3, #31
 800409c:	d405      	bmi.n	80040aa <_vfiprintf_r+0x202>
 800409e:	89ab      	ldrh	r3, [r5, #12]
 80040a0:	059a      	lsls	r2, r3, #22
 80040a2:	d402      	bmi.n	80040aa <_vfiprintf_r+0x202>
 80040a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a6:	f7ff fc76 	bl	8003996 <__retarget_lock_release_recursive>
 80040aa:	89ab      	ldrh	r3, [r5, #12]
 80040ac:	065b      	lsls	r3, r3, #25
 80040ae:	f53f af1d 	bmi.w	8003eec <_vfiprintf_r+0x44>
 80040b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040b4:	e71c      	b.n	8003ef0 <_vfiprintf_r+0x48>
 80040b6:	ab03      	add	r3, sp, #12
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	462a      	mov	r2, r5
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <_vfiprintf_r+0x22c>)
 80040be:	a904      	add	r1, sp, #16
 80040c0:	4630      	mov	r0, r6
 80040c2:	f000 f879 	bl	80041b8 <_printf_i>
 80040c6:	e7e4      	b.n	8004092 <_vfiprintf_r+0x1ea>
 80040c8:	08004930 	.word	0x08004930
 80040cc:	0800493a 	.word	0x0800493a
 80040d0:	00000000 	.word	0x00000000
 80040d4:	08003e83 	.word	0x08003e83
 80040d8:	08004936 	.word	0x08004936

080040dc <_printf_common>:
 80040dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e0:	4616      	mov	r6, r2
 80040e2:	4699      	mov	r9, r3
 80040e4:	688a      	ldr	r2, [r1, #8]
 80040e6:	690b      	ldr	r3, [r1, #16]
 80040e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040ec:	4293      	cmp	r3, r2
 80040ee:	bfb8      	it	lt
 80040f0:	4613      	movlt	r3, r2
 80040f2:	6033      	str	r3, [r6, #0]
 80040f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040f8:	4607      	mov	r7, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	b10a      	cbz	r2, 8004102 <_printf_common+0x26>
 80040fe:	3301      	adds	r3, #1
 8004100:	6033      	str	r3, [r6, #0]
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	0699      	lsls	r1, r3, #26
 8004106:	bf42      	ittt	mi
 8004108:	6833      	ldrmi	r3, [r6, #0]
 800410a:	3302      	addmi	r3, #2
 800410c:	6033      	strmi	r3, [r6, #0]
 800410e:	6825      	ldr	r5, [r4, #0]
 8004110:	f015 0506 	ands.w	r5, r5, #6
 8004114:	d106      	bne.n	8004124 <_printf_common+0x48>
 8004116:	f104 0a19 	add.w	sl, r4, #25
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	6832      	ldr	r2, [r6, #0]
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	42ab      	cmp	r3, r5
 8004122:	dc26      	bgt.n	8004172 <_printf_common+0x96>
 8004124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004128:	1e13      	subs	r3, r2, #0
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	bf18      	it	ne
 800412e:	2301      	movne	r3, #1
 8004130:	0692      	lsls	r2, r2, #26
 8004132:	d42b      	bmi.n	800418c <_printf_common+0xb0>
 8004134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004138:	4649      	mov	r1, r9
 800413a:	4638      	mov	r0, r7
 800413c:	47c0      	blx	r8
 800413e:	3001      	adds	r0, #1
 8004140:	d01e      	beq.n	8004180 <_printf_common+0xa4>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	6922      	ldr	r2, [r4, #16]
 8004146:	f003 0306 	and.w	r3, r3, #6
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf02      	ittt	eq
 800414e:	68e5      	ldreq	r5, [r4, #12]
 8004150:	6833      	ldreq	r3, [r6, #0]
 8004152:	1aed      	subeq	r5, r5, r3
 8004154:	68a3      	ldr	r3, [r4, #8]
 8004156:	bf0c      	ite	eq
 8004158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800415c:	2500      	movne	r5, #0
 800415e:	4293      	cmp	r3, r2
 8004160:	bfc4      	itt	gt
 8004162:	1a9b      	subgt	r3, r3, r2
 8004164:	18ed      	addgt	r5, r5, r3
 8004166:	2600      	movs	r6, #0
 8004168:	341a      	adds	r4, #26
 800416a:	42b5      	cmp	r5, r6
 800416c:	d11a      	bne.n	80041a4 <_printf_common+0xc8>
 800416e:	2000      	movs	r0, #0
 8004170:	e008      	b.n	8004184 <_printf_common+0xa8>
 8004172:	2301      	movs	r3, #1
 8004174:	4652      	mov	r2, sl
 8004176:	4649      	mov	r1, r9
 8004178:	4638      	mov	r0, r7
 800417a:	47c0      	blx	r8
 800417c:	3001      	adds	r0, #1
 800417e:	d103      	bne.n	8004188 <_printf_common+0xac>
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004188:	3501      	adds	r5, #1
 800418a:	e7c6      	b.n	800411a <_printf_common+0x3e>
 800418c:	18e1      	adds	r1, r4, r3
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	2030      	movs	r0, #48	; 0x30
 8004192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004196:	4422      	add	r2, r4
 8004198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800419c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a0:	3302      	adds	r3, #2
 80041a2:	e7c7      	b.n	8004134 <_printf_common+0x58>
 80041a4:	2301      	movs	r3, #1
 80041a6:	4622      	mov	r2, r4
 80041a8:	4649      	mov	r1, r9
 80041aa:	4638      	mov	r0, r7
 80041ac:	47c0      	blx	r8
 80041ae:	3001      	adds	r0, #1
 80041b0:	d0e6      	beq.n	8004180 <_printf_common+0xa4>
 80041b2:	3601      	adds	r6, #1
 80041b4:	e7d9      	b.n	800416a <_printf_common+0x8e>
	...

080041b8 <_printf_i>:
 80041b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041bc:	7e0f      	ldrb	r7, [r1, #24]
 80041be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041c0:	2f78      	cmp	r7, #120	; 0x78
 80041c2:	4691      	mov	r9, r2
 80041c4:	4680      	mov	r8, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	469a      	mov	sl, r3
 80041ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041ce:	d807      	bhi.n	80041e0 <_printf_i+0x28>
 80041d0:	2f62      	cmp	r7, #98	; 0x62
 80041d2:	d80a      	bhi.n	80041ea <_printf_i+0x32>
 80041d4:	2f00      	cmp	r7, #0
 80041d6:	f000 80d4 	beq.w	8004382 <_printf_i+0x1ca>
 80041da:	2f58      	cmp	r7, #88	; 0x58
 80041dc:	f000 80c0 	beq.w	8004360 <_printf_i+0x1a8>
 80041e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041e8:	e03a      	b.n	8004260 <_printf_i+0xa8>
 80041ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ee:	2b15      	cmp	r3, #21
 80041f0:	d8f6      	bhi.n	80041e0 <_printf_i+0x28>
 80041f2:	a101      	add	r1, pc, #4	; (adr r1, 80041f8 <_printf_i+0x40>)
 80041f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041f8:	08004251 	.word	0x08004251
 80041fc:	08004265 	.word	0x08004265
 8004200:	080041e1 	.word	0x080041e1
 8004204:	080041e1 	.word	0x080041e1
 8004208:	080041e1 	.word	0x080041e1
 800420c:	080041e1 	.word	0x080041e1
 8004210:	08004265 	.word	0x08004265
 8004214:	080041e1 	.word	0x080041e1
 8004218:	080041e1 	.word	0x080041e1
 800421c:	080041e1 	.word	0x080041e1
 8004220:	080041e1 	.word	0x080041e1
 8004224:	08004369 	.word	0x08004369
 8004228:	08004291 	.word	0x08004291
 800422c:	08004323 	.word	0x08004323
 8004230:	080041e1 	.word	0x080041e1
 8004234:	080041e1 	.word	0x080041e1
 8004238:	0800438b 	.word	0x0800438b
 800423c:	080041e1 	.word	0x080041e1
 8004240:	08004291 	.word	0x08004291
 8004244:	080041e1 	.word	0x080041e1
 8004248:	080041e1 	.word	0x080041e1
 800424c:	0800432b 	.word	0x0800432b
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	1d1a      	adds	r2, r3, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	602a      	str	r2, [r5, #0]
 8004258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800425c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004260:	2301      	movs	r3, #1
 8004262:	e09f      	b.n	80043a4 <_printf_i+0x1ec>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	0607      	lsls	r7, r0, #24
 800426a:	f103 0104 	add.w	r1, r3, #4
 800426e:	6029      	str	r1, [r5, #0]
 8004270:	d501      	bpl.n	8004276 <_printf_i+0xbe>
 8004272:	681e      	ldr	r6, [r3, #0]
 8004274:	e003      	b.n	800427e <_printf_i+0xc6>
 8004276:	0646      	lsls	r6, r0, #25
 8004278:	d5fb      	bpl.n	8004272 <_printf_i+0xba>
 800427a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800427e:	2e00      	cmp	r6, #0
 8004280:	da03      	bge.n	800428a <_printf_i+0xd2>
 8004282:	232d      	movs	r3, #45	; 0x2d
 8004284:	4276      	negs	r6, r6
 8004286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800428a:	485a      	ldr	r0, [pc, #360]	; (80043f4 <_printf_i+0x23c>)
 800428c:	230a      	movs	r3, #10
 800428e:	e012      	b.n	80042b6 <_printf_i+0xfe>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	6820      	ldr	r0, [r4, #0]
 8004294:	1d19      	adds	r1, r3, #4
 8004296:	6029      	str	r1, [r5, #0]
 8004298:	0605      	lsls	r5, r0, #24
 800429a:	d501      	bpl.n	80042a0 <_printf_i+0xe8>
 800429c:	681e      	ldr	r6, [r3, #0]
 800429e:	e002      	b.n	80042a6 <_printf_i+0xee>
 80042a0:	0641      	lsls	r1, r0, #25
 80042a2:	d5fb      	bpl.n	800429c <_printf_i+0xe4>
 80042a4:	881e      	ldrh	r6, [r3, #0]
 80042a6:	4853      	ldr	r0, [pc, #332]	; (80043f4 <_printf_i+0x23c>)
 80042a8:	2f6f      	cmp	r7, #111	; 0x6f
 80042aa:	bf0c      	ite	eq
 80042ac:	2308      	moveq	r3, #8
 80042ae:	230a      	movne	r3, #10
 80042b0:	2100      	movs	r1, #0
 80042b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042b6:	6865      	ldr	r5, [r4, #4]
 80042b8:	60a5      	str	r5, [r4, #8]
 80042ba:	2d00      	cmp	r5, #0
 80042bc:	bfa2      	ittt	ge
 80042be:	6821      	ldrge	r1, [r4, #0]
 80042c0:	f021 0104 	bicge.w	r1, r1, #4
 80042c4:	6021      	strge	r1, [r4, #0]
 80042c6:	b90e      	cbnz	r6, 80042cc <_printf_i+0x114>
 80042c8:	2d00      	cmp	r5, #0
 80042ca:	d04b      	beq.n	8004364 <_printf_i+0x1ac>
 80042cc:	4615      	mov	r5, r2
 80042ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80042d2:	fb03 6711 	mls	r7, r3, r1, r6
 80042d6:	5dc7      	ldrb	r7, [r0, r7]
 80042d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042dc:	4637      	mov	r7, r6
 80042de:	42bb      	cmp	r3, r7
 80042e0:	460e      	mov	r6, r1
 80042e2:	d9f4      	bls.n	80042ce <_printf_i+0x116>
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d10b      	bne.n	8004300 <_printf_i+0x148>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	07de      	lsls	r6, r3, #31
 80042ec:	d508      	bpl.n	8004300 <_printf_i+0x148>
 80042ee:	6923      	ldr	r3, [r4, #16]
 80042f0:	6861      	ldr	r1, [r4, #4]
 80042f2:	4299      	cmp	r1, r3
 80042f4:	bfde      	ittt	le
 80042f6:	2330      	movle	r3, #48	; 0x30
 80042f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004300:	1b52      	subs	r2, r2, r5
 8004302:	6122      	str	r2, [r4, #16]
 8004304:	f8cd a000 	str.w	sl, [sp]
 8004308:	464b      	mov	r3, r9
 800430a:	aa03      	add	r2, sp, #12
 800430c:	4621      	mov	r1, r4
 800430e:	4640      	mov	r0, r8
 8004310:	f7ff fee4 	bl	80040dc <_printf_common>
 8004314:	3001      	adds	r0, #1
 8004316:	d14a      	bne.n	80043ae <_printf_i+0x1f6>
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	b004      	add	sp, #16
 800431e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	4833      	ldr	r0, [pc, #204]	; (80043f8 <_printf_i+0x240>)
 800432c:	2778      	movs	r7, #120	; 0x78
 800432e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	6829      	ldr	r1, [r5, #0]
 8004336:	061f      	lsls	r7, r3, #24
 8004338:	f851 6b04 	ldr.w	r6, [r1], #4
 800433c:	d402      	bmi.n	8004344 <_printf_i+0x18c>
 800433e:	065f      	lsls	r7, r3, #25
 8004340:	bf48      	it	mi
 8004342:	b2b6      	uxthmi	r6, r6
 8004344:	07df      	lsls	r7, r3, #31
 8004346:	bf48      	it	mi
 8004348:	f043 0320 	orrmi.w	r3, r3, #32
 800434c:	6029      	str	r1, [r5, #0]
 800434e:	bf48      	it	mi
 8004350:	6023      	strmi	r3, [r4, #0]
 8004352:	b91e      	cbnz	r6, 800435c <_printf_i+0x1a4>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	f023 0320 	bic.w	r3, r3, #32
 800435a:	6023      	str	r3, [r4, #0]
 800435c:	2310      	movs	r3, #16
 800435e:	e7a7      	b.n	80042b0 <_printf_i+0xf8>
 8004360:	4824      	ldr	r0, [pc, #144]	; (80043f4 <_printf_i+0x23c>)
 8004362:	e7e4      	b.n	800432e <_printf_i+0x176>
 8004364:	4615      	mov	r5, r2
 8004366:	e7bd      	b.n	80042e4 <_printf_i+0x12c>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	6826      	ldr	r6, [r4, #0]
 800436c:	6961      	ldr	r1, [r4, #20]
 800436e:	1d18      	adds	r0, r3, #4
 8004370:	6028      	str	r0, [r5, #0]
 8004372:	0635      	lsls	r5, r6, #24
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	d501      	bpl.n	800437c <_printf_i+0x1c4>
 8004378:	6019      	str	r1, [r3, #0]
 800437a:	e002      	b.n	8004382 <_printf_i+0x1ca>
 800437c:	0670      	lsls	r0, r6, #25
 800437e:	d5fb      	bpl.n	8004378 <_printf_i+0x1c0>
 8004380:	8019      	strh	r1, [r3, #0]
 8004382:	2300      	movs	r3, #0
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	4615      	mov	r5, r2
 8004388:	e7bc      	b.n	8004304 <_printf_i+0x14c>
 800438a:	682b      	ldr	r3, [r5, #0]
 800438c:	1d1a      	adds	r2, r3, #4
 800438e:	602a      	str	r2, [r5, #0]
 8004390:	681d      	ldr	r5, [r3, #0]
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	2100      	movs	r1, #0
 8004396:	4628      	mov	r0, r5
 8004398:	f7fb ff1a 	bl	80001d0 <memchr>
 800439c:	b108      	cbz	r0, 80043a2 <_printf_i+0x1ea>
 800439e:	1b40      	subs	r0, r0, r5
 80043a0:	6060      	str	r0, [r4, #4]
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	6123      	str	r3, [r4, #16]
 80043a6:	2300      	movs	r3, #0
 80043a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043ac:	e7aa      	b.n	8004304 <_printf_i+0x14c>
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	462a      	mov	r2, r5
 80043b2:	4649      	mov	r1, r9
 80043b4:	4640      	mov	r0, r8
 80043b6:	47d0      	blx	sl
 80043b8:	3001      	adds	r0, #1
 80043ba:	d0ad      	beq.n	8004318 <_printf_i+0x160>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	079b      	lsls	r3, r3, #30
 80043c0:	d413      	bmi.n	80043ea <_printf_i+0x232>
 80043c2:	68e0      	ldr	r0, [r4, #12]
 80043c4:	9b03      	ldr	r3, [sp, #12]
 80043c6:	4298      	cmp	r0, r3
 80043c8:	bfb8      	it	lt
 80043ca:	4618      	movlt	r0, r3
 80043cc:	e7a6      	b.n	800431c <_printf_i+0x164>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4632      	mov	r2, r6
 80043d2:	4649      	mov	r1, r9
 80043d4:	4640      	mov	r0, r8
 80043d6:	47d0      	blx	sl
 80043d8:	3001      	adds	r0, #1
 80043da:	d09d      	beq.n	8004318 <_printf_i+0x160>
 80043dc:	3501      	adds	r5, #1
 80043de:	68e3      	ldr	r3, [r4, #12]
 80043e0:	9903      	ldr	r1, [sp, #12]
 80043e2:	1a5b      	subs	r3, r3, r1
 80043e4:	42ab      	cmp	r3, r5
 80043e6:	dcf2      	bgt.n	80043ce <_printf_i+0x216>
 80043e8:	e7eb      	b.n	80043c2 <_printf_i+0x20a>
 80043ea:	2500      	movs	r5, #0
 80043ec:	f104 0619 	add.w	r6, r4, #25
 80043f0:	e7f5      	b.n	80043de <_printf_i+0x226>
 80043f2:	bf00      	nop
 80043f4:	08004941 	.word	0x08004941
 80043f8:	08004952 	.word	0x08004952

080043fc <__sflush_r>:
 80043fc:	898a      	ldrh	r2, [r1, #12]
 80043fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004402:	4605      	mov	r5, r0
 8004404:	0710      	lsls	r0, r2, #28
 8004406:	460c      	mov	r4, r1
 8004408:	d458      	bmi.n	80044bc <__sflush_r+0xc0>
 800440a:	684b      	ldr	r3, [r1, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	dc05      	bgt.n	800441c <__sflush_r+0x20>
 8004410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	dc02      	bgt.n	800441c <__sflush_r+0x20>
 8004416:	2000      	movs	r0, #0
 8004418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800441c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800441e:	2e00      	cmp	r6, #0
 8004420:	d0f9      	beq.n	8004416 <__sflush_r+0x1a>
 8004422:	2300      	movs	r3, #0
 8004424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004428:	682f      	ldr	r7, [r5, #0]
 800442a:	6a21      	ldr	r1, [r4, #32]
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	d032      	beq.n	8004496 <__sflush_r+0x9a>
 8004430:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	075a      	lsls	r2, r3, #29
 8004436:	d505      	bpl.n	8004444 <__sflush_r+0x48>
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	1ac0      	subs	r0, r0, r3
 800443c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800443e:	b10b      	cbz	r3, 8004444 <__sflush_r+0x48>
 8004440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004442:	1ac0      	subs	r0, r0, r3
 8004444:	2300      	movs	r3, #0
 8004446:	4602      	mov	r2, r0
 8004448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800444a:	6a21      	ldr	r1, [r4, #32]
 800444c:	4628      	mov	r0, r5
 800444e:	47b0      	blx	r6
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	89a3      	ldrh	r3, [r4, #12]
 8004454:	d106      	bne.n	8004464 <__sflush_r+0x68>
 8004456:	6829      	ldr	r1, [r5, #0]
 8004458:	291d      	cmp	r1, #29
 800445a:	d82b      	bhi.n	80044b4 <__sflush_r+0xb8>
 800445c:	4a29      	ldr	r2, [pc, #164]	; (8004504 <__sflush_r+0x108>)
 800445e:	410a      	asrs	r2, r1
 8004460:	07d6      	lsls	r6, r2, #31
 8004462:	d427      	bmi.n	80044b4 <__sflush_r+0xb8>
 8004464:	2200      	movs	r2, #0
 8004466:	6062      	str	r2, [r4, #4]
 8004468:	04d9      	lsls	r1, r3, #19
 800446a:	6922      	ldr	r2, [r4, #16]
 800446c:	6022      	str	r2, [r4, #0]
 800446e:	d504      	bpl.n	800447a <__sflush_r+0x7e>
 8004470:	1c42      	adds	r2, r0, #1
 8004472:	d101      	bne.n	8004478 <__sflush_r+0x7c>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	b903      	cbnz	r3, 800447a <__sflush_r+0x7e>
 8004478:	6560      	str	r0, [r4, #84]	; 0x54
 800447a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800447c:	602f      	str	r7, [r5, #0]
 800447e:	2900      	cmp	r1, #0
 8004480:	d0c9      	beq.n	8004416 <__sflush_r+0x1a>
 8004482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004486:	4299      	cmp	r1, r3
 8004488:	d002      	beq.n	8004490 <__sflush_r+0x94>
 800448a:	4628      	mov	r0, r5
 800448c:	f7ff fa92 	bl	80039b4 <_free_r>
 8004490:	2000      	movs	r0, #0
 8004492:	6360      	str	r0, [r4, #52]	; 0x34
 8004494:	e7c0      	b.n	8004418 <__sflush_r+0x1c>
 8004496:	2301      	movs	r3, #1
 8004498:	4628      	mov	r0, r5
 800449a:	47b0      	blx	r6
 800449c:	1c41      	adds	r1, r0, #1
 800449e:	d1c8      	bne.n	8004432 <__sflush_r+0x36>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0c5      	beq.n	8004432 <__sflush_r+0x36>
 80044a6:	2b1d      	cmp	r3, #29
 80044a8:	d001      	beq.n	80044ae <__sflush_r+0xb2>
 80044aa:	2b16      	cmp	r3, #22
 80044ac:	d101      	bne.n	80044b2 <__sflush_r+0xb6>
 80044ae:	602f      	str	r7, [r5, #0]
 80044b0:	e7b1      	b.n	8004416 <__sflush_r+0x1a>
 80044b2:	89a3      	ldrh	r3, [r4, #12]
 80044b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b8:	81a3      	strh	r3, [r4, #12]
 80044ba:	e7ad      	b.n	8004418 <__sflush_r+0x1c>
 80044bc:	690f      	ldr	r7, [r1, #16]
 80044be:	2f00      	cmp	r7, #0
 80044c0:	d0a9      	beq.n	8004416 <__sflush_r+0x1a>
 80044c2:	0793      	lsls	r3, r2, #30
 80044c4:	680e      	ldr	r6, [r1, #0]
 80044c6:	bf08      	it	eq
 80044c8:	694b      	ldreq	r3, [r1, #20]
 80044ca:	600f      	str	r7, [r1, #0]
 80044cc:	bf18      	it	ne
 80044ce:	2300      	movne	r3, #0
 80044d0:	eba6 0807 	sub.w	r8, r6, r7
 80044d4:	608b      	str	r3, [r1, #8]
 80044d6:	f1b8 0f00 	cmp.w	r8, #0
 80044da:	dd9c      	ble.n	8004416 <__sflush_r+0x1a>
 80044dc:	6a21      	ldr	r1, [r4, #32]
 80044de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044e0:	4643      	mov	r3, r8
 80044e2:	463a      	mov	r2, r7
 80044e4:	4628      	mov	r0, r5
 80044e6:	47b0      	blx	r6
 80044e8:	2800      	cmp	r0, #0
 80044ea:	dc06      	bgt.n	80044fa <__sflush_r+0xfe>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	e78e      	b.n	8004418 <__sflush_r+0x1c>
 80044fa:	4407      	add	r7, r0
 80044fc:	eba8 0800 	sub.w	r8, r8, r0
 8004500:	e7e9      	b.n	80044d6 <__sflush_r+0xda>
 8004502:	bf00      	nop
 8004504:	dfbffffe 	.word	0xdfbffffe

08004508 <_fflush_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	690b      	ldr	r3, [r1, #16]
 800450c:	4605      	mov	r5, r0
 800450e:	460c      	mov	r4, r1
 8004510:	b913      	cbnz	r3, 8004518 <_fflush_r+0x10>
 8004512:	2500      	movs	r5, #0
 8004514:	4628      	mov	r0, r5
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	b118      	cbz	r0, 8004522 <_fflush_r+0x1a>
 800451a:	6a03      	ldr	r3, [r0, #32]
 800451c:	b90b      	cbnz	r3, 8004522 <_fflush_r+0x1a>
 800451e:	f7ff f907 	bl	8003730 <__sinit>
 8004522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f3      	beq.n	8004512 <_fflush_r+0xa>
 800452a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800452c:	07d0      	lsls	r0, r2, #31
 800452e:	d404      	bmi.n	800453a <_fflush_r+0x32>
 8004530:	0599      	lsls	r1, r3, #22
 8004532:	d402      	bmi.n	800453a <_fflush_r+0x32>
 8004534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004536:	f7ff fa2d 	bl	8003994 <__retarget_lock_acquire_recursive>
 800453a:	4628      	mov	r0, r5
 800453c:	4621      	mov	r1, r4
 800453e:	f7ff ff5d 	bl	80043fc <__sflush_r>
 8004542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004544:	07da      	lsls	r2, r3, #31
 8004546:	4605      	mov	r5, r0
 8004548:	d4e4      	bmi.n	8004514 <_fflush_r+0xc>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	059b      	lsls	r3, r3, #22
 800454e:	d4e1      	bmi.n	8004514 <_fflush_r+0xc>
 8004550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004552:	f7ff fa20 	bl	8003996 <__retarget_lock_release_recursive>
 8004556:	e7dd      	b.n	8004514 <_fflush_r+0xc>

08004558 <__swbuf_r>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	460e      	mov	r6, r1
 800455c:	4614      	mov	r4, r2
 800455e:	4605      	mov	r5, r0
 8004560:	b118      	cbz	r0, 800456a <__swbuf_r+0x12>
 8004562:	6a03      	ldr	r3, [r0, #32]
 8004564:	b90b      	cbnz	r3, 800456a <__swbuf_r+0x12>
 8004566:	f7ff f8e3 	bl	8003730 <__sinit>
 800456a:	69a3      	ldr	r3, [r4, #24]
 800456c:	60a3      	str	r3, [r4, #8]
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	071a      	lsls	r2, r3, #28
 8004572:	d525      	bpl.n	80045c0 <__swbuf_r+0x68>
 8004574:	6923      	ldr	r3, [r4, #16]
 8004576:	b31b      	cbz	r3, 80045c0 <__swbuf_r+0x68>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	6922      	ldr	r2, [r4, #16]
 800457c:	1a98      	subs	r0, r3, r2
 800457e:	6963      	ldr	r3, [r4, #20]
 8004580:	b2f6      	uxtb	r6, r6
 8004582:	4283      	cmp	r3, r0
 8004584:	4637      	mov	r7, r6
 8004586:	dc04      	bgt.n	8004592 <__swbuf_r+0x3a>
 8004588:	4621      	mov	r1, r4
 800458a:	4628      	mov	r0, r5
 800458c:	f7ff ffbc 	bl	8004508 <_fflush_r>
 8004590:	b9e0      	cbnz	r0, 80045cc <__swbuf_r+0x74>
 8004592:	68a3      	ldr	r3, [r4, #8]
 8004594:	3b01      	subs	r3, #1
 8004596:	60a3      	str	r3, [r4, #8]
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	6022      	str	r2, [r4, #0]
 800459e:	701e      	strb	r6, [r3, #0]
 80045a0:	6962      	ldr	r2, [r4, #20]
 80045a2:	1c43      	adds	r3, r0, #1
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d004      	beq.n	80045b2 <__swbuf_r+0x5a>
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	07db      	lsls	r3, r3, #31
 80045ac:	d506      	bpl.n	80045bc <__swbuf_r+0x64>
 80045ae:	2e0a      	cmp	r6, #10
 80045b0:	d104      	bne.n	80045bc <__swbuf_r+0x64>
 80045b2:	4621      	mov	r1, r4
 80045b4:	4628      	mov	r0, r5
 80045b6:	f7ff ffa7 	bl	8004508 <_fflush_r>
 80045ba:	b938      	cbnz	r0, 80045cc <__swbuf_r+0x74>
 80045bc:	4638      	mov	r0, r7
 80045be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c0:	4621      	mov	r1, r4
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 f806 	bl	80045d4 <__swsetup_r>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d0d5      	beq.n	8004578 <__swbuf_r+0x20>
 80045cc:	f04f 37ff 	mov.w	r7, #4294967295
 80045d0:	e7f4      	b.n	80045bc <__swbuf_r+0x64>
	...

080045d4 <__swsetup_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <__swsetup_r+0xac>)
 80045d8:	4605      	mov	r5, r0
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	460c      	mov	r4, r1
 80045de:	b118      	cbz	r0, 80045e8 <__swsetup_r+0x14>
 80045e0:	6a03      	ldr	r3, [r0, #32]
 80045e2:	b90b      	cbnz	r3, 80045e8 <__swsetup_r+0x14>
 80045e4:	f7ff f8a4 	bl	8003730 <__sinit>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045ee:	0718      	lsls	r0, r3, #28
 80045f0:	d422      	bmi.n	8004638 <__swsetup_r+0x64>
 80045f2:	06d9      	lsls	r1, r3, #27
 80045f4:	d407      	bmi.n	8004606 <__swsetup_r+0x32>
 80045f6:	2309      	movs	r3, #9
 80045f8:	602b      	str	r3, [r5, #0]
 80045fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045fe:	81a3      	strh	r3, [r4, #12]
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	e034      	b.n	8004670 <__swsetup_r+0x9c>
 8004606:	0758      	lsls	r0, r3, #29
 8004608:	d512      	bpl.n	8004630 <__swsetup_r+0x5c>
 800460a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800460c:	b141      	cbz	r1, 8004620 <__swsetup_r+0x4c>
 800460e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004612:	4299      	cmp	r1, r3
 8004614:	d002      	beq.n	800461c <__swsetup_r+0x48>
 8004616:	4628      	mov	r0, r5
 8004618:	f7ff f9cc 	bl	80039b4 <_free_r>
 800461c:	2300      	movs	r3, #0
 800461e:	6363      	str	r3, [r4, #52]	; 0x34
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004626:	81a3      	strh	r3, [r4, #12]
 8004628:	2300      	movs	r3, #0
 800462a:	6063      	str	r3, [r4, #4]
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	6023      	str	r3, [r4, #0]
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	f043 0308 	orr.w	r3, r3, #8
 8004636:	81a3      	strh	r3, [r4, #12]
 8004638:	6923      	ldr	r3, [r4, #16]
 800463a:	b94b      	cbnz	r3, 8004650 <__swsetup_r+0x7c>
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004646:	d003      	beq.n	8004650 <__swsetup_r+0x7c>
 8004648:	4621      	mov	r1, r4
 800464a:	4628      	mov	r0, r5
 800464c:	f000 f899 	bl	8004782 <__smakebuf_r>
 8004650:	89a0      	ldrh	r0, [r4, #12]
 8004652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004656:	f010 0301 	ands.w	r3, r0, #1
 800465a:	d00a      	beq.n	8004672 <__swsetup_r+0x9e>
 800465c:	2300      	movs	r3, #0
 800465e:	60a3      	str	r3, [r4, #8]
 8004660:	6963      	ldr	r3, [r4, #20]
 8004662:	425b      	negs	r3, r3
 8004664:	61a3      	str	r3, [r4, #24]
 8004666:	6923      	ldr	r3, [r4, #16]
 8004668:	b943      	cbnz	r3, 800467c <__swsetup_r+0xa8>
 800466a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800466e:	d1c4      	bne.n	80045fa <__swsetup_r+0x26>
 8004670:	bd38      	pop	{r3, r4, r5, pc}
 8004672:	0781      	lsls	r1, r0, #30
 8004674:	bf58      	it	pl
 8004676:	6963      	ldrpl	r3, [r4, #20]
 8004678:	60a3      	str	r3, [r4, #8]
 800467a:	e7f4      	b.n	8004666 <__swsetup_r+0x92>
 800467c:	2000      	movs	r0, #0
 800467e:	e7f7      	b.n	8004670 <__swsetup_r+0x9c>
 8004680:	2000006c 	.word	0x2000006c

08004684 <memmove>:
 8004684:	4288      	cmp	r0, r1
 8004686:	b510      	push	{r4, lr}
 8004688:	eb01 0402 	add.w	r4, r1, r2
 800468c:	d902      	bls.n	8004694 <memmove+0x10>
 800468e:	4284      	cmp	r4, r0
 8004690:	4623      	mov	r3, r4
 8004692:	d807      	bhi.n	80046a4 <memmove+0x20>
 8004694:	1e43      	subs	r3, r0, #1
 8004696:	42a1      	cmp	r1, r4
 8004698:	d008      	beq.n	80046ac <memmove+0x28>
 800469a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800469e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046a2:	e7f8      	b.n	8004696 <memmove+0x12>
 80046a4:	4402      	add	r2, r0
 80046a6:	4601      	mov	r1, r0
 80046a8:	428a      	cmp	r2, r1
 80046aa:	d100      	bne.n	80046ae <memmove+0x2a>
 80046ac:	bd10      	pop	{r4, pc}
 80046ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046b6:	e7f7      	b.n	80046a8 <memmove+0x24>

080046b8 <_sbrk_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4d06      	ldr	r5, [pc, #24]	; (80046d4 <_sbrk_r+0x1c>)
 80046bc:	2300      	movs	r3, #0
 80046be:	4604      	mov	r4, r0
 80046c0:	4608      	mov	r0, r1
 80046c2:	602b      	str	r3, [r5, #0]
 80046c4:	f000 f8c4 	bl	8004850 <_sbrk>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	d102      	bne.n	80046d2 <_sbrk_r+0x1a>
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	b103      	cbz	r3, 80046d2 <_sbrk_r+0x1a>
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	20012f3c 	.word	0x20012f3c

080046d8 <_realloc_r>:
 80046d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046dc:	4680      	mov	r8, r0
 80046de:	4614      	mov	r4, r2
 80046e0:	460e      	mov	r6, r1
 80046e2:	b921      	cbnz	r1, 80046ee <_realloc_r+0x16>
 80046e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046e8:	4611      	mov	r1, r2
 80046ea:	f7ff b9cf 	b.w	8003a8c <_malloc_r>
 80046ee:	b92a      	cbnz	r2, 80046fc <_realloc_r+0x24>
 80046f0:	f7ff f960 	bl	80039b4 <_free_r>
 80046f4:	4625      	mov	r5, r4
 80046f6:	4628      	mov	r0, r5
 80046f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046fc:	f000 f8a0 	bl	8004840 <_malloc_usable_size_r>
 8004700:	4284      	cmp	r4, r0
 8004702:	4607      	mov	r7, r0
 8004704:	d802      	bhi.n	800470c <_realloc_r+0x34>
 8004706:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800470a:	d812      	bhi.n	8004732 <_realloc_r+0x5a>
 800470c:	4621      	mov	r1, r4
 800470e:	4640      	mov	r0, r8
 8004710:	f7ff f9bc 	bl	8003a8c <_malloc_r>
 8004714:	4605      	mov	r5, r0
 8004716:	2800      	cmp	r0, #0
 8004718:	d0ed      	beq.n	80046f6 <_realloc_r+0x1e>
 800471a:	42bc      	cmp	r4, r7
 800471c:	4622      	mov	r2, r4
 800471e:	4631      	mov	r1, r6
 8004720:	bf28      	it	cs
 8004722:	463a      	movcs	r2, r7
 8004724:	f7ff f938 	bl	8003998 <memcpy>
 8004728:	4631      	mov	r1, r6
 800472a:	4640      	mov	r0, r8
 800472c:	f7ff f942 	bl	80039b4 <_free_r>
 8004730:	e7e1      	b.n	80046f6 <_realloc_r+0x1e>
 8004732:	4635      	mov	r5, r6
 8004734:	e7df      	b.n	80046f6 <_realloc_r+0x1e>

08004736 <__swhatbuf_r>:
 8004736:	b570      	push	{r4, r5, r6, lr}
 8004738:	460c      	mov	r4, r1
 800473a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473e:	2900      	cmp	r1, #0
 8004740:	b096      	sub	sp, #88	; 0x58
 8004742:	4615      	mov	r5, r2
 8004744:	461e      	mov	r6, r3
 8004746:	da0d      	bge.n	8004764 <__swhatbuf_r+0x2e>
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	bf0c      	ite	eq
 8004754:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004758:	2340      	movne	r3, #64	; 0x40
 800475a:	2000      	movs	r0, #0
 800475c:	6031      	str	r1, [r6, #0]
 800475e:	602b      	str	r3, [r5, #0]
 8004760:	b016      	add	sp, #88	; 0x58
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	466a      	mov	r2, sp
 8004766:	f000 f849 	bl	80047fc <_fstat_r>
 800476a:	2800      	cmp	r0, #0
 800476c:	dbec      	blt.n	8004748 <__swhatbuf_r+0x12>
 800476e:	9901      	ldr	r1, [sp, #4]
 8004770:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004774:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004778:	4259      	negs	r1, r3
 800477a:	4159      	adcs	r1, r3
 800477c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004780:	e7eb      	b.n	800475a <__swhatbuf_r+0x24>

08004782 <__smakebuf_r>:
 8004782:	898b      	ldrh	r3, [r1, #12]
 8004784:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004786:	079d      	lsls	r5, r3, #30
 8004788:	4606      	mov	r6, r0
 800478a:	460c      	mov	r4, r1
 800478c:	d507      	bpl.n	800479e <__smakebuf_r+0x1c>
 800478e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	6123      	str	r3, [r4, #16]
 8004796:	2301      	movs	r3, #1
 8004798:	6163      	str	r3, [r4, #20]
 800479a:	b002      	add	sp, #8
 800479c:	bd70      	pop	{r4, r5, r6, pc}
 800479e:	ab01      	add	r3, sp, #4
 80047a0:	466a      	mov	r2, sp
 80047a2:	f7ff ffc8 	bl	8004736 <__swhatbuf_r>
 80047a6:	9900      	ldr	r1, [sp, #0]
 80047a8:	4605      	mov	r5, r0
 80047aa:	4630      	mov	r0, r6
 80047ac:	f7ff f96e 	bl	8003a8c <_malloc_r>
 80047b0:	b948      	cbnz	r0, 80047c6 <__smakebuf_r+0x44>
 80047b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b6:	059a      	lsls	r2, r3, #22
 80047b8:	d4ef      	bmi.n	800479a <__smakebuf_r+0x18>
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	81a3      	strh	r3, [r4, #12]
 80047c4:	e7e3      	b.n	800478e <__smakebuf_r+0xc>
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	6020      	str	r0, [r4, #0]
 80047ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	9b00      	ldr	r3, [sp, #0]
 80047d2:	6163      	str	r3, [r4, #20]
 80047d4:	9b01      	ldr	r3, [sp, #4]
 80047d6:	6120      	str	r0, [r4, #16]
 80047d8:	b15b      	cbz	r3, 80047f2 <__smakebuf_r+0x70>
 80047da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047de:	4630      	mov	r0, r6
 80047e0:	f000 f81e 	bl	8004820 <_isatty_r>
 80047e4:	b128      	cbz	r0, 80047f2 <__smakebuf_r+0x70>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f023 0303 	bic.w	r3, r3, #3
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	431d      	orrs	r5, r3
 80047f6:	81a5      	strh	r5, [r4, #12]
 80047f8:	e7cf      	b.n	800479a <__smakebuf_r+0x18>
	...

080047fc <_fstat_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4d07      	ldr	r5, [pc, #28]	; (800481c <_fstat_r+0x20>)
 8004800:	2300      	movs	r3, #0
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	602b      	str	r3, [r5, #0]
 800480a:	f7fc fa4e 	bl	8000caa <_fstat>
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	d102      	bne.n	8004818 <_fstat_r+0x1c>
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	b103      	cbz	r3, 8004818 <_fstat_r+0x1c>
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	bd38      	pop	{r3, r4, r5, pc}
 800481a:	bf00      	nop
 800481c:	20012f3c 	.word	0x20012f3c

08004820 <_isatty_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d06      	ldr	r5, [pc, #24]	; (800483c <_isatty_r+0x1c>)
 8004824:	2300      	movs	r3, #0
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	f7fc fa4d 	bl	8000cca <_isatty>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_isatty_r+0x1a>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b103      	cbz	r3, 800483a <_isatty_r+0x1a>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	20012f3c 	.word	0x20012f3c

08004840 <_malloc_usable_size_r>:
 8004840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004844:	1f18      	subs	r0, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	bfbc      	itt	lt
 800484a:	580b      	ldrlt	r3, [r1, r0]
 800484c:	18c0      	addlt	r0, r0, r3
 800484e:	4770      	bx	lr

08004850 <_sbrk>:
 8004850:	4a04      	ldr	r2, [pc, #16]	; (8004864 <_sbrk+0x14>)
 8004852:	6811      	ldr	r1, [r2, #0]
 8004854:	4603      	mov	r3, r0
 8004856:	b909      	cbnz	r1, 800485c <_sbrk+0xc>
 8004858:	4903      	ldr	r1, [pc, #12]	; (8004868 <_sbrk+0x18>)
 800485a:	6011      	str	r1, [r2, #0]
 800485c:	6810      	ldr	r0, [r2, #0]
 800485e:	4403      	add	r3, r0
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4770      	bx	lr
 8004864:	20012f4c 	.word	0x20012f4c
 8004868:	20012f50 	.word	0x20012f50

0800486c <_init>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr

08004878 <_fini>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	bf00      	nop
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr
