
008Queues_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08008d58  08008d58  00018d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009188  08009188  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009190  08009190  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009190  08009190  00019190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009194  08009194  00019194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019454  20000084  0800921c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200194d8  0800921c  000294d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001671c  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a1d  00000000  00000000  00036813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  0003a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd4  00000000  00000000  0003b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025252  00000000  00000000  0003c67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c17  00000000  00000000  000618ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbf17  00000000  00000000  0007b4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d8c  00000000  00000000  001573fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0015d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d40 	.word	0x08008d40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08008d40 	.word	0x08008d40

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e00e      	b.n	80005c6 <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i],portMAX_DELAY);
 80005a8:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <led_effect_stop+0x3c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2200      	movs	r2, #0
 80005ba:	2103      	movs	r1, #3
 80005bc:	f006 fb4a 	bl	8006c54 <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	dded      	ble.n	80005a8 <led_effect_stop+0xc>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000128 	.word	0x20000128

080005dc <led_effect>:

void led_effect(int n )
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005e4:	f7ff ffda 	bl	800059c <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <led_effect+0x34>)
 80005ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005f2:	f005 fc31 	bl	8005e58 <xTaskGetTickCount>
 80005f6:	4602      	mov	r2, r0
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	2101      	movs	r1, #1
 8000602:	4620      	mov	r0, r4
 8000604:	f006 fb26 	bl	8006c54 <xTimerGenericCommand>

}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	20000128 	.word	0x20000128

08000614 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <turn_off_all_leds+0x38>)
 8000620:	f001 ff86 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	4808      	ldr	r0, [pc, #32]	; (800064c <turn_off_all_leds+0x38>)
 800062c:	f001 ff80 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <turn_off_all_leds+0x38>)
 8000638:	f001 ff7a 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000642:	4802      	ldr	r0, [pc, #8]	; (800064c <turn_off_all_leds+0x38>)
 8000644:	f001 ff74 	bl	8002530 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40020c00 	.word	0x40020c00

08000650 <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <turn_on_all_leds+0x38>)
 800065c:	f001 ff68 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	4808      	ldr	r0, [pc, #32]	; (8000688 <turn_on_all_leds+0x38>)
 8000668:	f001 ff62 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <turn_on_all_leds+0x38>)
 8000674:	f001 ff5c 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	4802      	ldr	r0, [pc, #8]	; (8000688 <turn_on_all_leds+0x38>)
 8000680:	f001 ff56 	bl	8002530 <HAL_GPIO_WritePin>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020c00 	.word	0x40020c00

0800068c <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <turn_on_odd_leds+0x38>)
 8000698:	f001 ff4a 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <turn_on_odd_leds+0x38>)
 80006a4:	f001 ff44 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <turn_on_odd_leds+0x38>)
 80006b0:	f001 ff3e 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ba:	4802      	ldr	r0, [pc, #8]	; (80006c4 <turn_on_odd_leds+0x38>)
 80006bc:	f001 ff38 	bl	8002530 <HAL_GPIO_WritePin>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40020c00 	.word	0x40020c00

080006c8 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <turn_on_even_leds+0x38>)
 80006d4:	f001 ff2c 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <turn_on_even_leds+0x38>)
 80006e0:	f001 ff26 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <turn_on_even_leds+0x38>)
 80006ec:	f001 ff20 	bl	8002530 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f6:	4802      	ldr	r0, [pc, #8]	; (8000700 <turn_on_even_leds+0x38>)
 80006f8:	f001 ff1a 	bl	8002530 <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020c00 	.word	0x40020c00

08000704 <LED_control>:

void LED_control( int value )
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	e014      	b.n	800073c <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 8000712:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	b299      	uxth	r1, r3
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	fa42 f303 	asr.w	r3, r2, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <LED_control+0x48>)
 8000732:	f001 fefd 	bl	8002530 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b03      	cmp	r3, #3
 8000740:	dde7      	ble.n	8000712 <LED_control+0xe>
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40020c00 	.word	0x40020c00

08000750 <LED_effect1>:


void LED_effect1(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <LED_effect1+0x28>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f083 0301 	eor.w	r3, r3, #1
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <LED_effect1+0x28>)
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <LED_effect1+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d002      	beq.n	800076e <LED_effect1+0x1e>
 8000768:	f7ff ff54 	bl	8000614 <turn_off_all_leds>
}
 800076c:	e001      	b.n	8000772 <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800076e:	f7ff ff6f 	bl	8000650 <turn_on_all_leds>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000000 	.word	0x20000000

0800077c <LED_effect2>:


void LED_effect2(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <LED_effect2+0x28>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f083 0301 	eor.w	r3, r3, #1
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <LED_effect2+0x28>)
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <LED_effect2+0x28>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <LED_effect2+0x1e>
 8000794:	f7ff ff98 	bl	80006c8 <turn_on_even_leds>
}
 8000798:	e001      	b.n	800079e <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800079a:	f7ff ff77 	bl	800068c <turn_on_odd_leds>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000004 	.word	0x20000004

080007a8 <LED_effect3>:

void LED_effect3(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <LED_effect3+0x2c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <LED_effect3+0x2c>)
 80007b4:	600a      	str	r2, [r1, #0]
 80007b6:	425a      	negs	r2, r3
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	f002 0203 	and.w	r2, r2, #3
 80007c0:	bf58      	it	pl
 80007c2:	4253      	negpl	r3, r2
 80007c4:	2201      	movs	r2, #1
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff9a 	bl	8000704 <LED_control>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000a0 	.word	0x200000a0

080007d8 <LED_effect4>:


void LED_effect4(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <LED_effect4+0x2c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <LED_effect4+0x2c>)
 80007e4:	600a      	str	r2, [r1, #0]
 80007e6:	425a      	negs	r2, r3
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	f002 0203 	and.w	r2, r2, #3
 80007f0:	bf58      	it	pl
 80007f2:	4253      	negpl	r3, r2
 80007f4:	2208      	movs	r2, #8
 80007f6:	fa42 f303 	asr.w	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff82 	bl	8000704 <LED_control>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000a4 	.word	0x200000a4

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f001 fb3d 	bl	8001e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f911 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f000 f9cb 	bl	8000bb0 <MX_GPIO_Init>
  MX_RTC_Init();
 800081a:	f000 f979 	bl	8000b10 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800081e:	f000 f99d 	bl	8000b5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 8000822:	4b6c      	ldr	r3, [pc, #432]	; (80009d4 <main+0x1cc>)
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	2302      	movs	r3, #2
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2300      	movs	r3, #0
 800082c:	22fa      	movs	r2, #250	; 0xfa
 800082e:	496a      	ldr	r1, [pc, #424]	; (80009d8 <main+0x1d0>)
 8000830:	486a      	ldr	r0, [pc, #424]	; (80009dc <main+0x1d4>)
 8000832:	f005 f8cf 	bl	80059d4 <xTaskCreate>
 8000836:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000838:	6a3b      	ldr	r3, [r7, #32]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d00a      	beq.n	8000854 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000842:	f383 8811 	msr	BASEPRI, r3
 8000846:	f3bf 8f6f 	isb	sy
 800084a:	f3bf 8f4f 	dsb	sy
 800084e:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000850:	bf00      	nop
 8000852:	e7fe      	b.n	8000852 <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8000854:	4b62      	ldr	r3, [pc, #392]	; (80009e0 <main+0x1d8>)
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	2302      	movs	r3, #2
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2300      	movs	r3, #0
 800085e:	22fa      	movs	r2, #250	; 0xfa
 8000860:	4960      	ldr	r1, [pc, #384]	; (80009e4 <main+0x1dc>)
 8000862:	4861      	ldr	r0, [pc, #388]	; (80009e8 <main+0x1e0>)
 8000864:	f005 f8b6 	bl	80059d4 <xTaskCreate>
 8000868:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 800086a:	6a3b      	ldr	r3, [r7, #32]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d00a      	beq.n	8000886 <main+0x7e>
        __asm volatile
 8000870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	61bb      	str	r3, [r7, #24]
    }
 8000882:	bf00      	nop
 8000884:	e7fe      	b.n	8000884 <main+0x7c>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8000886:	4b59      	ldr	r3, [pc, #356]	; (80009ec <main+0x1e4>)
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	2302      	movs	r3, #2
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2300      	movs	r3, #0
 8000890:	22fa      	movs	r2, #250	; 0xfa
 8000892:	4957      	ldr	r1, [pc, #348]	; (80009f0 <main+0x1e8>)
 8000894:	4857      	ldr	r0, [pc, #348]	; (80009f4 <main+0x1ec>)
 8000896:	f005 f89d 	bl	80059d4 <xTaskCreate>
 800089a:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d00a      	beq.n	80008b8 <main+0xb0>
        __asm volatile
 80008a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a6:	f383 8811 	msr	BASEPRI, r3
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	f3bf 8f4f 	dsb	sy
 80008b2:	617b      	str	r3, [r7, #20]
    }
 80008b4:	bf00      	nop
 80008b6:	e7fe      	b.n	80008b6 <main+0xae>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008b8:	4b4f      	ldr	r3, [pc, #316]	; (80009f8 <main+0x1f0>)
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	2302      	movs	r3, #2
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2300      	movs	r3, #0
 80008c2:	22fa      	movs	r2, #250	; 0xfa
 80008c4:	494d      	ldr	r1, [pc, #308]	; (80009fc <main+0x1f4>)
 80008c6:	484e      	ldr	r0, [pc, #312]	; (8000a00 <main+0x1f8>)
 80008c8:	f005 f884 	bl	80059d4 <xTaskCreate>
 80008cc:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d00a      	beq.n	80008ea <main+0xe2>
        __asm volatile
 80008d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	613b      	str	r3, [r7, #16]
    }
 80008e6:	bf00      	nop
 80008e8:	e7fe      	b.n	80008e8 <main+0xe0>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008ea:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <main+0x1fc>)
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	2302      	movs	r3, #2
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2300      	movs	r3, #0
 80008f4:	22fa      	movs	r2, #250	; 0xfa
 80008f6:	4944      	ldr	r1, [pc, #272]	; (8000a08 <main+0x200>)
 80008f8:	4844      	ldr	r0, [pc, #272]	; (8000a0c <main+0x204>)
 80008fa:	f005 f86b 	bl	80059d4 <xTaskCreate>
 80008fe:	6238      	str	r0, [r7, #32]

	configASSERT(status == pdPASS);
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d00a      	beq.n	800091c <main+0x114>
        __asm volatile
 8000906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090a:	f383 8811 	msr	BASEPRI, r3
 800090e:	f3bf 8f6f 	isb	sy
 8000912:	f3bf 8f4f 	dsb	sy
 8000916:	60fb      	str	r3, [r7, #12]
    }
 8000918:	bf00      	nop
 800091a:	e7fe      	b.n	800091a <main+0x112>

	q_data = xQueueCreate (10, sizeof(char));
 800091c:	2200      	movs	r2, #0
 800091e:	2101      	movs	r1, #1
 8000920:	200a      	movs	r0, #10
 8000922:	f004 fb0b 	bl	8004f3c <xQueueGenericCreate>
 8000926:	4603      	mov	r3, r0
 8000928:	4a39      	ldr	r2, [pc, #228]	; (8000a10 <main+0x208>)
 800092a:	6013      	str	r3, [r2, #0]

	configASSERT(q_data != NULL);
 800092c:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <main+0x208>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10a      	bne.n	800094a <main+0x142>
        __asm volatile
 8000934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000938:	f383 8811 	msr	BASEPRI, r3
 800093c:	f3bf 8f6f 	isb	sy
 8000940:	f3bf 8f4f 	dsb	sy
 8000944:	60bb      	str	r3, [r7, #8]
    }
 8000946:	bf00      	nop
 8000948:	e7fe      	b.n	8000948 <main+0x140>

	q_print = xQueueCreate (10, sizeof(size_t));
 800094a:	2200      	movs	r2, #0
 800094c:	2104      	movs	r1, #4
 800094e:	200a      	movs	r0, #10
 8000950:	f004 faf4 	bl	8004f3c <xQueueGenericCreate>
 8000954:	4603      	mov	r3, r0
 8000956:	4a2f      	ldr	r2, [pc, #188]	; (8000a14 <main+0x20c>)
 8000958:	6013      	str	r3, [r2, #0]

	configASSERT(q_print != NULL);
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <main+0x20c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10a      	bne.n	8000978 <main+0x170>
        __asm volatile
 8000962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000966:	f383 8811 	msr	BASEPRI, r3
 800096a:	f3bf 8f6f 	isb	sy
 800096e:	f3bf 8f4f 	dsb	sy
 8000972:	607b      	str	r3, [r7, #4]
    }
 8000974:	bf00      	nop
 8000976:	e7fe      	b.n	8000976 <main+0x16e>


	//Create software timers for LED effects
	for(int i = 0 ; i < 4 ; i++)
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
 800097c:	e013      	b.n	80009a6 <main+0x19e>
		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	3301      	adds	r3, #1
 8000982:	461a      	mov	r2, r3
 8000984:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <main+0x210>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	4613      	mov	r3, r2
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000990:	4822      	ldr	r0, [pc, #136]	; (8000a1c <main+0x214>)
 8000992:	f006 f903 	bl	8006b9c <xTimerCreate>
 8000996:	4602      	mov	r2, r0
 8000998:	4921      	ldr	r1, [pc, #132]	; (8000a20 <main+0x218>)
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	3301      	adds	r3, #1
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	dde8      	ble.n	800097e <main+0x176>


	rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <main+0x21c>)
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2300      	movs	r3, #0
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b8:	481b      	ldr	r0, [pc, #108]	; (8000a28 <main+0x220>)
 80009ba:	f006 f8ef 	bl	8006b9c <xTimerCreate>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <main+0x224>)
 80009c2:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	491a      	ldr	r1, [pc, #104]	; (8000a30 <main+0x228>)
 80009c8:	481a      	ldr	r0, [pc, #104]	; (8000a34 <main+0x22c>)
 80009ca:	f003 fa02 	bl	8003dd2 <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 80009ce:	f005 f947 	bl	8005c60 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <main+0x1ca>
 80009d4:	20000110 	.word	0x20000110
 80009d8:	08008d58 	.word	0x08008d58
 80009dc:	08001611 	.word	0x08001611
 80009e0:	2000010c 	.word	0x2000010c
 80009e4:	08008d64 	.word	0x08008d64
 80009e8:	08001d1d 	.word	0x08001d1d
 80009ec:	20000114 	.word	0x20000114
 80009f0:	08008d70 	.word	0x08008d70
 80009f4:	08001cdd 	.word	0x08001cdd
 80009f8:	20000118 	.word	0x20000118
 80009fc:	08008d7c 	.word	0x08008d7c
 8000a00:	080016f9 	.word	0x080016f9
 8000a04:	2000011c 	.word	0x2000011c
 8000a08:	08008d88 	.word	0x08008d88
 8000a0c:	0800186d 	.word	0x0800186d
 8000a10:	20000120 	.word	0x20000120
 8000a14:	20000124 	.word	0x20000124
 8000a18:	08000e81 	.word	0x08000e81
 8000a1c:	08008d94 	.word	0x08008d94
 8000a20:	20000128 	.word	0x20000128
 8000a24:	08000e6d 	.word	0x08000e6d
 8000a28:	08008da0 	.word	0x08008da0
 8000a2c:	20000138 	.word	0x20000138
 8000a30:	2000013c 	.word	0x2000013c
 8000a34:	200000c8 	.word	0x200000c8

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	2230      	movs	r2, #48	; 0x30
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f007 f9a3 	bl	8007d92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <SystemClock_Config+0xd0>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <SystemClock_Config+0xd0>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <SystemClock_Config+0xd0>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a22      	ldr	r2, [pc, #136]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a94:	230a      	movs	r3, #10
 8000a96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aac:	2308      	movs	r3, #8
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ab0:	2332      	movs	r3, #50	; 0x32
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fd4f 	bl	8002564 <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000acc:	f000 fa66 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000adc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 ffb0 	bl	8002a54 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000afa:	f000 fa4f 	bl	8000f9c <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3750      	adds	r7, #80	; 0x50
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000

08000b10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_RTC_Init+0x44>)
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <MX_RTC_Init+0x48>)
 8000b18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_RTC_Init+0x44>)
 8000b1c:	2240      	movs	r2, #64	; 0x40
 8000b1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_RTC_Init+0x44>)
 8000b22:	227f      	movs	r2, #127	; 0x7f
 8000b24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_RTC_Init+0x44>)
 8000b28:	22ff      	movs	r2, #255	; 0xff
 8000b2a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_RTC_Init+0x44>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_RTC_Init+0x44>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_RTC_Init+0x44>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_RTC_Init+0x44>)
 8000b40:	f002 fabc 	bl	80030bc <HAL_RTC_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b4a:	f000 fa27 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000a8 	.word	0x200000a8
 8000b58:	40002800 	.word	0x40002800

08000b5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_USART2_UART_Init+0x50>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b94:	f003 f83e 	bl	8003c14 <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9e:	f000 f9fd 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000c8 	.word	0x200000c8
 8000bac:	40004400 	.word	0x40004400

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	4ba2      	ldr	r3, [pc, #648]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4aa1      	ldr	r2, [pc, #644]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b9f      	ldr	r3, [pc, #636]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	4b9b      	ldr	r3, [pc, #620]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a9a      	ldr	r2, [pc, #616]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b98      	ldr	r3, [pc, #608]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b94      	ldr	r3, [pc, #592]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a93      	ldr	r2, [pc, #588]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b91      	ldr	r3, [pc, #580]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b8d      	ldr	r3, [pc, #564]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a8c      	ldr	r2, [pc, #560]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b8a      	ldr	r3, [pc, #552]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b86      	ldr	r3, [pc, #536]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a85      	ldr	r2, [pc, #532]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b83      	ldr	r3, [pc, #524]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b7f      	ldr	r3, [pc, #508]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a7e      	ldr	r2, [pc, #504]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b7c      	ldr	r3, [pc, #496]	; (8000e54 <MX_GPIO_Init+0x2a4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2108      	movs	r1, #8
 8000c72:	4879      	ldr	r0, [pc, #484]	; (8000e58 <MX_GPIO_Init+0x2a8>)
 8000c74:	f001 fc5c 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	4877      	ldr	r0, [pc, #476]	; (8000e5c <MX_GPIO_Init+0x2ac>)
 8000c7e:	f001 fc57 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c82:	2200      	movs	r2, #0
 8000c84:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c88:	4875      	ldr	r0, [pc, #468]	; (8000e60 <MX_GPIO_Init+0x2b0>)
 8000c8a:	f001 fc51 	bl	8002530 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	486c      	ldr	r0, [pc, #432]	; (8000e58 <MX_GPIO_Init+0x2a8>)
 8000ca6:	f001 faa7 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4866      	ldr	r0, [pc, #408]	; (8000e5c <MX_GPIO_Init+0x2ac>)
 8000cc2:	f001 fa99 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	485e      	ldr	r0, [pc, #376]	; (8000e5c <MX_GPIO_Init+0x2ac>)
 8000ce2:	f001 fa89 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	485a      	ldr	r0, [pc, #360]	; (8000e64 <MX_GPIO_Init+0x2b4>)
 8000cfc:	f001 fa7c 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d00:	2310      	movs	r3, #16
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d10:	2306      	movs	r3, #6
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4852      	ldr	r0, [pc, #328]	; (8000e64 <MX_GPIO_Init+0x2b4>)
 8000d1c:	f001 fa6c 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d20:	23e0      	movs	r3, #224	; 0xe0
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d30:	2305      	movs	r3, #5
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	484a      	ldr	r0, [pc, #296]	; (8000e64 <MX_GPIO_Init+0x2b4>)
 8000d3c:	f001 fa5c 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d40:	2304      	movs	r3, #4
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4845      	ldr	r0, [pc, #276]	; (8000e68 <MX_GPIO_Init+0x2b8>)
 8000d54:	f001 fa50 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	483c      	ldr	r0, [pc, #240]	; (8000e68 <MX_GPIO_Init+0x2b8>)
 8000d76:	f001 fa3f 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d7a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d7e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4833      	ldr	r0, [pc, #204]	; (8000e60 <MX_GPIO_Init+0x2b0>)
 8000d94:	f001 fa30 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d98:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000daa:	2306      	movs	r3, #6
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4829      	ldr	r0, [pc, #164]	; (8000e5c <MX_GPIO_Init+0x2ac>)
 8000db6:	f001 fa1f 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4825      	ldr	r0, [pc, #148]	; (8000e64 <MX_GPIO_Init+0x2b4>)
 8000dd0:	f001 fa12 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000dd4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000de6:	230a      	movs	r3, #10
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	481c      	ldr	r0, [pc, #112]	; (8000e64 <MX_GPIO_Init+0x2b4>)
 8000df2:	f001 fa01 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000df6:	2320      	movs	r3, #32
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4815      	ldr	r0, [pc, #84]	; (8000e60 <MX_GPIO_Init+0x2b0>)
 8000e0a:	f001 f9f5 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	2312      	movs	r3, #18
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e20:	2304      	movs	r3, #4
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480f      	ldr	r0, [pc, #60]	; (8000e68 <MX_GPIO_Init+0x2b8>)
 8000e2c:	f001 f9e4 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e34:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_GPIO_Init+0x2a8>)
 8000e46:	f001 f9d7 	bl	80021f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	; 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400

08000e6c <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000e74:	f000 f898 	bl	8000fa8 <show_time_date_itm>

}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	 int id;
	 id = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f006 f9ec 	bl	8007266 <pvTimerGetTimerID>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	60fb      	str	r3, [r7, #12]

	 switch(id)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d816      	bhi.n	8000ec8 <led_effect_callback+0x48>
 8000e9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <led_effect_callback+0x20>)
 8000e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea0:	08000eb1 	.word	0x08000eb1
 8000ea4:	08000eb7 	.word	0x08000eb7
 8000ea8:	08000ebd 	.word	0x08000ebd
 8000eac:	08000ec3 	.word	0x08000ec3
	 {
	 case 1 :
		 LED_effect1();
 8000eb0:	f7ff fc4e 	bl	8000750 <LED_effect1>
		 break;
 8000eb4:	e008      	b.n	8000ec8 <led_effect_callback+0x48>
	 case 2:
		 LED_effect2();
 8000eb6:	f7ff fc61 	bl	800077c <LED_effect2>
		 break;
 8000eba:	e005      	b.n	8000ec8 <led_effect_callback+0x48>
	 case 3:
		 LED_effect3();
 8000ebc:	f7ff fc74 	bl	80007a8 <LED_effect3>
		 break;
 8000ec0:	e002      	b.n	8000ec8 <led_effect_callback+0x48>
	 case 4:
		 LED_effect4();
 8000ec2:	f7ff fc89 	bl	80007d8 <LED_effect4>
	 }


}
 8000ec6:	e7ff      	b.n	8000ec8 <led_effect_callback+0x48>
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_UART_RxCpltCallback>:


/* This function called from UART interrupt handler , hence executes in interrupt context */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e002      	b.n	8000ee4 <HAL_UART_RxCpltCallback+0x14>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000eea:	d3f8      	bcc.n	8000ede <HAL_UART_RxCpltCallback+0xe>

	if(! xQueueIsQueueFullFromISR(q_data))
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_UART_RxCpltCallback+0x98>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f004 fcea 	bl	80058ca <xQueueIsQueueFullFromISR>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d107      	bne.n	8000f0c <HAL_UART_RxCpltCallback+0x3c>
	{
		/*Enqueue data byte */
		xQueueSendFromISR(q_data , (void*)&user_data , NULL);
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_UART_RxCpltCallback+0x98>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	2300      	movs	r3, #0
 8000f02:	2200      	movs	r2, #0
 8000f04:	4919      	ldr	r1, [pc, #100]	; (8000f6c <HAL_UART_RxCpltCallback+0x9c>)
 8000f06:	f004 f999 	bl	800523c <xQueueGenericSendFromISR>
 8000f0a:	e013      	b.n	8000f34 <HAL_UART_RxCpltCallback+0x64>
	}else{
		if(user_data == '\n')
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_UART_RxCpltCallback+0x9c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b0a      	cmp	r3, #10
 8000f14:	d10e      	bne.n	8000f34 <HAL_UART_RxCpltCallback+0x64>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_UART_RxCpltCallback+0x98>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f107 010b 	add.w	r1, r7, #11
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 fb15 	bl	8005550 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data ,(void*)&user_data , NULL);
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_UART_RxCpltCallback+0x98>)
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	490f      	ldr	r1, [pc, #60]	; (8000f6c <HAL_UART_RxCpltCallback+0x9c>)
 8000f30:	f004 f984 	bl	800523c <xQueueGenericSendFromISR>
		}
	}

	/*Send notification to command handling task if user_data = '\n' */
	if( user_data == '\n' ){
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_UART_RxCpltCallback+0x9c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d10a      	bne.n	8000f54 <HAL_UART_RxCpltCallback+0x84>
		/*send notification to command handling task */
		xTaskNotifyFromISR (handle_cmd_task,0,eNoAction,NULL);
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_UART_RxCpltCallback+0xa0>)
 8000f40:	6818      	ldr	r0, [r3, #0]
 8000f42:	2300      	movs	r3, #0
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	2300      	movs	r3, #0
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f005 fc8a 	bl	8006868 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	4905      	ldr	r1, [pc, #20]	; (8000f6c <HAL_UART_RxCpltCallback+0x9c>)
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <HAL_UART_RxCpltCallback+0xa4>)
 8000f5a:	f002 ff3a 	bl	8003dd2 <HAL_UART_Receive_IT>


}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000120 	.word	0x20000120
 8000f6c:	2000013c 	.word	0x2000013c
 8000f70:	2000010c 	.word	0x2000010c
 8000f74:	200000c8 	.word	0x200000c8

08000f78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f8a:	f000 ffa1 	bl	8001ed0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40001000 	.word	0x40001000

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <show_time_date_itm>:


#include "main.h"

 void show_time_date_itm(void)
 {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f006 feeb 	bl	8007d92 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2214      	movs	r2, #20
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f006 fee5 	bl	8007d92 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4815      	ldr	r0, [pc, #84]	; (8001024 <show_time_date_itm+0x7c>)
 8000fd0:	f002 f984 	bl	80032dc <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <show_time_date_itm+0x7c>)
 8000fde:	f002 fa5f 	bl	80034a0 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <show_time_date_itm+0x44>
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <show_time_date_itm+0x80>)
 8000fea:	e000      	b.n	8000fee <show_time_date_itm+0x46>
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <show_time_date_itm+0x84>)
 8000fee:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000ff0:	793b      	ldrb	r3, [r7, #4]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	797b      	ldrb	r3, [r7, #5]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	4603      	mov	r3, r0
 8001002:	480b      	ldr	r0, [pc, #44]	; (8001030 <show_time_date_itm+0x88>)
 8001004:	f006 fe50 	bl	8007ca8 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001008:	7e7b      	ldrb	r3, [r7, #25]
 800100a:	4619      	mov	r1, r3
 800100c:	7ebb      	ldrb	r3, [r7, #26]
 800100e:	461a      	mov	r2, r3
 8001010:	7efb      	ldrb	r3, [r7, #27]
 8001012:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <show_time_date_itm+0x8c>)
 8001018:	f006 fe46 	bl	8007ca8 <iprintf>

 }
 800101c:	bf00      	nop
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200000a8 	.word	0x200000a8
 8001028:	08008db4 	.word	0x08008db4
 800102c:	08008db8 	.word	0x08008db8
 8001030:	08008dbc 	.word	0x08008dbc
 8001034:	08008dd0 	.word	0x08008dd0

08001038 <show_time_date>:

void show_time_date(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	2204      	movs	r2, #4
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f006 fea3 	bl	8007d92 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2214      	movs	r2, #20
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f006 fe9d 	bl	8007d92 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	4619      	mov	r1, r3
 800105e:	4821      	ldr	r0, [pc, #132]	; (80010e4 <show_time_date+0xac>)
 8001060:	f002 f93c 	bl	80032dc <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <show_time_date+0xac>)
 800106e:	f002 fa17 	bl	80034a0 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <show_time_date+0x44>
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <show_time_date+0xb0>)
 800107a:	e000      	b.n	800107e <show_time_date+0x46>
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <show_time_date+0xb4>)
 800107e:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8001080:	793b      	ldrb	r3, [r7, #4]
 8001082:	4618      	mov	r0, r3
 8001084:	797b      	ldrb	r3, [r7, #5]
 8001086:	461a      	mov	r2, r3
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	4619      	mov	r1, r3
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	9101      	str	r1, [sp, #4]
 8001092:	9200      	str	r2, [sp, #0]
 8001094:	4603      	mov	r3, r0
 8001096:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <show_time_date+0xb8>)
 8001098:	4916      	ldr	r1, [pc, #88]	; (80010f4 <show_time_date+0xbc>)
 800109a:	4817      	ldr	r0, [pc, #92]	; (80010f8 <show_time_date+0xc0>)
 800109c:	f006 fe16 	bl	8007ccc <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <show_time_date+0xc4>)
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295
 80010aa:	4915      	ldr	r1, [pc, #84]	; (8001100 <show_time_date+0xc8>)
 80010ac:	f003 ffc8 	bl	8005040 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80010b0:	7e7b      	ldrb	r3, [r7, #25]
 80010b2:	461a      	mov	r2, r3
 80010b4:	7ebb      	ldrb	r3, [r7, #26]
 80010b6:	4619      	mov	r1, r3
 80010b8:	7efb      	ldrb	r3, [r7, #27]
 80010ba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	460b      	mov	r3, r1
 80010c2:	4910      	ldr	r1, [pc, #64]	; (8001104 <show_time_date+0xcc>)
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <show_time_date+0xd0>)
 80010c6:	f006 fe01 	bl	8007ccc <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <show_time_date+0xc4>)
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	2300      	movs	r3, #0
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	490d      	ldr	r1, [pc, #52]	; (800110c <show_time_date+0xd4>)
 80010d6:	f003 ffb3 	bl	8005040 <xQueueGenericSend>
}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000a8 	.word	0x200000a8
 80010e8:	08008db4 	.word	0x08008db4
 80010ec:	08008db8 	.word	0x08008db8
 80010f0:	08008de0 	.word	0x08008de0
 80010f4:	08008df4 	.word	0x08008df4
 80010f8:	20000140 	.word	0x20000140
 80010fc:	20000124 	.word	0x20000124
 8001100:	20000008 	.word	0x20000008
 8001104:	08008dd0 	.word	0x08008dd0
 8001108:	20000168 	.word	0x20000168
 800110c:	2000000c 	.word	0x2000000c

08001110 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 800112a:	2200      	movs	r2, #0
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <rtc_configure_time+0x2c>)
 8001130:	f002 f83a 	bl	80031a8 <HAL_RTC_SetTime>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000a8 	.word	0x200000a8

08001140 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <rtc_configure_date+0x1c>)
 800114e:	f002 f923 	bl	8003398 <HAL_RTC_SetDate>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000a8 	.word	0x200000a8

08001160 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	if(time){
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00d      	beq.n	800118c <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b0c      	cmp	r3, #12
 8001176:	d807      	bhi.n	8001188 <validate_rtc_information+0x28>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	2b3b      	cmp	r3, #59	; 0x3b
 800117e:	d803      	bhi.n	8001188 <validate_rtc_information+0x28>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	789b      	ldrb	r3, [r3, #2]
 8001184:	2b3b      	cmp	r3, #59	; 0x3b
 8001186:	d901      	bls.n	800118c <validate_rtc_information+0x2c>
			return 1;
 8001188:	2301      	movs	r3, #1
 800118a:	e015      	b.n	80011b8 <validate_rtc_information+0x58>
	}

	if(date){
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d011      	beq.n	80011b6 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	789b      	ldrb	r3, [r3, #2]
 8001196:	2b1f      	cmp	r3, #31
 8001198:	d80b      	bhi.n	80011b2 <validate_rtc_information+0x52>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	d807      	bhi.n	80011b2 <validate_rtc_information+0x52>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	78db      	ldrb	r3, [r3, #3]
 80011a6:	2b63      	cmp	r3, #99	; 0x63
 80011a8:	d803      	bhi.n	80011b2 <validate_rtc_information+0x52>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	2b0c      	cmp	r3, #12
 80011b0:	d901      	bls.n	80011b6 <validate_rtc_information+0x56>
			return 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <validate_rtc_information+0x58>
	}

	return 0;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <HAL_MspInit+0x4c>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_MspInit+0x4c>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800

08001214 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <HAL_RTC_MspInit+0x4c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d111      	bne.n	8001258 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001234:	2302      	movs	r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fe58 	bl	8002ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800124e:	f7ff fea5 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_RTC_MspInit+0x50>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40002800 	.word	0x40002800
 8001264:	42470e3c 	.word	0x42470e3c

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_UART_MspInit+0x94>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d133      	bne.n	80012f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_UART_MspInit+0x98>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <HAL_UART_MspInit+0x98>)
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_UART_MspInit+0x98>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_UART_MspInit+0x98>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <HAL_UART_MspInit+0x98>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_UART_MspInit+0x98>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c2:	230c      	movs	r3, #12
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d2:	2307      	movs	r3, #7
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <HAL_UART_MspInit+0x9c>)
 80012de:	f000 ff8b 	bl	80021f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2106      	movs	r1, #6
 80012e6:	2026      	movs	r0, #38	; 0x26
 80012e8:	f000 feca 	bl	8002080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ec:	2026      	movs	r0, #38	; 0x26
 80012ee:	f000 fee3 	bl	80020b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004400 	.word	0x40004400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4b33      	ldr	r3, [pc, #204]	; (80013ec <HAL_InitTick+0xe4>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a32      	ldr	r2, [pc, #200]	; (80013ec <HAL_InitTick+0xe4>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_InitTick+0xe4>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001334:	f107 0210 	add.w	r2, r7, #16
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f001 fda8 	bl	8002e94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134a:	2b00      	cmp	r3, #0
 800134c:	d103      	bne.n	8001356 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800134e:	f001 fd79 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 8001352:	6378      	str	r0, [r7, #52]	; 0x34
 8001354:	e004      	b.n	8001360 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001356:	f001 fd75 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 800135a:	4603      	mov	r3, r0
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <HAL_InitTick+0xe8>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	0c9b      	lsrs	r3, r3, #18
 800136a:	3b01      	subs	r3, #1
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_InitTick+0xec>)
 8001370:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <HAL_InitTick+0xf0>)
 8001372:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_InitTick+0xec>)
 8001376:	f240 32e7 	movw	r2, #999	; 0x3e7
 800137a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_InitTick+0xec>)
 800137e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001380:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_InitTick+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_InitTick+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_InitTick+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001394:	4817      	ldr	r0, [pc, #92]	; (80013f4 <HAL_InitTick+0xec>)
 8001396:	f002 f98f 	bl	80036b8 <HAL_TIM_Base_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d11b      	bne.n	80013e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013a8:	4812      	ldr	r0, [pc, #72]	; (80013f4 <HAL_InitTick+0xec>)
 80013aa:	f002 f9df 	bl	800376c <HAL_TIM_Base_Start_IT>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d111      	bne.n	80013e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013bc:	2036      	movs	r0, #54	; 0x36
 80013be:	f000 fe7b 	bl	80020b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d808      	bhi.n	80013da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	2036      	movs	r0, #54	; 0x36
 80013ce:	f000 fe57 	bl	8002080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_InitTick+0xf4>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e002      	b.n	80013e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3738      	adds	r7, #56	; 0x38
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	431bde83 	.word	0x431bde83
 80013f4:	20000190 	.word	0x20000190
 80013f8:	40001000 	.word	0x40001000
 80013fc:	20000018 	.word	0x20000018

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <USART2_IRQHandler+0x10>)
 8001432:	f002 fcff 	bl	8003e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200000c8 	.word	0x200000c8

08001440 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM6_DAC_IRQHandler+0x10>)
 8001446:	f002 fa01 	bl	800384c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000190 	.word	0x20000190

08001454 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <ITM_SendChar+0x48>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <ITM_SendChar+0x48>)
 8001464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001468:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <ITM_SendChar+0x4c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <ITM_SendChar+0x4c>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001476:	bf00      	nop
 8001478:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f8      	beq.n	8001478 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001486:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	6013      	str	r3, [r2, #0]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000edfc 	.word	0xe000edfc
 80014a0:	e0000e00 	.word	0xe0000e00

080014a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e00a      	b.n	80014cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014b6:	f3af 8000 	nop.w
 80014ba:	4601      	mov	r1, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	b2ca      	uxtb	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf0      	blt.n	80014b6 <_read+0x12>
	}

return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e009      	b.n	8001504 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ffab 	bl	8001454 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbf1      	blt.n	80014f0 <_write+0x12>
	}
	return len;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_close>:

int _close(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
	return -1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153e:	605a      	str	r2, [r3, #4]
	return 0;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_isatty>:

int _isatty(int file)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
	return 1;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	return 0;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a14      	ldr	r2, [pc, #80]	; (80015dc <_sbrk+0x5c>)
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <_sbrk+0x60>)
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <_sbrk+0x64>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <_sbrk+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d207      	bcs.n	80015c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b0:	f006 fc3e 	bl	8007e30 <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	220c      	movs	r2, #12
 80015b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e009      	b.n	80015d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <_sbrk+0x64>)
 80015d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20020000 	.word	0x20020000
 80015e0:	00000400 	.word	0x00000400
 80015e4:	200001d8 	.word	0x200001d8
 80015e8:	200194d8 	.word	0x200194d8

080015ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <SystemInit+0x20>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <SystemInit+0x20>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <menu_task>:

const char *msg_inv = "////Invalid option////\n";


void menu_task(void *param)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 8001618:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <menu_task+0xd0>)
 800161a:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";

	while(1){
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <menu_task+0xd4>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	f107 0108 	add.w	r1, r7, #8
 8001624:	2300      	movs	r3, #0
 8001626:	f04f 32ff 	mov.w	r2, #4294967295
 800162a:	f003 fd09 	bl	8005040 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	f04f 32ff 	mov.w	r2, #4294967295
 8001636:	9200      	str	r2, [sp, #0]
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	2000      	movs	r0, #0
 800163e:	f004 ffb3 	bl	80065a8 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d133      	bne.n	80016b6 <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3b30      	subs	r3, #48	; 0x30
 8001654:	613b      	str	r3, [r7, #16]
			switch(option)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d035      	beq.n	80016c8 <menu_task+0xb8>
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b02      	cmp	r3, #2
 8001660:	dc20      	bgt.n	80016a4 <menu_task+0x94>
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <menu_task+0x60>
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d00d      	beq.n	800168a <menu_task+0x7a>
 800166e:	e019      	b.n	80016a4 <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <menu_task+0xd8>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task,0,eNoAction);
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <menu_task+0xdc>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2300      	movs	r3, #0
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	f005 f810 	bl	80066a8 <xTaskGenericNotify>
					break;
 8001688:	e01f      	b.n	80016ca <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <menu_task+0xd8>)
 800168c:	2202      	movs	r2, #2
 800168e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task,0,eNoAction);
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <menu_task+0xe0>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2300      	movs	r3, #0
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	f005 f803 	bl	80066a8 <xTaskGenericNotify>
					break;
 80016a2:	e012      	b.n	80016ca <menu_task+0xba>
				case 2: /*implement exit */
					break;
				default:
					xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <menu_task+0xd4>)
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	f04f 32ff 	mov.w	r2, #4294967295
 80016ae:	4911      	ldr	r1, [pc, #68]	; (80016f4 <menu_task+0xe4>)
 80016b0:	f003 fcc6 	bl	8005040 <xQueueGenericSend>
					continue;
 80016b4:	e012      	b.n	80016dc <menu_task+0xcc>
			}

		}else{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <menu_task+0xd4>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	2300      	movs	r3, #0
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <menu_task+0xe4>)
 80016c2:	f003 fcbd 	bl	8005040 <xQueueGenericSend>
			continue;
 80016c6:	e009      	b.n	80016dc <menu_task+0xcc>
					break;
 80016c8:	bf00      	nop
		}


		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2000      	movs	r0, #0
 80016d8:	f004 ff66 	bl	80065a8 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80016dc:	e79e      	b.n	800161c <menu_task+0xc>
 80016de:	bf00      	nop
 80016e0:	08008e24 	.word	0x08008e24
 80016e4:	20000124 	.word	0x20000124
 80016e8:	2000013d 	.word	0x2000013d
 80016ec:	20000118 	.word	0x20000118
 80016f0:	2000011c 	.word	0x2000011c
 80016f4:	20000014 	.word	0x20000014

080016f8 <led_task>:

	}//while super loop
}

void led_task(void *param)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 8001700:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <led_task+0x104>)
 8001702:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2300      	movs	r3, #0
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2000      	movs	r0, #0
 8001712:	f004 ff49 	bl	80065a8 <xTaskGenericNotifyWait>

		/*Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 8001716:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <led_task+0x108>)
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f107 010c 	add.w	r1, r7, #12
 800171e:	2300      	movs	r3, #0
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	f003 fc8c 	bl	8005040 <xQueueGenericSend>

		/*wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	9200      	str	r2, [sp, #0]
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2000      	movs	r0, #0
 8001738:	f004 ff36 	bl	80065a8 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d843      	bhi.n	80017d0 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	492e      	ldr	r1, [pc, #184]	; (8001804 <led_task+0x10c>)
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fd3f 	bl	80001d0 <strcmp>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <led_task+0x66>
				led_effect_stop();
 8001758:	f7fe ff20 	bl	800059c <led_effect_stop>
 800175c:	e040      	b.n	80017e0 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	4929      	ldr	r1, [pc, #164]	; (8001808 <led_task+0x110>)
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fd34 	bl	80001d0 <strcmp>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <led_task+0x7e>
				led_effect(1);
 800176e:	2001      	movs	r0, #1
 8001770:	f7fe ff34 	bl	80005dc <led_effect>
 8001774:	e034      	b.n	80017e0 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	4924      	ldr	r1, [pc, #144]	; (800180c <led_task+0x114>)
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fd28 	bl	80001d0 <strcmp>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <led_task+0x96>
				led_effect(2);
 8001786:	2002      	movs	r0, #2
 8001788:	f7fe ff28 	bl	80005dc <led_effect>
 800178c:	e028      	b.n	80017e0 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	491f      	ldr	r1, [pc, #124]	; (8001810 <led_task+0x118>)
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fd1c 	bl	80001d0 <strcmp>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <led_task+0xae>
				led_effect(3);
 800179e:	2003      	movs	r0, #3
 80017a0:	f7fe ff1c 	bl	80005dc <led_effect>
 80017a4:	e01c      	b.n	80017e0 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	491a      	ldr	r1, [pc, #104]	; (8001814 <led_task+0x11c>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fd10 	bl	80001d0 <strcmp>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <led_task+0xc6>
				led_effect(4);
 80017b6:	2004      	movs	r0, #4
 80017b8:	f7fe ff10 	bl	80005dc <led_effect>
 80017bc:	e010      	b.n	80017e0 <led_task+0xe8>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY); /*print invalid message */
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <led_task+0x108>)
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	2300      	movs	r3, #0
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295
 80017c8:	4913      	ldr	r1, [pc, #76]	; (8001818 <led_task+0x120>)
 80017ca:	f003 fc39 	bl	8005040 <xQueueGenericSend>
 80017ce:	e007      	b.n	80017e0 <led_task+0xe8>
		}else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <led_task+0x108>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	f04f 32ff 	mov.w	r2, #4294967295
 80017da:	490f      	ldr	r1, [pc, #60]	; (8001818 <led_task+0x120>)
 80017dc:	f003 fc30 	bl	8005040 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <led_task+0x124>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <led_task+0x128>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	2300      	movs	r3, #0
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	2200      	movs	r2, #0
 80017f2:	2100      	movs	r1, #0
 80017f4:	f004 ff58 	bl	80066a8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80017f8:	e784      	b.n	8001704 <led_task+0xc>
 80017fa:	bf00      	nop
 80017fc:	08008ecc 	.word	0x08008ecc
 8001800:	20000124 	.word	0x20000124
 8001804:	08008f44 	.word	0x08008f44
 8001808:	08008f4c 	.word	0x08008f4c
 800180c:	08008f50 	.word	0x08008f50
 8001810:	08008f54 	.word	0x08008f54
 8001814:	08008f58 	.word	0x08008f58
 8001818:	20000014 	.word	0x20000014
 800181c:	2000013d 	.word	0x2000013d
 8001820:	20000110 	.word	0x20000110

08001824 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	dd0f      	ble.n	8001854 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	461a      	mov	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3301      	adds	r3, #1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	3b30      	subs	r3, #48	; 0x30
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e003      	b.n	800185c <getnumber+0x38>
	else
		value = p[0] - 48;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	3b30      	subs	r3, #48	; 0x30
 800185a:	60fb      	str	r3, [r7, #12]

	return value;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	b2db      	uxtb	r3, r3

}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <rtc_task>:

void rtc_task(void *param)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b09b      	sub	sp, #108	; 0x6c
 8001870:	af02      	add	r7, sp, #8
 8001872:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001874:	4bb2      	ldr	r3, [pc, #712]	; (8001b40 <rtc_task+0x2d4>)
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8001878:	4bb2      	ldr	r3, [pc, #712]	; (8001b44 <rtc_task+0x2d8>)
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 800187c:	4bb2      	ldr	r3, [pc, #712]	; (8001b48 <rtc_task+0x2dc>)
 800187e:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001880:	4bb2      	ldr	r3, [pc, #712]	; (8001b4c <rtc_task+0x2e0>)
 8001882:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001884:	4bb2      	ldr	r3, [pc, #712]	; (8001b50 <rtc_task+0x2e4>)
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001888:	4bb2      	ldr	r3, [pc, #712]	; (8001b54 <rtc_task+0x2e8>)
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 800188c:	4bb2      	ldr	r3, [pc, #712]	; (8001b58 <rtc_task+0x2ec>)
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001890:	4bb2      	ldr	r3, [pc, #712]	; (8001b5c <rtc_task+0x2f0>)
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001894:	4bb2      	ldr	r3, [pc, #712]	; (8001b60 <rtc_task+0x2f4>)
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001898:	4bb2      	ldr	r3, [pc, #712]	; (8001b64 <rtc_task+0x2f8>)
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 800189c:	4bb2      	ldr	r3, [pc, #712]	; (8001b68 <rtc_task+0x2fc>)
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2300      	movs	r3, #0
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	2000      	movs	r0, #0
 80018ae:	f004 fe7b 	bl	80065a8 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 80018b2:	4bae      	ldr	r3, [pc, #696]	; (8001b6c <rtc_task+0x300>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80018ba:	2300      	movs	r3, #0
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	f003 fbbe 	bl	8005040 <xQueueGenericSend>
		show_time_date();
 80018c4:	f7ff fbb8 	bl	8001038 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 80018c8:	4ba8      	ldr	r3, [pc, #672]	; (8001b6c <rtc_task+0x300>)
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80018d0:	2300      	movs	r3, #0
 80018d2:	f04f 32ff 	mov.w	r2, #4294967295
 80018d6:	f003 fbb3 	bl	8005040 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 80018da:	bf00      	nop
 80018dc:	e1e2      	b.n	8001ca4 <rtc_task+0x438>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80018de:	f107 0320 	add.w	r3, r7, #32
 80018e2:	f04f 32ff 	mov.w	r2, #4294967295
 80018e6:	9200      	str	r2, [sp, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	2000      	movs	r0, #0
 80018ee:	f004 fe5b 	bl	80065a8 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 80018f6:	4b9e      	ldr	r3, [pc, #632]	; (8001b70 <rtc_task+0x304>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	3b02      	subs	r3, #2
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	f200 81d1 	bhi.w	8001ca4 <rtc_task+0x438>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <rtc_task+0x9c>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001919 	.word	0x08001919
 800190c:	080019cb 	.word	0x080019cb
 8001910:	08001ab9 	.word	0x08001ab9
 8001914:	08001c21 	.word	0x08001c21
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 8001918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d148      	bne.n	80019b2 <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 8001920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	3b30      	subs	r3, #48	; 0x30
 8001926:	653b      	str	r3, [r7, #80]	; 0x50
 8001928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800192a:	2b03      	cmp	r3, #3
 800192c:	d835      	bhi.n	800199a <rtc_task+0x12e>
 800192e:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <rtc_task+0xc8>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	08001945 	.word	0x08001945
 8001938:	0800195f 	.word	0x0800195f
 800193c:	08001979 	.word	0x08001979
 8001940:	08001993 	.word	0x08001993
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001944:	4b8a      	ldr	r3, [pc, #552]	; (8001b70 <rtc_task+0x304>)
 8001946:	2203      	movs	r2, #3
 8001948:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 800194a:	4b88      	ldr	r3, [pc, #544]	; (8001b6c <rtc_task+0x300>)
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001952:	2300      	movs	r3, #0
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	f003 fb72 	bl	8005040 <xQueueGenericSend>
							break;
 800195c:	e034      	b.n	80019c8 <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 800195e:	4b84      	ldr	r3, [pc, #528]	; (8001b70 <rtc_task+0x304>)
 8001960:	2204      	movs	r2, #4
 8001962:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 8001964:	4b81      	ldr	r3, [pc, #516]	; (8001b6c <rtc_task+0x300>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800196c:	2300      	movs	r3, #0
 800196e:	f04f 32ff 	mov.w	r2, #4294967295
 8001972:	f003 fb65 	bl	8005040 <xQueueGenericSend>
							break;
 8001976:	e027      	b.n	80019c8 <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 8001978:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <rtc_task+0x304>)
 800197a:	2205      	movs	r2, #5
 800197c:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 800197e:	4b7b      	ldr	r3, [pc, #492]	; (8001b6c <rtc_task+0x300>)
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001986:	2300      	movs	r3, #0
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	f003 fb58 	bl	8005040 <xQueueGenericSend>
							break;
 8001990:	e01a      	b.n	80019c8 <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 8001992:	4b77      	ldr	r3, [pc, #476]	; (8001b70 <rtc_task+0x304>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
							break;
 8001998:	e016      	b.n	80019c8 <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 800199a:	4b75      	ldr	r3, [pc, #468]	; (8001b70 <rtc_task+0x304>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80019a0:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <rtc_task+0x300>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	f04f 32ff 	mov.w	r2, #4294967295
 80019aa:	4972      	ldr	r1, [pc, #456]	; (8001b74 <rtc_task+0x308>)
 80019ac:	f003 fb48 	bl	8005040 <xQueueGenericSend>
 80019b0:	e178      	b.n	8001ca4 <rtc_task+0x438>
						}

					}else{
						curr_state = sMainMenu;
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <rtc_task+0x304>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80019b8:	4b6c      	ldr	r3, [pc, #432]	; (8001b6c <rtc_task+0x300>)
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	f04f 32ff 	mov.w	r2, #4294967295
 80019c2:	496c      	ldr	r1, [pc, #432]	; (8001b74 <rtc_task+0x308>)
 80019c4:	f003 fb3c 	bl	8005040 <xQueueGenericSend>
					}
					break;}
 80019c8:	e16c      	b.n	8001ca4 <rtc_task+0x438>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 80019ca:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <rtc_task+0x30c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d03b      	beq.n	8001a4a <rtc_task+0x1de>
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	f300 8166 	bgt.w	8001ca4 <rtc_task+0x438>
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <rtc_task+0x176>
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d01a      	beq.n	8001a16 <rtc_task+0x1aa>
 80019e0:	e160      	b.n	8001ca4 <rtc_task+0x438>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 80019e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f7ff ff1a 	bl	8001824 <getnumber>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 80019f6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80019fa:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 80019fc:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <rtc_task+0x30c>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 8001a02:	4b5a      	ldr	r3, [pc, #360]	; (8001b6c <rtc_task+0x300>)
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	f003 fb16 	bl	8005040 <xQueueGenericSend>
								break;}
 8001a14:	e04f      	b.n	8001ab6 <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 8001a16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f7ff ff00 	bl	8001824 <getnumber>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 8001a2a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001a2e:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 8001a30:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <rtc_task+0x30c>)
 8001a32:	2202      	movs	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 8001a36:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <rtc_task+0x300>)
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	f003 fafc 	bl	8005040 <xQueueGenericSend>
								break;}
 8001a48:	e035      	b.n	8001ab6 <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 8001a4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f7ff fee6 	bl	8001824 <getnumber>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 8001a5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a62:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fb78 	bl	8001160 <validate_rtc_information>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d110      	bne.n	8001a98 <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fb48 	bl	8001110 <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <rtc_task+0x300>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8e:	f003 fad7 	bl	8005040 <xQueueGenericSend>
									show_time_date();
 8001a92:	f7ff fad1 	bl	8001038 <show_time_date>
 8001a96:	e007      	b.n	8001aa8 <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a98:	4b34      	ldr	r3, [pc, #208]	; (8001b6c <rtc_task+0x300>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa2:	4934      	ldr	r1, [pc, #208]	; (8001b74 <rtc_task+0x308>)
 8001aa4:	f003 facc 	bl	8005040 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001aa8:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <rtc_task+0x304>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <rtc_task+0x30c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
								break;}
 8001ab4:	bf00      	nop
						}

					break;}
 8001ab6:	e0f5      	b.n	8001ca4 <rtc_task+0x438>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <rtc_task+0x30c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	f200 80f1 	bhi.w	8001ca4 <rtc_task+0x438>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <rtc_task+0x25c>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001b0d 	.word	0x08001b0d
 8001ad0:	08001bb1 	.word	0x08001bb1
 8001ad4:	08001b7d 	.word	0x08001b7d
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 8001ad8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f7ff fe9f 	bl	8001824 <getnumber>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8001aec:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001af0:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <rtc_task+0x30c>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <rtc_task+0x300>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001b00:	2300      	movs	r3, #0
 8001b02:	f04f 32ff 	mov.w	r2, #4294967295
 8001b06:	f003 fa9b 	bl	8005040 <xQueueGenericSend>
								break;}
 8001b0a:	e088      	b.n	8001c1e <rtc_task+0x3b2>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 8001b0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	4619      	mov	r1, r3
 8001b14:	4610      	mov	r0, r2
 8001b16:	f7ff fe85 	bl	8001824 <getnumber>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 8001b20:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001b24:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <rtc_task+0x30c>)
 8001b28:	2203      	movs	r2, #3
 8001b2a:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <rtc_task+0x300>)
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b34:	2300      	movs	r3, #0
 8001b36:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3a:	f003 fa81 	bl	8005040 <xQueueGenericSend>
								break;}
 8001b3e:	e06e      	b.n	8001c1e <rtc_task+0x3b2>
 8001b40:	08008f5c 	.word	0x08008f5c
 8001b44:	08008fa8 	.word	0x08008fa8
 8001b48:	0800904c 	.word	0x0800904c
 8001b4c:	08009060 	.word	0x08009060
 8001b50:	08009078 	.word	0x08009078
 8001b54:	08009090 	.word	0x08009090
 8001b58:	080090a4 	.word	0x080090a4
 8001b5c:	080090b8 	.word	0x080090b8
 8001b60:	080090d0 	.word	0x080090d0
 8001b64:	080090e4 	.word	0x080090e4
 8001b68:	08009100 	.word	0x08009100
 8001b6c:	20000124 	.word	0x20000124
 8001b70:	2000013d 	.word	0x2000013d
 8001b74:	20000014 	.word	0x20000014
 8001b78:	200001dc 	.word	0x200001dc
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8001b7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f7ff fe4d 	bl	8001824 <getnumber>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8001b90:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b94:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001b96:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <rtc_task+0x458>)
 8001b98:	2202      	movs	r2, #2
 8001b9a:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001b9c:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <rtc_task+0x45c>)
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8001baa:	f003 fa49 	bl	8005040 <xQueueGenericSend>
								break;}
 8001bae:	e036      	b.n	8001c1e <rtc_task+0x3b2>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8001bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f7ff fe33 	bl	8001824 <getnumber>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8001bc4:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001bc8:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fac5 	bl	8001160 <validate_rtc_information>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d110      	bne.n	8001bfe <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff faad 	bl	8001140 <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001be6:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <rtc_task+0x45c>)
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	f003 fa24 	bl	8005040 <xQueueGenericSend>
									show_time_date();
 8001bf8:	f7ff fa1e 	bl	8001038 <show_time_date>
 8001bfc:	e007      	b.n	8001c0e <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001bfe:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <rtc_task+0x45c>)
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	2300      	movs	r3, #0
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	4930      	ldr	r1, [pc, #192]	; (8001ccc <rtc_task+0x460>)
 8001c0a:	f003 fa19 	bl	8005040 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <rtc_task+0x464>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <rtc_task+0x458>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
								break;}
 8001c1a:	bf00      	nop
 8001c1c:	e042      	b.n	8001ca4 <rtc_task+0x438>
						}


					break;}
 8001c1e:	e041      	b.n	8001ca4 <rtc_task+0x438>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d131      	bne.n	8001c8c <rtc_task+0x420>
					{
						if(cmd->payload[0] == 'y'){
 8001c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b79      	cmp	r3, #121	; 0x79
 8001c2e:	d115      	bne.n	8001c5c <rtc_task+0x3f0>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <rtc_task+0x468>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f005 faed 	bl	8007214 <xTimerIsTimerActive>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d12d      	bne.n	8001c9c <rtc_task+0x430>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <rtc_task+0x468>)
 8001c42:	681c      	ldr	r4, [r3, #0]
 8001c44:	f004 f908 	bl	8005e58 <xTaskGetTickCount>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2300      	movs	r3, #0
 8001c52:	2101      	movs	r1, #1
 8001c54:	4620      	mov	r0, r4
 8001c56:	f004 fffd 	bl	8006c54 <xTimerGenericCommand>
 8001c5a:	e01f      	b.n	8001c9c <rtc_task+0x430>
						}else if (cmd->payload[0] == 'n'){
 8001c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b6e      	cmp	r3, #110	; 0x6e
 8001c62:	d10a      	bne.n	8001c7a <rtc_task+0x40e>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <rtc_task+0x468>)
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2200      	movs	r2, #0
 8001c72:	2103      	movs	r1, #3
 8001c74:	f004 ffee 	bl	8006c54 <xTimerGenericCommand>
 8001c78:	e010      	b.n	8001c9c <rtc_task+0x430>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <rtc_task+0x45c>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	4911      	ldr	r1, [pc, #68]	; (8001ccc <rtc_task+0x460>)
 8001c86:	f003 f9db 	bl	8005040 <xQueueGenericSend>
 8001c8a:	e007      	b.n	8001c9c <rtc_task+0x430>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <rtc_task+0x45c>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	2300      	movs	r3, #0
 8001c92:	f04f 32ff 	mov.w	r2, #4294967295
 8001c96:	490d      	ldr	r1, [pc, #52]	; (8001ccc <rtc_task+0x460>)
 8001c98:	f003 f9d2 	bl	8005040 <xQueueGenericSend>

					curr_state = sMainMenu;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <rtc_task+0x464>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
					break;}
 8001ca2:	bf00      	nop
		while(curr_state != sMainMenu){
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <rtc_task+0x464>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f47f ae18 	bne.w	80018de <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <rtc_task+0x46c>)
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	f004 fcf4 	bl	80066a8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001cc0:	e5ee      	b.n	80018a0 <rtc_task+0x34>
 8001cc2:	bf00      	nop
 8001cc4:	200001dc 	.word	0x200001dc
 8001cc8:	20000124 	.word	0x20000124
 8001ccc:	20000014 	.word	0x20000014
 8001cd0:	2000013d 	.word	0x2000013d
 8001cd4:	20000138 	.word	0x20000138
 8001cd8:	20000110 	.word	0x20000110

08001cdc <print_task>:
}



void print_task(void *param)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <print_task+0x38>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f107 010c 	add.w	r1, r7, #12
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fb4d 	bl	8005390 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001cf6:	68fc      	ldr	r4, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fa72 	bl	80001e4 <strlen>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	4621      	mov	r1, r4
 8001d0a:	4803      	ldr	r0, [pc, #12]	; (8001d18 <print_task+0x3c>)
 8001d0c:	f001 ffcf 	bl	8003cae <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001d10:	e7e8      	b.n	8001ce4 <print_task+0x8>
 8001d12:	bf00      	nop
 8001d14:	20000124 	.word	0x20000124
 8001d18:	200000c8 	.word	0x200000c8

08001d1c <cmd_handler_task>:
}



void cmd_handler_task(void *param)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1){
		/*Implement notify wait */
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2000      	movs	r0, #0
 8001d32:	f004 fc39 	bl	80065a8 <xTaskGenericNotifyWait>
 8001d36:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d1f2      	bne.n	8001d24 <cmd_handler_task+0x8>
			/*process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f802 	bl	8001d4c <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001d48:	e7ec      	b.n	8001d24 <cmd_handler_task+0x8>
	...

08001d4c <process_command>:

}


void process_command(command_t *cmd)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f835 	bl	8001dc4 <extract_command>

	switch(curr_state)
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <process_command+0x68>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	dc24      	bgt.n	8001dac <process_command+0x60>
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	da18      	bge.n	8001d98 <process_command+0x4c>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <process_command+0x24>
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d00a      	beq.n	8001d84 <process_command+0x38>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;

	}

}
 8001d6e:	e01d      	b.n	8001dac <process_command+0x60>
			xTaskNotify(handle_menu_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <process_command+0x6c>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	2300      	movs	r3, #0
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	f004 fc93 	bl	80066a8 <xTaskGenericNotify>
		break;
 8001d82:	e013      	b.n	8001dac <process_command+0x60>
			xTaskNotify(handle_led_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <process_command+0x70>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	2303      	movs	r3, #3
 8001d90:	2100      	movs	r1, #0
 8001d92:	f004 fc89 	bl	80066a8 <xTaskGenericNotify>
		break;
 8001d96:	e009      	b.n	8001dac <process_command+0x60>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <process_command+0x74>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2303      	movs	r3, #3
 8001da4:	2100      	movs	r1, #0
 8001da6:	f004 fc7f 	bl	80066a8 <xTaskGenericNotify>
		break;
 8001daa:	bf00      	nop
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000013d 	.word	0x2000013d
 8001db8:	20000110 	.word	0x20000110
 8001dbc:	20000118 	.word	0x20000118
 8001dc0:	2000011c 	.word	0x2000011c

08001dc4 <extract_command>:


int extract_command(command_t *cmd)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t  status;

	status = uxQueueMessagesWaiting(q_data );
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <extract_command+0x70>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fc4c 	bl	800566e <uxQueueMessagesWaiting>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <extract_command+0x22>
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
 8001de4:	e022      	b.n	8001e2c <extract_command+0x68>
	uint8_t i =0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data,&item,0);
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <extract_command+0x70>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f107 010f 	add.w	r1, r7, #15
 8001df2:	2200      	movs	r2, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 facb 	bl	8005390 <xQueueReceive>
 8001dfa:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d106      	bne.n	8001e10 <extract_command+0x4c>
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	75fa      	strb	r2, [r7, #23]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	7bf9      	ldrb	r1, [r7, #15]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	2b0a      	cmp	r3, #10
 8001e14:	d1e9      	bne.n	8001dea <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1; /*save  length of the command excluding null char */
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60da      	str	r2, [r3, #12]

	return 0;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000120 	.word	0x20000120

08001e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e40:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e54:	4c0b      	ldr	r4, [pc, #44]	; (8001e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e62:	f7ff fbc3 	bl	80015ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e66:	f005 ffe9 	bl	8007e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7fe fccd 	bl	8000808 <main>
  bx  lr    
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001e7c:	08009198 	.word	0x08009198
  ldr r2, =_sbss
 8001e80:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001e84:	200194d8 	.word	0x200194d8

08001e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC_IRQHandler>
	...

08001e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <HAL_Init+0x40>)
 8001e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_Init+0x40>)
 8001ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <HAL_Init+0x40>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 f8d8 	bl	800206a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fa24 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec0:	f7ff f980 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023c00 	.word	0x40023c00

08001ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x20>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_IncTick+0x24>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_IncTick+0x24>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	2000001c 	.word	0x2000001c
 8001ef4:	200001e0 	.word	0x200001e0

08001ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return uwTick;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_GetTick+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	200001e0 	.word	0x200001e0

08001f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4907      	ldr	r1, [pc, #28]	; (8001fac <__NVIC_EnableIRQ+0x38>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff4c 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002092:	f7ff ff61 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 8002096:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	6978      	ldr	r0, [r7, #20]
 800209e:	f7ff ffb1 	bl	8002004 <NVIC_EncodePriority>
 80020a2:	4602      	mov	r2, r0
 80020a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff80 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020b0:	bf00      	nop
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff54 	bl	8001f74 <__NVIC_EnableIRQ>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020e2:	f7ff ff09 	bl	8001ef8 <HAL_GetTick>
 80020e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d008      	beq.n	8002106 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e052      	b.n	80021ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0216 	bic.w	r2, r2, #22
 8002114:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002124:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <HAL_DMA_Abort+0x62>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0208 	bic.w	r2, r2, #8
 8002144:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002156:	e013      	b.n	8002180 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002158:	f7ff fece 	bl	8001ef8 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b05      	cmp	r3, #5
 8002164:	d90c      	bls.n	8002180 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2220      	movs	r2, #32
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2203      	movs	r2, #3
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e015      	b.n	80021ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1e4      	bne.n	8002158 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	223f      	movs	r2, #63	; 0x3f
 8002194:	409a      	lsls	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d004      	beq.n	80021d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00c      	b.n	80021ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2205      	movs	r2, #5
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e16b      	b.n	80024ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	f040 815a 	bne.w	80024e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d005      	beq.n	800224a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002246:	2b02      	cmp	r3, #2
 8002248:	d130      	bne.n	80022ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 0201 	and.w	r2, r3, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d017      	beq.n	80022e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d123      	bne.n	800233c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	69b9      	ldr	r1, [r7, #24]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80b4 	beq.w	80024e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b60      	ldr	r3, [pc, #384]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a5f      	ldr	r2, [pc, #380]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239a:	4a5b      	ldr	r2, [pc, #364]	; (8002508 <HAL_GPIO_Init+0x310>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_GPIO_Init+0x314>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x226>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_GPIO_Init+0x318>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x222>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a50      	ldr	r2, [pc, #320]	; (8002514 <HAL_GPIO_Init+0x31c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x21e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x320>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x21a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_Init+0x324>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x216>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4d      	ldr	r2, [pc, #308]	; (8002520 <HAL_GPIO_Init+0x328>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x212>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_GPIO_Init+0x32c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4b      	ldr	r2, [pc, #300]	; (8002528 <HAL_GPIO_Init+0x330>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x20a>
 80023fe:	2307      	movs	r3, #7
 8002400:	e00e      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002402:	2308      	movs	r3, #8
 8002404:	e00c      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002406:	2306      	movs	r3, #6
 8002408:	e00a      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800240a:	2305      	movs	r3, #5
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800240e:	2304      	movs	r3, #4
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800241e:	2300      	movs	r3, #0
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f002 0203 	and.w	r2, r2, #3
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	4093      	lsls	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002430:	4935      	ldr	r1, [pc, #212]	; (8002508 <HAL_GPIO_Init+0x310>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_GPIO_Init+0x334>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002462:	4a32      	ldr	r2, [pc, #200]	; (800252c <HAL_GPIO_Init+0x334>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_GPIO_Init+0x334>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800248c:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_GPIO_Init+0x334>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_GPIO_Init+0x334>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b6:	4a1d      	ldr	r2, [pc, #116]	; (800252c <HAL_GPIO_Init+0x334>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_GPIO_Init+0x334>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e0:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_GPIO_Init+0x334>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	f67f ae90 	bls.w	8002214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40013800 	.word	0x40013800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020400 	.word	0x40020400
 8002514:	40020800 	.word	0x40020800
 8002518:	40020c00 	.word	0x40020c00
 800251c:	40021000 	.word	0x40021000
 8002520:	40021400 	.word	0x40021400
 8002524:	40021800 	.word	0x40021800
 8002528:	40021c00 	.word	0x40021c00
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800254c:	e003      	b.n	8002556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	041a      	lsls	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	619a      	str	r2, [r3, #24]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e267      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d075      	beq.n	800266e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002582:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b04      	cmp	r3, #4
 800258c:	d00c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258e:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002596:	2b08      	cmp	r3, #8
 8002598:	d112      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259a:	4b82      	ldr	r3, [pc, #520]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a6:	d10b      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	4b7e      	ldr	r3, [pc, #504]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d05b      	beq.n	800266c <HAL_RCC_OscConfig+0x108>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d157      	bne.n	800266c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e242      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x74>
 80025ca:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a75      	ldr	r2, [pc, #468]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e01d      	b.n	8002614 <HAL_RCC_OscConfig+0xb0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x98>
 80025e2:	4b70      	ldr	r3, [pc, #448]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6f      	ldr	r2, [pc, #444]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6c      	ldr	r2, [pc, #432]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0xb0>
 80025fc:	4b69      	ldr	r3, [pc, #420]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a68      	ldr	r2, [pc, #416]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b66      	ldr	r3, [pc, #408]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a65      	ldr	r2, [pc, #404]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 800260e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff fc6c 	bl	8001ef8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff fc68 	bl	8001ef8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e207      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	4b5b      	ldr	r3, [pc, #364]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0xc0>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fc58 	bl	8001ef8 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264c:	f7ff fc54 	bl	8001ef8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e1f3      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0xe8>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267a:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268e:	2b08      	cmp	r3, #8
 8002690:	d11c      	bne.n	80026cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d116      	bne.n	80026cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x152>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1c7      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4937      	ldr	r1, [pc, #220]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	e03a      	b.n	8002742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d4:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_RCC_OscConfig+0x244>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7ff fc0d 	bl	8001ef8 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e2:	f7ff fc09 	bl	8001ef8 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1a8      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4925      	ldr	r1, [pc, #148]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_OscConfig+0x244>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7ff fbec 	bl	8001ef8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002724:	f7ff fbe8 	bl	8001ef8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e187      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d036      	beq.n	80027bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_RCC_OscConfig+0x248>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7ff fbcc 	bl	8001ef8 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002764:	f7ff fbc8 	bl	8001ef8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e167      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_OscConfig+0x240>)
 8002778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x200>
 8002782:	e01b      	b.n	80027bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_OscConfig+0x248>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7ff fbb5 	bl	8001ef8 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	e00e      	b.n	80027b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002792:	f7ff fbb1 	bl	8001ef8 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d907      	bls.n	80027b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e150      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
 80027a4:	40023800 	.word	0x40023800
 80027a8:	42470000 	.word	0x42470000
 80027ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b0:	4b88      	ldr	r3, [pc, #544]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ea      	bne.n	8002792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8097 	beq.w	80028f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ce:	4b81      	ldr	r3, [pc, #516]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b7d      	ldr	r3, [pc, #500]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a7c      	ldr	r2, [pc, #496]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b7a      	ldr	r3, [pc, #488]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fa:	4b77      	ldr	r3, [pc, #476]	; (80029d8 <HAL_RCC_OscConfig+0x474>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d118      	bne.n	8002838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002806:	4b74      	ldr	r3, [pc, #464]	; (80029d8 <HAL_RCC_OscConfig+0x474>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a73      	ldr	r2, [pc, #460]	; (80029d8 <HAL_RCC_OscConfig+0x474>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002812:	f7ff fb71 	bl	8001ef8 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7ff fb6d 	bl	8001ef8 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e10c      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <HAL_RCC_OscConfig+0x474>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x2ea>
 8002840:	4b64      	ldr	r3, [pc, #400]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a63      	ldr	r2, [pc, #396]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x324>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x30c>
 8002856:	4b5f      	ldr	r3, [pc, #380]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a5e      	ldr	r2, [pc, #376]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	4a5b      	ldr	r2, [pc, #364]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6713      	str	r3, [r2, #112]	; 0x70
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0x324>
 8002870:	4b58      	ldr	r3, [pc, #352]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a57      	ldr	r2, [pc, #348]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002876:	f023 0301 	bic.w	r3, r3, #1
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
 800287c:	4b55      	ldr	r3, [pc, #340]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a54      	ldr	r2, [pc, #336]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002882:	f023 0304 	bic.w	r3, r3, #4
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7ff fb32 	bl	8001ef8 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7ff fb2e 	bl	8001ef8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0cb      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ae:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0ee      	beq.n	8002898 <HAL_RCC_OscConfig+0x334>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028bc:	f7ff fb1c 	bl	8001ef8 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7ff fb18 	bl	8001ef8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0b5      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028da:	4b3e      	ldr	r3, [pc, #248]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ee      	bne.n	80028c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a1 	beq.w	8002a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002902:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b08      	cmp	r3, #8
 800290c:	d05c      	beq.n	80029c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d141      	bne.n	800299a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_RCC_OscConfig+0x478>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff faec 	bl	8001ef8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002924:	f7ff fae8 	bl	8001ef8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e087      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	019b      	lsls	r3, r3, #6
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	085b      	lsrs	r3, r3, #1
 800295a:	3b01      	subs	r3, #1
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	491b      	ldr	r1, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x478>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7ff fac1 	bl	8001ef8 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297a:	f7ff fabd 	bl	8001ef8 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e05c      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x416>
 8002998:	e054      	b.n	8002a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_RCC_OscConfig+0x478>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7ff faaa 	bl	8001ef8 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff faa6 	bl	8001ef8 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e045      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_RCC_OscConfig+0x470>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x444>
 80029c6:	e03d      	b.n	8002a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e038      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000
 80029dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_RCC_OscConfig+0x4ec>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d028      	beq.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d121      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d11a      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a10:	4013      	ands	r3, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d111      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800

08002a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0cc      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d90c      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a52      	ldr	r2, [pc, #328]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	494d      	ldr	r1, [pc, #308]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d044      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d119      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e067      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4934      	ldr	r1, [pc, #208]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b44:	f7ff f9d8 	bl	8001ef8 <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7ff f9d4 	bl	8001ef8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e04f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d20c      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e032      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4916      	ldr	r1, [pc, #88]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bda:	f000 f821 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490a      	ldr	r1, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fb84 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023c00 	.word	0x40023c00
 8002c10:	40023800 	.word	0x40023800
 8002c14:	0800913c 	.word	0x0800913c
 8002c18:	20000010 	.word	0x20000010
 8002c1c:	20000018 	.word	0x20000018

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c24:	b094      	sub	sp, #80	; 0x50
 8002c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c30:	2300      	movs	r3, #0
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c38:	4b79      	ldr	r3, [pc, #484]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d00d      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x40>
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	f200 80e1 	bhi.w	8002e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x34>
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c52:	e0db      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c58:	e0db      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c5e:	e0d8      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c60:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d063      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c76:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	099b      	lsrs	r3, r3, #6
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c88:	633b      	str	r3, [r7, #48]	; 0x30
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c92:	4622      	mov	r2, r4
 8002c94:	462b      	mov	r3, r5
 8002c96:	f04f 0000 	mov.w	r0, #0
 8002c9a:	f04f 0100 	mov.w	r1, #0
 8002c9e:	0159      	lsls	r1, r3, #5
 8002ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca4:	0150      	lsls	r0, r2, #5
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4621      	mov	r1, r4
 8002cac:	1a51      	subs	r1, r2, r1
 8002cae:	6139      	str	r1, [r7, #16]
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	018b      	lsls	r3, r1, #6
 8002cc8:	4651      	mov	r1, sl
 8002cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cce:	4651      	mov	r1, sl
 8002cd0:	018a      	lsls	r2, r1, #6
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8002cd8:	4659      	mov	r1, fp
 8002cda:	eb63 0901 	sbc.w	r9, r3, r1
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf2:	4690      	mov	r8, r2
 8002cf4:	4699      	mov	r9, r3
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	eb18 0303 	adds.w	r3, r8, r3
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	462b      	mov	r3, r5
 8002d00:	eb49 0303 	adc.w	r3, r9, r3
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d12:	4629      	mov	r1, r5
 8002d14:	024b      	lsls	r3, r1, #9
 8002d16:	4621      	mov	r1, r4
 8002d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	024a      	lsls	r2, r1, #9
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d26:	2200      	movs	r2, #0
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d30:	f7fd fab6 	bl	80002a0 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4613      	mov	r3, r2
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d3c:	e058      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3e:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	099b      	lsrs	r3, r3, #6
 8002d44:	2200      	movs	r2, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	4611      	mov	r1, r2
 8002d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
 8002d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d58:	4642      	mov	r2, r8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	f04f 0000 	mov.w	r0, #0
 8002d60:	f04f 0100 	mov.w	r1, #0
 8002d64:	0159      	lsls	r1, r3, #5
 8002d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6a:	0150      	lsls	r0, r2, #5
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4641      	mov	r1, r8
 8002d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d76:	4649      	mov	r1, r9
 8002d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d90:	ebb2 040a 	subs.w	r4, r2, sl
 8002d94:	eb63 050b 	sbc.w	r5, r3, fp
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	00eb      	lsls	r3, r5, #3
 8002da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da6:	00e2      	lsls	r2, r4, #3
 8002da8:	4614      	mov	r4, r2
 8002daa:	461d      	mov	r5, r3
 8002dac:	4643      	mov	r3, r8
 8002dae:	18e3      	adds	r3, r4, r3
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	464b      	mov	r3, r9
 8002db4:	eb45 0303 	adc.w	r3, r5, r3
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	028b      	lsls	r3, r1, #10
 8002dca:	4621      	mov	r1, r4
 8002dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	028a      	lsls	r2, r1, #10
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	61fa      	str	r2, [r7, #28]
 8002de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de4:	f7fd fa5c 	bl	80002a0 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4613      	mov	r3, r2
 8002dee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e0a:	e002      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3750      	adds	r7, #80	; 0x50
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	00f42400 	.word	0x00f42400
 8002e28:	007a1200 	.word	0x007a1200

08002e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000010 	.word	0x20000010

08002e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e48:	f7ff fff0 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	0a9b      	lsrs	r3, r3, #10
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	4903      	ldr	r1, [pc, #12]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	0800914c 	.word	0x0800914c

08002e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e70:	f7ff ffdc 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0b5b      	lsrs	r3, r3, #13
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	4903      	ldr	r1, [pc, #12]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	0800914c 	.word	0x0800914c

08002e94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0203 	and.w	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_RCC_GetClockConfig+0x60>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0207 	and.w	r2, r3, #7
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	601a      	str	r2, [r3, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40023c00 	.word	0x40023c00

08002ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d035      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f20:	4b62      	ldr	r3, [pc, #392]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f26:	f7fe ffe7 	bl	8001ef8 <HAL_GetTick>
 8002f2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f2e:	f7fe ffe3 	bl	8001ef8 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0b0      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f40:	4b5b      	ldr	r3, [pc, #364]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	019a      	lsls	r2, r3, #6
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	071b      	lsls	r3, r3, #28
 8002f58:	4955      	ldr	r1, [pc, #340]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f60:	4b52      	ldr	r3, [pc, #328]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f66:	f7fe ffc7 	bl	8001ef8 <HAL_GetTick>
 8002f6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f6e:	f7fe ffc3 	bl	8001ef8 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e090      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f80:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8083 	beq.w	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b44      	ldr	r3, [pc, #272]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a43      	ldr	r2, [pc, #268]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a3e      	ldr	r2, [pc, #248]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fc2:	f7fe ff99 	bl	8001ef8 <HAL_GetTick>
 8002fc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fe ff95 	bl	8001ef8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e062      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fdc:	4b35      	ldr	r3, [pc, #212]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d02f      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	429a      	cmp	r2, r3
 8003004:	d028      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003006:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003022:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d114      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800302e:	f7fe ff63 	bl	8001ef8 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003034:	e00a      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fe ff5f 	bl	8001ef8 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	; 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e02a      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304c:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ee      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003064:	d10d      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307a:	490d      	ldr	r1, [pc, #52]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800307c:	4313      	orrs	r3, r2
 800307e:	608b      	str	r3, [r1, #8]
 8003080:	e005      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003088:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800308c:	6093      	str	r3, [r2, #8]
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003090:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309a:	4905      	ldr	r1, [pc, #20]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800309c:	4313      	orrs	r3, r2
 800309e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	42470068 	.word	0x42470068
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40007000 	.word	0x40007000
 80030b8:	42470e40 	.word	0x42470e40

080030bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e066      	b.n	80031a0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7f5b      	ldrb	r3, [r3, #29]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe f896 	bl	8001214 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	22ca      	movs	r2, #202	; 0xca
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2253      	movs	r2, #83	; 0x53
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fa45 	bl	800358e <RTC_EnterInitMode>
 8003104:	4603      	mov	r3, r0
 8003106:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d12c      	bne.n	8003168 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800311c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003120:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6899      	ldr	r1, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68d2      	ldr	r2, [r2, #12]
 8003148:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6919      	ldr	r1, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	041a      	lsls	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fa4c 	bl	80035fc <RTC_ExitInitMode>
 8003164:	4603      	mov	r3, r0
 8003166:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d113      	bne.n	8003196 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699a      	ldr	r2, [r3, #24]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	22ff      	movs	r2, #255	; 0xff
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	7f1b      	ldrb	r3, [r3, #28]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_RTC_SetTime+0x1c>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e087      	b.n	80032d4 <HAL_RTC_SetTime+0x12c>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2202      	movs	r2, #2
 80031ce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d126      	bne.n	8003224 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2200      	movs	r2, #0
 80031e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fa29 	bl	8003646 <RTC_ByteToBcd2>
 80031f4:	4603      	mov	r3, r0
 80031f6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	785b      	ldrb	r3, [r3, #1]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fa22 	bl	8003646 <RTC_ByteToBcd2>
 8003202:	4603      	mov	r3, r0
 8003204:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003206:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	789b      	ldrb	r3, [r3, #2]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fa1a 	bl	8003646 <RTC_ByteToBcd2>
 8003212:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003214:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	78db      	ldrb	r3, [r3, #3]
 800321c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e018      	b.n	8003256 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2200      	movs	r2, #0
 8003236:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003244:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800324a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	78db      	ldrb	r3, [r3, #3]
 8003250:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	22ca      	movs	r2, #202	; 0xca
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2253      	movs	r2, #83	; 0x53
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f991 	bl	800358e <RTC_EnterInitMode>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d120      	bne.n	80032b8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003280:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003284:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003294:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f9a4 	bl	80035fc <RTC_ExitInitMode>
 80032b4:	4603      	mov	r3, r0
 80032b6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	771a      	strb	r2, [r3, #28]

  return status;
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800330e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003312:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	0d9b      	lsrs	r3, r3, #22
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11a      	bne.n	800338e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f98f 	bl	8003680 <RTC_Bcd2ToByte>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f986 	bl	8003680 <RTC_Bcd2ToByte>
 8003374:	4603      	mov	r3, r0
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	789b      	ldrb	r3, [r3, #2]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f97d 	bl	8003680 <RTC_Bcd2ToByte>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	7f1b      	ldrb	r3, [r3, #28]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_RTC_SetDate+0x1c>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e071      	b.n	8003498 <HAL_RTC_SetDate+0x100>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2202      	movs	r2, #2
 80033be:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10e      	bne.n	80033e4 <HAL_RTC_SetDate+0x4c>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	f023 0310 	bic.w	r3, r3, #16
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	330a      	adds	r3, #10
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d11c      	bne.n	8003424 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	78db      	ldrb	r3, [r3, #3]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f929 	bl	8003646 <RTC_ByteToBcd2>
 80033f4:	4603      	mov	r3, r0
 80033f6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f922 	bl	8003646 <RTC_ByteToBcd2>
 8003402:	4603      	mov	r3, r0
 8003404:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003406:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	789b      	ldrb	r3, [r3, #2]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f91a 	bl	8003646 <RTC_ByteToBcd2>
 8003412:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003414:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e00e      	b.n	8003442 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	78db      	ldrb	r3, [r3, #3]
 8003428:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003430:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003436:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	22ca      	movs	r2, #202	; 0xca
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2253      	movs	r2, #83	; 0x53
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f89b 	bl	800358e <RTC_EnterInitMode>
 8003458:	4603      	mov	r3, r0
 800345a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10c      	bne.n	800347c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800346c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003470:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f8c2 	bl	80035fc <RTC_ExitInitMode>
 8003478:	4603      	mov	r3, r0
 800347a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	771a      	strb	r2, [r3, #28]

  return status;
 8003496:	7cfb      	ldrb	r3, [r7, #19]
}
 8003498:	4618      	mov	r0, r3
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd90      	pop	{r4, r7, pc}

080034a0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	0b5b      	lsrs	r3, r3, #13
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11a      	bne.n	8003534 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	78db      	ldrb	r3, [r3, #3]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f8bc 	bl	8003680 <RTC_Bcd2ToByte>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	785b      	ldrb	r3, [r3, #1]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 f8b3 	bl	8003680 <RTC_Bcd2ToByte>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	789b      	ldrb	r3, [r3, #2]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f8aa 	bl	8003680 <RTC_Bcd2ToByte>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003558:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800355a:	f7fe fccd 	bl	8001ef8 <HAL_GetTick>
 800355e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003560:	e009      	b.n	8003576 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003562:	f7fe fcc9 	bl	8001ef8 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003570:	d901      	bls.n	8003576 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e007      	b.n	8003586 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ee      	beq.n	8003562 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d122      	bne.n	80035f2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035bc:	f7fe fc9c 	bl	8001ef8 <HAL_GetTick>
 80035c0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035c2:	e00c      	b.n	80035de <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035c4:	f7fe fc98 	bl	8001ef8 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035d2:	d904      	bls.n	80035de <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2204      	movs	r2, #4
 80035d8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <RTC_EnterInitMode+0x64>
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d1e8      	bne.n	80035c4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003616:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff89 	bl	800353e <HAL_RTC_WaitForSynchro>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2204      	movs	r2, #4
 8003636:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003654:	e005      	b.n	8003662 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	3301      	adds	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	3b0a      	subs	r3, #10
 8003660:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	2b09      	cmp	r3, #9
 8003666:	d8f6      	bhi.n	8003656 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	b2da      	uxtb	r2, r3
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	4313      	orrs	r3, r2
 8003672:	b2db      	uxtb	r3, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	0092      	lsls	r2, r2, #2
 8003698:	4413      	add	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	4413      	add	r3, r2
 80036aa:	b2db      	uxtb	r3, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e041      	b.n	800374e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f839 	bl	8003756 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 f9d8 	bl	8003aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d001      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04e      	b.n	8003822 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a23      	ldr	r2, [pc, #140]	; (8003830 <HAL_TIM_Base_Start_IT+0xc4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d022      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ae:	d01d      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <HAL_TIM_Base_Start_IT+0xc8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d018      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <HAL_TIM_Base_Start_IT+0xcc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1c      	ldr	r2, [pc, #112]	; (800383c <HAL_TIM_Base_Start_IT+0xd0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00e      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <HAL_TIM_Base_Start_IT+0xd4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d009      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_TIM_Base_Start_IT+0xd8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d004      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_TIM_Base_Start_IT+0xdc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d111      	bne.n	8003810 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d010      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380e:	e007      	b.n	8003820 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40010000 	.word	0x40010000
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	40000c00 	.word	0x40000c00
 8003840:	40010400 	.word	0x40010400
 8003844:	40014000 	.word	0x40014000
 8003848:	40001800 	.word	0x40001800

0800384c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b02      	cmp	r3, #2
 8003860:	d122      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d11b      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0202 	mvn.w	r2, #2
 8003878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f8ee 	bl	8003a70 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8e0 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8f1 	bl	8003a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d122      	bne.n	80038fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d11b      	bne.n	80038fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0204 	mvn.w	r2, #4
 80038cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8c4 	bl	8003a70 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8b6 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8c7 	bl	8003a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	d122      	bne.n	8003950 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b08      	cmp	r3, #8
 8003916:	d11b      	bne.n	8003950 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0208 	mvn.w	r2, #8
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2204      	movs	r2, #4
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f89a 	bl	8003a70 <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f88c 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f89d 	bl	8003a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b10      	cmp	r3, #16
 800395c:	d122      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b10      	cmp	r3, #16
 800396a:	d11b      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0210 	mvn.w	r2, #16
 8003974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2208      	movs	r2, #8
 800397a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f870 	bl	8003a70 <HAL_TIM_IC_CaptureCallback>
 8003990:	e005      	b.n	800399e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f862 	bl	8003a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f873 	bl	8003a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10e      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d107      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0201 	mvn.w	r2, #1
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fad4 	bl	8000f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b80      	cmp	r3, #128	; 0x80
 80039dc:	d10e      	bne.n	80039fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b80      	cmp	r3, #128	; 0x80
 80039ea:	d107      	bne.n	80039fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f902 	bl	8003c00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d10e      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d107      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f838 	bl	8003a98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d10e      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d107      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0220 	mvn.w	r2, #32
 8003a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f8cc 	bl	8003bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a40      	ldr	r2, [pc, #256]	; (8003bc0 <TIM_Base_SetConfig+0x114>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d00f      	beq.n	8003aec <TIM_Base_SetConfig+0x40>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a3d      	ldr	r2, [pc, #244]	; (8003bc4 <TIM_Base_SetConfig+0x118>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00b      	beq.n	8003aec <TIM_Base_SetConfig+0x40>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a3c      	ldr	r2, [pc, #240]	; (8003bc8 <TIM_Base_SetConfig+0x11c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d007      	beq.n	8003aec <TIM_Base_SetConfig+0x40>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <TIM_Base_SetConfig+0x120>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0x40>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a3a      	ldr	r2, [pc, #232]	; (8003bd0 <TIM_Base_SetConfig+0x124>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d108      	bne.n	8003afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2f      	ldr	r2, [pc, #188]	; (8003bc0 <TIM_Base_SetConfig+0x114>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d02b      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d027      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a2c      	ldr	r2, [pc, #176]	; (8003bc4 <TIM_Base_SetConfig+0x118>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d023      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a2b      	ldr	r2, [pc, #172]	; (8003bc8 <TIM_Base_SetConfig+0x11c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01f      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2a      	ldr	r2, [pc, #168]	; (8003bcc <TIM_Base_SetConfig+0x120>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01b      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a29      	ldr	r2, [pc, #164]	; (8003bd0 <TIM_Base_SetConfig+0x124>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d017      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a28      	ldr	r2, [pc, #160]	; (8003bd4 <TIM_Base_SetConfig+0x128>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <TIM_Base_SetConfig+0x12c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00f      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a26      	ldr	r2, [pc, #152]	; (8003bdc <TIM_Base_SetConfig+0x130>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00b      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <TIM_Base_SetConfig+0x134>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a24      	ldr	r2, [pc, #144]	; (8003be4 <TIM_Base_SetConfig+0x138>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d003      	beq.n	8003b5e <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a23      	ldr	r2, [pc, #140]	; (8003be8 <TIM_Base_SetConfig+0x13c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d108      	bne.n	8003b70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <TIM_Base_SetConfig+0x114>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_Base_SetConfig+0xf8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a0c      	ldr	r2, [pc, #48]	; (8003bd0 <TIM_Base_SetConfig+0x124>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d103      	bne.n	8003bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	615a      	str	r2, [r3, #20]
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800
 8003bcc:	40000c00 	.word	0x40000c00
 8003bd0:	40010400 	.word	0x40010400
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800
 8003be0:	40001800 	.word	0x40001800
 8003be4:	40001c00 	.word	0x40001c00
 8003be8:	40002000 	.word	0x40002000

08003bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e03f      	b.n	8003ca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fb14 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fddf 	bl	800481c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b08a      	sub	sp, #40	; 0x28
 8003cb2:	af02      	add	r7, sp, #8
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d17c      	bne.n	8003dc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_UART_Transmit+0x2c>
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e075      	b.n	8003dca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_UART_Transmit+0x3e>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e06e      	b.n	8003dca <HAL_UART_Transmit+0x11c>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2221      	movs	r2, #33	; 0x21
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d02:	f7fe f8f9 	bl	8001ef8 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d108      	bne.n	8003d30 <HAL_UART_Transmit+0x82>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e003      	b.n	8003d38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d40:	e02a      	b.n	8003d98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2180      	movs	r1, #128	; 0x80
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fb1f 	bl	8004390 <UART_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e036      	b.n	8003dca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	3302      	adds	r3, #2
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	e007      	b.n	8003d8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1cf      	bne.n	8003d42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	2140      	movs	r1, #64	; 0x40
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 faef 	bl	8004390 <UART_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e006      	b.n	8003dca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d11d      	bne.n	8003e28 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_UART_Receive_IT+0x26>
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e016      	b.n	8003e2a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Receive_IT+0x38>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e00f      	b.n	8003e2a <HAL_UART_Receive_IT+0x58>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fb24 	bl	800446c <UART_Start_Receive_IT>
 8003e24:	4603      	mov	r3, r0
 8003e26:	e000      	b.n	8003e2a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b0ba      	sub	sp, #232	; 0xe8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_UART_IRQHandler+0x66>
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fc07 	bl	80046a6 <UART_Receive_IT>
      return;
 8003e98:	e256      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80de 	beq.w	8004060 <HAL_UART_IRQHandler+0x22c>
 8003ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80d1 	beq.w	8004060 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xae>
 8003eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <HAL_UART_IRQHandler+0xd2>
 8003eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f043 0202 	orr.w	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_UART_IRQHandler+0xf6>
 8003f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f043 0204 	orr.w	r2, r3, #4
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d011      	beq.n	8003f5a <HAL_UART_IRQHandler+0x126>
 8003f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0208 	orr.w	r2, r3, #8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 81ed 	beq.w	800433e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_UART_IRQHandler+0x14e>
 8003f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fb92 	bl	80046a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <HAL_UART_IRQHandler+0x17a>
 8003fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04f      	beq.n	800404e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa9a 	bl	80044e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d141      	bne.n	8004046 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3314      	adds	r3, #20
 8003fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1d9      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	2b00      	cmp	r3, #0
 8004014:	d013      	beq.n	800403e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	4a7d      	ldr	r2, [pc, #500]	; (8004210 <HAL_UART_IRQHandler+0x3dc>)
 800401c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe f8c6 	bl	80021b4 <HAL_DMA_Abort_IT>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004038:	4610      	mov	r0, r2
 800403a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	e00e      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f990 	bl	8004364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004044:	e00a      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f98c 	bl	8004364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	e006      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f988 	bl	8004364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800405a:	e170      	b.n	800433e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	bf00      	nop
    return;
 800405e:	e16e      	b.n	800433e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	2b01      	cmp	r3, #1
 8004066:	f040 814a 	bne.w	80042fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8143 	beq.w	80042fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 813c 	beq.w	80042fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	f040 80b4 	bne.w	8004214 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8140 	beq.w	8004342 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ca:	429a      	cmp	r2, r3
 80040cc:	f080 8139 	bcs.w	8004342 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e2:	f000 8088 	beq.w	80041f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004112:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800411e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800412a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1d9      	bne.n	80040e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004156:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800415a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800415e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e1      	bne.n	8004132 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800417e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004192:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004194:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004198:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e3      	bne.n	800416e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80041da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e3      	bne.n	80041b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fd ff6f 	bl	80020d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	b29b      	uxth	r3, r3
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8b6 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800420c:	e099      	b.n	8004342 <HAL_UART_IRQHandler+0x50e>
 800420e:	bf00      	nop
 8004210:	080045af 	.word	0x080045af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421c:	b29b      	uxth	r3, r3
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 808b 	beq.w	8004346 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8086 	beq.w	8004346 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800424a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004250:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800425e:	647a      	str	r2, [r7, #68]	; 0x44
 8004260:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800426c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e3      	bne.n	800423a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	623b      	str	r3, [r7, #32]
   return(result);
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3314      	adds	r3, #20
 8004292:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004296:	633a      	str	r2, [r7, #48]	; 0x30
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800429c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e3      	bne.n	8004272 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0310 	bic.w	r3, r3, #16
 80042ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042dc:	61fa      	str	r2, [r7, #28]
 80042de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	69b9      	ldr	r1, [r7, #24]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	617b      	str	r3, [r7, #20]
   return(result);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e3      	bne.n	80042b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f83e 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042fc:	e023      	b.n	8004346 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_UART_IRQHandler+0x4ea>
 800430a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f95d 	bl	80045d6 <UART_Transmit_IT>
    return;
 800431c:	e014      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00e      	beq.n	8004348 <HAL_UART_IRQHandler+0x514>
 800432a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f99d 	bl	8004676 <UART_EndTransmit_IT>
    return;
 800433c:	e004      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
    return;
 800433e:	bf00      	nop
 8004340:	e002      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
      return;
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <HAL_UART_IRQHandler+0x514>
      return;
 8004346:	bf00      	nop
  }
}
 8004348:	37e8      	adds	r7, #232	; 0xe8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop

08004350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b090      	sub	sp, #64	; 0x40
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a0:	e050      	b.n	8004444 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d04c      	beq.n	8004444 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043b0:	f7fd fda2 	bl	8001ef8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043bc:	429a      	cmp	r2, r3
 80043be:	d241      	bcs.n	8004444 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043e0:	637a      	str	r2, [r7, #52]	; 0x34
 80043e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e5      	bne.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3314      	adds	r3, #20
 80043fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	613b      	str	r3, [r7, #16]
   return(result);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	63bb      	str	r3, [r7, #56]	; 0x38
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004414:	623a      	str	r2, [r7, #32]
 8004416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	69f9      	ldr	r1, [r7, #28]
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	61bb      	str	r3, [r7, #24]
   return(result);
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e00f      	b.n	8004464 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4013      	ands	r3, r2
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	429a      	cmp	r2, r3
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	429a      	cmp	r2, r3
 8004460:	d09f      	beq.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3740      	adds	r7, #64	; 0x40
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2222      	movs	r2, #34	; 0x22
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0220 	orr.w	r2, r2, #32
 80044d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b095      	sub	sp, #84	; 0x54
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004510:	643a      	str	r2, [r7, #64]	; 0x40
 8004512:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e5      	bne.n	80044f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3314      	adds	r3, #20
 800452a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	61fb      	str	r3, [r7, #28]
   return(result);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	64bb      	str	r3, [r7, #72]	; 0x48
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3314      	adds	r3, #20
 8004542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	2b01      	cmp	r3, #1
 800455e:	d119      	bne.n	8004594 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f023 0310 	bic.w	r3, r3, #16
 8004576:	647b      	str	r3, [r7, #68]	; 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004580:	61ba      	str	r2, [r7, #24]
 8004582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	613b      	str	r3, [r7, #16]
   return(result);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045a2:	bf00      	nop
 80045a4:	3754      	adds	r7, #84	; 0x54
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff fecb 	bl	8004364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b21      	cmp	r3, #33	; 0x21
 80045e8:	d13e      	bne.n	8004668 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f2:	d114      	bne.n	800461e <UART_Transmit_IT+0x48>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d110      	bne.n	800461e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004610:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	1c9a      	adds	r2, r3, #2
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	621a      	str	r2, [r3, #32]
 800461c:	e008      	b.n	8004630 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	1c59      	adds	r1, r3, #1
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6211      	str	r1, [r2, #32]
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29b      	uxth	r3, r3
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	4619      	mov	r1, r3
 800463e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10f      	bne.n	8004664 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004652:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004662:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004668:	2302      	movs	r3, #2
  }
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800468c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fe5a 	bl	8004350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b08c      	sub	sp, #48	; 0x30
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b22      	cmp	r3, #34	; 0x22
 80046b8:	f040 80ab 	bne.w	8004812 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c4:	d117      	bne.n	80046f6 <UART_Receive_IT+0x50>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d113      	bne.n	80046f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	1c9a      	adds	r2, r3, #2
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28
 80046f4:	e026      	b.n	8004744 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004708:	d007      	beq.n	800471a <UART_Receive_IT+0x74>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <UART_Receive_IT+0x82>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e008      	b.n	800473a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004734:	b2da      	uxtb	r2, r3
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29b      	uxth	r3, r3
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4619      	mov	r1, r3
 8004752:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004754:	2b00      	cmp	r3, #0
 8004756:	d15a      	bne.n	800480e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0220 	bic.w	r2, r2, #32
 8004766:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	2b01      	cmp	r3, #1
 8004796:	d135      	bne.n	8004804 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	613b      	str	r3, [r7, #16]
   return(result);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f023 0310 	bic.w	r3, r3, #16
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	330c      	adds	r3, #12
 80047bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047be:	623a      	str	r2, [r7, #32]
 80047c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	69f9      	ldr	r1, [r7, #28]
 80047c4:	6a3a      	ldr	r2, [r7, #32]
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e5      	bne.n	800479e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d10a      	bne.n	80047f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff fdbb 	bl	8004378 <HAL_UARTEx_RxEventCallback>
 8004802:	e002      	b.n	800480a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fc fb63 	bl	8000ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e002      	b.n	8004814 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3730      	adds	r7, #48	; 0x30
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800481c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004820:	b0c0      	sub	sp, #256	; 0x100
 8004822:	af00      	add	r7, sp, #0
 8004824:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	68d9      	ldr	r1, [r3, #12]
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	ea40 0301 	orr.w	r3, r0, r1
 8004844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	431a      	orrs	r2, r3
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	431a      	orrs	r2, r3
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004874:	f021 010c 	bic.w	r1, r1, #12
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004882:	430b      	orrs	r3, r1
 8004884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004896:	6999      	ldr	r1, [r3, #24]
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	ea40 0301 	orr.w	r3, r0, r1
 80048a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b8f      	ldr	r3, [pc, #572]	; (8004ae8 <UART_SetConfig+0x2cc>)
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d005      	beq.n	80048bc <UART_SetConfig+0xa0>
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b8d      	ldr	r3, [pc, #564]	; (8004aec <UART_SetConfig+0x2d0>)
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d104      	bne.n	80048c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048bc:	f7fe fad6 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
 80048c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048c4:	e003      	b.n	80048ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048c6:	f7fe fabd 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 80048ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d8:	f040 810c 	bne.w	8004af4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	1891      	adds	r1, r2, r2
 80048f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80048f6:	415b      	adcs	r3, r3
 80048f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048fe:	4621      	mov	r1, r4
 8004900:	eb12 0801 	adds.w	r8, r2, r1
 8004904:	4629      	mov	r1, r5
 8004906:	eb43 0901 	adc.w	r9, r3, r1
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800491a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800491e:	4690      	mov	r8, r2
 8004920:	4699      	mov	r9, r3
 8004922:	4623      	mov	r3, r4
 8004924:	eb18 0303 	adds.w	r3, r8, r3
 8004928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800492c:	462b      	mov	r3, r5
 800492e:	eb49 0303 	adc.w	r3, r9, r3
 8004932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004942:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800494a:	460b      	mov	r3, r1
 800494c:	18db      	adds	r3, r3, r3
 800494e:	653b      	str	r3, [r7, #80]	; 0x50
 8004950:	4613      	mov	r3, r2
 8004952:	eb42 0303 	adc.w	r3, r2, r3
 8004956:	657b      	str	r3, [r7, #84]	; 0x54
 8004958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800495c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004960:	f7fb fc9e 	bl	80002a0 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <UART_SetConfig+0x2d4>)
 800496a:	fba3 2302 	umull	r2, r3, r3, r2
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	011c      	lsls	r4, r3, #4
 8004972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800497c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	1891      	adds	r1, r2, r2
 800498a:	64b9      	str	r1, [r7, #72]	; 0x48
 800498c:	415b      	adcs	r3, r3
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004994:	4641      	mov	r1, r8
 8004996:	eb12 0a01 	adds.w	sl, r2, r1
 800499a:	4649      	mov	r1, r9
 800499c:	eb43 0b01 	adc.w	fp, r3, r1
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049b4:	4692      	mov	sl, r2
 80049b6:	469b      	mov	fp, r3
 80049b8:	4643      	mov	r3, r8
 80049ba:	eb1a 0303 	adds.w	r3, sl, r3
 80049be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c2:	464b      	mov	r3, r9
 80049c4:	eb4b 0303 	adc.w	r3, fp, r3
 80049c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049e0:	460b      	mov	r3, r1
 80049e2:	18db      	adds	r3, r3, r3
 80049e4:	643b      	str	r3, [r7, #64]	; 0x40
 80049e6:	4613      	mov	r3, r2
 80049e8:	eb42 0303 	adc.w	r3, r2, r3
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
 80049ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049f6:	f7fb fc53 	bl	80002a0 <__aeabi_uldivmod>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004a02:	fba3 2301 	umull	r2, r3, r3, r1
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2264      	movs	r2, #100	; 0x64
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	1acb      	subs	r3, r1, r3
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a16:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004a18:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a24:	441c      	add	r4, r3
 8004a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a40:	415b      	adcs	r3, r3
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a48:	4641      	mov	r1, r8
 8004a4a:	1851      	adds	r1, r2, r1
 8004a4c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a4e:	4649      	mov	r1, r9
 8004a50:	414b      	adcs	r3, r1
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a60:	4659      	mov	r1, fp
 8004a62:	00cb      	lsls	r3, r1, #3
 8004a64:	4651      	mov	r1, sl
 8004a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6a:	4651      	mov	r1, sl
 8004a6c:	00ca      	lsls	r2, r1, #3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	4642      	mov	r2, r8
 8004a76:	189b      	adds	r3, r3, r2
 8004a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	460a      	mov	r2, r1
 8004a80:	eb42 0303 	adc.w	r3, r2, r3
 8004a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	18db      	adds	r3, r3, r3
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ab2:	f7fb fbf5 	bl	80002a0 <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004abc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	2164      	movs	r1, #100	; 0x64
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	3332      	adds	r3, #50	; 0x32
 8004ace:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	f003 0207 	and.w	r2, r3, #7
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4422      	add	r2, r4
 8004ae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ae4:	e106      	b.n	8004cf4 <UART_SetConfig+0x4d8>
 8004ae6:	bf00      	nop
 8004ae8:	40011000 	.word	0x40011000
 8004aec:	40011400 	.word	0x40011400
 8004af0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af8:	2200      	movs	r2, #0
 8004afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004afe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	1891      	adds	r1, r2, r2
 8004b0c:	6239      	str	r1, [r7, #32]
 8004b0e:	415b      	adcs	r3, r3
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b16:	4641      	mov	r1, r8
 8004b18:	1854      	adds	r4, r2, r1
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	eb43 0501 	adc.w	r5, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	00eb      	lsls	r3, r5, #3
 8004b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2e:	00e2      	lsls	r2, r4, #3
 8004b30:	4614      	mov	r4, r2
 8004b32:	461d      	mov	r5, r3
 8004b34:	4643      	mov	r3, r8
 8004b36:	18e3      	adds	r3, r4, r3
 8004b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	eb45 0303 	adc.w	r3, r5, r3
 8004b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b62:	4629      	mov	r1, r5
 8004b64:	008b      	lsls	r3, r1, #2
 8004b66:	4621      	mov	r1, r4
 8004b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	008a      	lsls	r2, r1, #2
 8004b70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b74:	f7fb fb94 	bl	80002a0 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4b60      	ldr	r3, [pc, #384]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	011c      	lsls	r4, r3, #4
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	1891      	adds	r1, r2, r2
 8004b9e:	61b9      	str	r1, [r7, #24]
 8004ba0:	415b      	adcs	r3, r3
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba8:	4641      	mov	r1, r8
 8004baa:	1851      	adds	r1, r2, r1
 8004bac:	6139      	str	r1, [r7, #16]
 8004bae:	4649      	mov	r1, r9
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	00cb      	lsls	r3, r1, #3
 8004bc4:	4651      	mov	r1, sl
 8004bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bca:	4651      	mov	r1, sl
 8004bcc:	00ca      	lsls	r2, r1, #3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bdc:	464b      	mov	r3, r9
 8004bde:	460a      	mov	r2, r1
 8004be0:	eb42 0303 	adc.w	r3, r2, r3
 8004be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c00:	4649      	mov	r1, r9
 8004c02:	008b      	lsls	r3, r1, #2
 8004c04:	4641      	mov	r1, r8
 8004c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	008a      	lsls	r2, r1, #2
 8004c0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c12:	f7fb fb45 	bl	80002a0 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4b38      	ldr	r3, [pc, #224]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2264      	movs	r2, #100	; 0x64
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	1acb      	subs	r3, r1, r3
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	3332      	adds	r3, #50	; 0x32
 8004c30:	4a33      	ldr	r2, [pc, #204]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3c:	441c      	add	r4, r3
 8004c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c42:	2200      	movs	r2, #0
 8004c44:	673b      	str	r3, [r7, #112]	; 0x70
 8004c46:	677a      	str	r2, [r7, #116]	; 0x74
 8004c48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	464b      	mov	r3, r9
 8004c50:	1891      	adds	r1, r2, r2
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	415b      	adcs	r3, r3
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	1851      	adds	r1, r2, r1
 8004c60:	6039      	str	r1, [r7, #0]
 8004c62:	4649      	mov	r1, r9
 8004c64:	414b      	adcs	r3, r1
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c74:	4659      	mov	r1, fp
 8004c76:	00cb      	lsls	r3, r1, #3
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7e:	4651      	mov	r1, sl
 8004c80:	00ca      	lsls	r2, r1, #3
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	4603      	mov	r3, r0
 8004c88:	4642      	mov	r2, r8
 8004c8a:	189b      	adds	r3, r3, r2
 8004c8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c8e:	464b      	mov	r3, r9
 8004c90:	460a      	mov	r2, r1
 8004c92:	eb42 0303 	adc.w	r3, r2, r3
 8004c96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ca2:	667a      	str	r2, [r7, #100]	; 0x64
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	008b      	lsls	r3, r1, #2
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cba:	4641      	mov	r1, r8
 8004cbc:	008a      	lsls	r2, r1, #2
 8004cbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cc2:	f7fb faed 	bl	80002a0 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	2164      	movs	r1, #100	; 0x64
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	3332      	adds	r3, #50	; 0x32
 8004cde:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	f003 020f 	and.w	r2, r3, #15
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4422      	add	r2, r4
 8004cf2:	609a      	str	r2, [r3, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d00:	51eb851f 	.word	0x51eb851f

08004d04 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f103 0208 	add.w	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f103 0208 	add.w	r2, r3, #8
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f103 0208 	add.w	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	601a      	str	r2, [r3, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d103      	bne.n	8004dc6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e00c      	b.n	8004de0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e002      	b.n	8004dd4 <vListInsert+0x2e>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d2f6      	bcs.n	8004dce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	601a      	str	r2, [r3, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6892      	ldr	r2, [r2, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6852      	ldr	r2, [r2, #4]
 8004e38:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d103      	bne.n	8004e4c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xQueueGenericReset+0x2a>
        __asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60bb      	str	r3, [r7, #8]
    }
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004e96:	f002 fb37 	bl	8007508 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	68f9      	ldr	r1, [r7, #12]
 8004eca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	441a      	add	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	22ff      	movs	r2, #255	; 0xff
 8004eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	22ff      	movs	r2, #255	; 0xff
 8004ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d114      	bne.n	8004f16 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01a      	beq.n	8004f2a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3310      	adds	r3, #16
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 f921 	bl	8006140 <xTaskRemoveFromEventList>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d012      	beq.n	8004f2a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <xQueueGenericReset+0xcc>)
 8004f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	e009      	b.n	8004f2a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3310      	adds	r3, #16
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fef2 	bl	8004d04 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3324      	adds	r3, #36	; 0x24
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff feed 	bl	8004d04 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004f2a:	f002 fb1d 	bl	8007568 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004f2e:	2301      	movs	r3, #1
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	; 0x30
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	61bb      	str	r3, [r7, #24]
    }
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d006      	beq.n	8004f84 <xQueueGenericCreate+0x48>
 8004f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d101      	bne.n	8004f88 <xQueueGenericCreate+0x4c>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <xQueueGenericCreate+0x4e>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <xQueueGenericCreate+0x68>
        __asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	617b      	str	r3, [r7, #20]
    }
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004faa:	d90a      	bls.n	8004fc2 <xQueueGenericCreate+0x86>
        __asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	613b      	str	r3, [r7, #16]
    }
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	3350      	adds	r3, #80	; 0x50
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f002 fbc0 	bl	800774c <pvPortMalloc>
 8004fcc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00d      	beq.n	8004ff0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	3350      	adds	r3, #80	; 0x50
 8004fdc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fde:	79fa      	ldrb	r2, [r7, #7]
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f805 	bl	8004ffa <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
    }
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3728      	adds	r7, #40	; 0x28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e002      	b.n	800501c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005028:	2101      	movs	r1, #1
 800502a:	69b8      	ldr	r0, [r7, #24]
 800502c:	f7ff ff1e 	bl	8004e6c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08e      	sub	sp, #56	; 0x38
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800504e:	2300      	movs	r3, #0
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <xQueueGenericSend+0x32>
        __asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d103      	bne.n	8005080 <xQueueGenericSend+0x40>
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <xQueueGenericSend+0x44>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <xQueueGenericSend+0x46>
 8005084:	2300      	movs	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <xQueueGenericSend+0x60>
        __asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d103      	bne.n	80050ae <xQueueGenericSend+0x6e>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <xQueueGenericSend+0x72>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <xQueueGenericSend+0x74>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xQueueGenericSend+0x8e>
        __asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	623b      	str	r3, [r7, #32]
    }
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050ce:	f001 f9d3 	bl	8006478 <xTaskGetSchedulerState>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <xQueueGenericSend+0x9e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <xQueueGenericSend+0xa2>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <xQueueGenericSend+0xa4>
 80050e2:	2300      	movs	r3, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <xQueueGenericSend+0xbe>
        __asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	61fb      	str	r3, [r7, #28]
    }
 80050fa:	bf00      	nop
 80050fc:	e7fe      	b.n	80050fc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80050fe:	f002 fa03 	bl	8007508 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <xQueueGenericSend+0xd4>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d129      	bne.n	8005168 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511a:	f000 fac6 	bl	80056aa <prvCopyDataToQueue>
 800511e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d010      	beq.n	800514a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	3324      	adds	r3, #36	; 0x24
 800512c:	4618      	mov	r0, r3
 800512e:	f001 f807 	bl	8006140 <xTaskRemoveFromEventList>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d013      	beq.n	8005160 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005138:	4b3f      	ldr	r3, [pc, #252]	; (8005238 <xQueueGenericSend+0x1f8>)
 800513a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	e00a      	b.n	8005160 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005150:	4b39      	ldr	r3, [pc, #228]	; (8005238 <xQueueGenericSend+0x1f8>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005160:	f002 fa02 	bl	8007568 <vPortExitCritical>
                return pdPASS;
 8005164:	2301      	movs	r3, #1
 8005166:	e063      	b.n	8005230 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800516e:	f002 f9fb 	bl	8007568 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005172:	2300      	movs	r3, #0
 8005174:	e05c      	b.n	8005230 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005178:	2b00      	cmp	r3, #0
 800517a:	d106      	bne.n	800518a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	4618      	mov	r0, r3
 8005182:	f001 f83f 	bl	8006204 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800518a:	f002 f9ed 	bl	8007568 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800518e:	f000 fdb9 	bl	8005d04 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005192:	f002 f9b9 	bl	8007508 <vPortEnterCritical>
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800519c:	b25b      	sxtb	r3, r3
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a2:	d103      	bne.n	80051ac <xQueueGenericSend+0x16c>
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051b2:	b25b      	sxtb	r3, r3
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d103      	bne.n	80051c2 <xQueueGenericSend+0x182>
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051c2:	f002 f9d1 	bl	8007568 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051c6:	1d3a      	adds	r2, r7, #4
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	4611      	mov	r1, r2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 f82e 	bl	8006230 <xTaskCheckForTimeOut>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d124      	bne.n	8005224 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051dc:	f000 fb5d 	bl	800589a <prvIsQueueFull>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d018      	beq.n	8005218 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	3310      	adds	r3, #16
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 ff56 	bl	80060a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80051f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f6:	f000 fae8 	bl	80057ca <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80051fa:	f000 fd91 	bl	8005d20 <xTaskResumeAll>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	f47f af7c 	bne.w	80050fe <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <xQueueGenericSend+0x1f8>)
 8005208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	e772      	b.n	80050fe <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521a:	f000 fad6 	bl	80057ca <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800521e:	f000 fd7f 	bl	8005d20 <xTaskResumeAll>
 8005222:	e76c      	b.n	80050fe <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005226:	f000 fad0 	bl	80057ca <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800522a:	f000 fd79 	bl	8005d20 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800522e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005230:	4618      	mov	r0, r3
 8005232:	3738      	adds	r7, #56	; 0x38
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b090      	sub	sp, #64	; 0x40
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d103      	bne.n	8005278 <xQueueGenericSendFromISR+0x3c>
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <xQueueGenericSendFromISR+0x40>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <xQueueGenericSendFromISR+0x42>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005294:	bf00      	nop
 8005296:	e7fe      	b.n	8005296 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d103      	bne.n	80052a6 <xQueueGenericSendFromISR+0x6a>
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <xQueueGenericSendFromISR+0x6e>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <xQueueGenericSendFromISR+0x70>
 80052aa:	2300      	movs	r3, #0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	623b      	str	r3, [r7, #32]
    }
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052c6:	f002 fa01 	bl	80076cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80052ca:	f3ef 8211 	mrs	r2, BASEPRI
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	61fa      	str	r2, [r7, #28]
 80052e0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80052e2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d302      	bcc.n	80052f8 <xQueueGenericSendFromISR+0xbc>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d13e      	bne.n	8005376 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800530e:	f000 f9cc 	bl	80056aa <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005312:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d112      	bne.n	8005342 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	d025      	beq.n	8005370 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	3324      	adds	r3, #36	; 0x24
 8005328:	4618      	mov	r0, r3
 800532a:	f000 ff09 	bl	8006140 <xTaskRemoveFromEventList>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01d      	beq.n	8005370 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01a      	beq.n	8005370 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e016      	b.n	8005370 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005342:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005346:	2b7f      	cmp	r3, #127	; 0x7f
 8005348:	d10a      	bne.n	8005360 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	617b      	str	r3, [r7, #20]
    }
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005360:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005364:	3301      	adds	r3, #1
 8005366:	b2db      	uxtb	r3, r3
 8005368:	b25a      	sxtb	r2, r3
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005370:	2301      	movs	r3, #1
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005374:	e001      	b.n	800537a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005376:	2300      	movs	r3, #0
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005384:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005388:	4618      	mov	r0, r3
 800538a:	3740      	adds	r7, #64	; 0x40
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08c      	sub	sp, #48	; 0x30
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800539c:	2300      	movs	r3, #0
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <xQueueReceive+0x30>
        __asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	623b      	str	r3, [r7, #32]
    }
 80053bc:	bf00      	nop
 80053be:	e7fe      	b.n	80053be <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d103      	bne.n	80053ce <xQueueReceive+0x3e>
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <xQueueReceive+0x42>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <xQueueReceive+0x44>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xQueueReceive+0x5e>
        __asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	61fb      	str	r3, [r7, #28]
    }
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ee:	f001 f843 	bl	8006478 <xTaskGetSchedulerState>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <xQueueReceive+0x6e>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <xQueueReceive+0x72>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <xQueueReceive+0x74>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <xQueueReceive+0x8e>
        __asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	61bb      	str	r3, [r7, #24]
    }
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800541e:	f002 f873 	bl	8007508 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	d01f      	beq.n	800546e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005432:	f000 f9a4 	bl	800577e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	1e5a      	subs	r2, r3, #1
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00f      	beq.n	8005466 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	3310      	adds	r3, #16
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fe78 	bl	8006140 <xTaskRemoveFromEventList>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005456:	4b3d      	ldr	r3, [pc, #244]	; (800554c <xQueueReceive+0x1bc>)
 8005458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005466:	f002 f87f 	bl	8007568 <vPortExitCritical>
                return pdPASS;
 800546a:	2301      	movs	r3, #1
 800546c:	e069      	b.n	8005542 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d103      	bne.n	800547c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005474:	f002 f878 	bl	8007568 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005478:	2300      	movs	r3, #0
 800547a:	e062      	b.n	8005542 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005482:	f107 0310 	add.w	r3, r7, #16
 8005486:	4618      	mov	r0, r3
 8005488:	f000 febc 	bl	8006204 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005490:	f002 f86a 	bl	8007568 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005494:	f000 fc36 	bl	8005d04 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005498:	f002 f836 	bl	8007508 <vPortEnterCritical>
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d103      	bne.n	80054b2 <xQueueReceive+0x122>
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b8:	b25b      	sxtb	r3, r3
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d103      	bne.n	80054c8 <xQueueReceive+0x138>
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c8:	f002 f84e 	bl	8007568 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054cc:	1d3a      	adds	r2, r7, #4
 80054ce:	f107 0310 	add.w	r3, r7, #16
 80054d2:	4611      	mov	r1, r2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 feab 	bl	8006230 <xTaskCheckForTimeOut>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d123      	bne.n	8005528 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e2:	f000 f9c4 	bl	800586e <prvIsQueueEmpty>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d017      	beq.n	800551c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	3324      	adds	r3, #36	; 0x24
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4611      	mov	r1, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fdd3 	bl	80060a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80054fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054fc:	f000 f965 	bl	80057ca <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005500:	f000 fc0e 	bl	8005d20 <xTaskResumeAll>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d189      	bne.n	800541e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800550a:	4b10      	ldr	r3, [pc, #64]	; (800554c <xQueueReceive+0x1bc>)
 800550c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	e780      	b.n	800541e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800551c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800551e:	f000 f954 	bl	80057ca <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005522:	f000 fbfd 	bl	8005d20 <xTaskResumeAll>
 8005526:	e77a      	b.n	800541e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800552a:	f000 f94e 	bl	80057ca <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800552e:	f000 fbf7 	bl	8005d20 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005534:	f000 f99b 	bl	800586e <prvIsQueueEmpty>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	f43f af6f 	beq.w	800541e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005540:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005542:	4618      	mov	r0, r3
 8005544:	3730      	adds	r7, #48	; 0x30
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b090      	sub	sp, #64	; 0x40
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <xQueueReceiveFromISR+0x3a>
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <xQueueReceiveFromISR+0x3e>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <xQueueReceiveFromISR+0x40>
 800558e:	2300      	movs	r3, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055aa:	f002 f88f 	bl	80076cc <vPortValidateInterruptPriority>
        __asm volatile
 80055ae:	f3ef 8211 	mrs	r2, BASEPRI
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	623a      	str	r2, [r7, #32]
 80055c4:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80055c6:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d03e      	beq.n	8005654 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055e4:	f000 f8cb 	bl	800577e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	1e5a      	subs	r2, r3, #1
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80055f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d112      	bne.n	8005620 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d025      	beq.n	800564e <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	3310      	adds	r3, #16
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fd9a 	bl	8006140 <xTaskRemoveFromEventList>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01d      	beq.n	800564e <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01a      	beq.n	800564e <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e016      	b.n	800564e <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005620:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005624:	2b7f      	cmp	r3, #127	; 0x7f
 8005626:	d10a      	bne.n	800563e <xQueueReceiveFromISR+0xee>
        __asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	61bb      	str	r3, [r7, #24]
    }
 800563a:	bf00      	nop
 800563c:	e7fe      	b.n	800563c <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800563e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005642:	3301      	adds	r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	b25a      	sxtb	r2, r3
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800564e:	2301      	movs	r3, #1
 8005650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005652:	e001      	b.n	8005658 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8005654:	2300      	movs	r3, #0
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f383 8811 	msr	BASEPRI, r3
    }
 8005662:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005666:	4618      	mov	r0, r3
 8005668:	3740      	adds	r7, #64	; 0x40
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	60bb      	str	r3, [r7, #8]
    }
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005692:	f001 ff39 	bl	8007508 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800569c:	f001 ff64 	bl	8007568 <vPortExitCritical>

    return uxReturn;
 80056a0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10d      	bne.n	80056e4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d14d      	bne.n	800576c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 feed 	bl	80064b4 <xTaskPriorityDisinherit>
 80056da:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
 80056e2:	e043      	b.n	800576c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d119      	bne.n	800571e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6858      	ldr	r0, [r3, #4]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	461a      	mov	r2, r3
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	f002 fbc7 	bl	8007e88 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	441a      	add	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	429a      	cmp	r2, r3
 8005712:	d32b      	bcc.n	800576c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	e026      	b.n	800576c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68d8      	ldr	r0, [r3, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	461a      	mov	r2, r3
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	f002 fbad 	bl	8007e88 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	425b      	negs	r3, r3
 8005738:	441a      	add	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d207      	bcs.n	800575a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	425b      	negs	r3, r3
 8005754:	441a      	add	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d105      	bne.n	800576c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3b01      	subs	r3, #1
 800576a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005774:	697b      	ldr	r3, [r7, #20]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d018      	beq.n	80057c2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d303      	bcc.n	80057b2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	461a      	mov	r2, r3
 80057bc:	6838      	ldr	r0, [r7, #0]
 80057be:	f002 fb63 	bl	8007e88 <memcpy>
    }
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80057d2:	f001 fe99 	bl	8007508 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057dc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057de:	e011      	b.n	8005804 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d012      	beq.n	800580e <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3324      	adds	r3, #36	; 0x24
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fca7 	bl	8006140 <xTaskRemoveFromEventList>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80057f8:	f000 fd80 	bl	80062fc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	3b01      	subs	r3, #1
 8005800:	b2db      	uxtb	r3, r3
 8005802:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dce9      	bgt.n	80057e0 <prvUnlockQueue+0x16>
 800580c:	e000      	b.n	8005810 <prvUnlockQueue+0x46>
                        break;
 800580e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	22ff      	movs	r2, #255	; 0xff
 8005814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005818:	f001 fea6 	bl	8007568 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800581c:	f001 fe74 	bl	8007508 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005826:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005828:	e011      	b.n	800584e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d012      	beq.n	8005858 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3310      	adds	r3, #16
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fc82 	bl	8006140 <xTaskRemoveFromEventList>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005842:	f000 fd5b 	bl	80062fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	3b01      	subs	r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800584e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005852:	2b00      	cmp	r3, #0
 8005854:	dce9      	bgt.n	800582a <prvUnlockQueue+0x60>
 8005856:	e000      	b.n	800585a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005858:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	22ff      	movs	r2, #255	; 0xff
 800585e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005862:	f001 fe81 	bl	8007568 <vPortExitCritical>
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005876:	f001 fe47 	bl	8007508 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005882:	2301      	movs	r3, #1
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e001      	b.n	800588c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800588c:	f001 fe6c 	bl	8007568 <vPortExitCritical>

    return xReturn;
 8005890:	68fb      	ldr	r3, [r7, #12]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80058a2:	f001 fe31 	bl	8007508 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d102      	bne.n	80058b8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e001      	b.n	80058bc <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80058bc:	f001 fe54 	bl	8007568 <vPortExitCritical>

    return xReturn;
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
    }
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d102      	bne.n	8005904 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80058fe:	2301      	movs	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	e001      	b.n	8005908 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005908:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800590a:	4618      	mov	r0, r3
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e014      	b.n	8005952 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005928:	4a0f      	ldr	r2, [pc, #60]	; (8005968 <vQueueAddToRegistry+0x50>)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10b      	bne.n	800594c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005934:	490c      	ldr	r1, [pc, #48]	; (8005968 <vQueueAddToRegistry+0x50>)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800593e:	4a0a      	ldr	r2, [pc, #40]	; (8005968 <vQueueAddToRegistry+0x50>)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	4413      	add	r3, r2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800594a:	e006      	b.n	800595a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3301      	adds	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b07      	cmp	r3, #7
 8005956:	d9e7      	bls.n	8005928 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	200001e4 	.word	0x200001e4

0800596c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800597c:	f001 fdc4 	bl	8007508 <vPortEnterCritical>
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005986:	b25b      	sxtb	r3, r3
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d103      	bne.n	8005996 <vQueueWaitForMessageRestricted+0x2a>
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800599c:	b25b      	sxtb	r3, r3
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a2:	d103      	bne.n	80059ac <vQueueWaitForMessageRestricted+0x40>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ac:	f001 fddc 	bl	8007568 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3324      	adds	r3, #36	; 0x24
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fb91 	bl	80060e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80059c6:	6978      	ldr	r0, [r7, #20]
 80059c8:	f7ff feff 	bl	80057ca <prvUnlockQueue>
    }
 80059cc:	bf00      	nop
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08c      	sub	sp, #48	; 0x30
 80059d8:	af04      	add	r7, sp, #16
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 feaf 	bl	800774c <pvPortMalloc>
 80059ee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00e      	beq.n	8005a14 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059f6:	2058      	movs	r0, #88	; 0x58
 80059f8:	f001 fea8 	bl	800774c <pvPortMalloc>
 80059fc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
 8005a0a:	e005      	b.n	8005a18 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005a0c:	6978      	ldr	r0, [r7, #20]
 8005a0e:	f001 ff7d 	bl	800790c <vPortFree>
 8005a12:	e001      	b.n	8005a18 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d013      	beq.n	8005a46 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a1e:	88fa      	ldrh	r2, [r7, #6]
 8005a20:	2300      	movs	r3, #0
 8005a22:	9303      	str	r3, [sp, #12]
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	9302      	str	r3, [sp, #8]
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f80e 	bl	8005a56 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005a3a:	69f8      	ldr	r0, [r7, #28]
 8005a3c:	f000 f8a2 	bl	8005b84 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005a40:	2301      	movs	r3, #1
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	e002      	b.n	8005a4c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a46:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
    }
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3720      	adds	r7, #32
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b088      	sub	sp, #32
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	21a5      	movs	r1, #165	; 0xa5
 8005a70:	f002 f98f 	bl	8007d92 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	f023 0307 	bic.w	r3, r3, #7
 8005a8c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <prvInitialiseNewTask+0x58>
        __asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	617b      	str	r3, [r7, #20]
    }
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01f      	beq.n	8005af4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	e012      	b.n	8005ae0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	7819      	ldrb	r1, [r3, #0]
 8005ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3334      	adds	r3, #52	; 0x34
 8005aca:	460a      	mov	r2, r1
 8005acc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d006      	beq.n	8005ae8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3301      	adds	r3, #1
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b09      	cmp	r3, #9
 8005ae4:	d9e9      	bls.n	8005aba <prvInitialiseNewTask+0x64>
 8005ae6:	e000      	b.n	8005aea <prvInitialiseNewTask+0x94>
            {
                break;
 8005ae8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005af2:	e003      	b.n	8005afc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d901      	bls.n	8005b06 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b02:	2304      	movs	r3, #4
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b10:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	2200      	movs	r2, #0
 8005b16:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff f911 	bl	8004d44 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	3318      	adds	r3, #24
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff f90c 	bl	8004d44 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b30:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	f1c3 0205 	rsb	r2, r3, #5
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	3350      	adds	r3, #80	; 0x50
 8005b46:	2204      	movs	r2, #4
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f002 f921 	bl	8007d92 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	3354      	adds	r3, #84	; 0x54
 8005b54:	2201      	movs	r2, #1
 8005b56:	2100      	movs	r1, #0
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f002 f91a 	bl	8007d92 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	69b8      	ldr	r0, [r7, #24]
 8005b64:	f001 fba0 	bl	80072a8 <pxPortInitialiseStack>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b78:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b7a:	bf00      	nop
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005b8c:	f001 fcbc 	bl	8007508 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005b90:	4b2c      	ldr	r3, [pc, #176]	; (8005c44 <prvAddNewTaskToReadyList+0xc0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	4a2b      	ldr	r2, [pc, #172]	; (8005c44 <prvAddNewTaskToReadyList+0xc0>)
 8005b98:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005b9a:	4b2b      	ldr	r3, [pc, #172]	; (8005c48 <prvAddNewTaskToReadyList+0xc4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005ba2:	4a29      	ldr	r2, [pc, #164]	; (8005c48 <prvAddNewTaskToReadyList+0xc4>)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ba8:	4b26      	ldr	r3, [pc, #152]	; (8005c44 <prvAddNewTaskToReadyList+0xc0>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d110      	bne.n	8005bd2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005bb0:	f000 fbc8 	bl	8006344 <prvInitialiseTaskLists>
 8005bb4:	e00d      	b.n	8005bd2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005bb6:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <prvAddNewTaskToReadyList+0xc8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bbe:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <prvAddNewTaskToReadyList+0xc4>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d802      	bhi.n	8005bd2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005bcc:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <prvAddNewTaskToReadyList+0xc4>)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005bd2:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <prvAddNewTaskToReadyList+0xcc>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	; (8005c50 <prvAddNewTaskToReadyList+0xcc>)
 8005bda:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005bdc:	4b1c      	ldr	r3, [pc, #112]	; (8005c50 <prvAddNewTaskToReadyList+0xcc>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	2201      	movs	r2, #1
 8005bea:	409a      	lsls	r2, r3
 8005bec:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <prvAddNewTaskToReadyList+0xd0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <prvAddNewTaskToReadyList+0xd0>)
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <prvAddNewTaskToReadyList+0xd4>)
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f7ff f8a6 	bl	8004d5e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005c12:	f001 fca9 	bl	8007568 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005c16:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <prvAddNewTaskToReadyList+0xc8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c1e:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <prvAddNewTaskToReadyList+0xc4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d207      	bcs.n	8005c3c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <prvAddNewTaskToReadyList+0xd8>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	200002fc 	.word	0x200002fc
 8005c48:	20000224 	.word	0x20000224
 8005c4c:	20000308 	.word	0x20000308
 8005c50:	20000318 	.word	0x20000318
 8005c54:	20000304 	.word	0x20000304
 8005c58:	20000228 	.word	0x20000228
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005c66:	4b20      	ldr	r3, [pc, #128]	; (8005ce8 <vTaskStartScheduler+0x88>)
 8005c68:	9301      	str	r3, [sp, #4]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2282      	movs	r2, #130	; 0x82
 8005c72:	491e      	ldr	r1, [pc, #120]	; (8005cec <vTaskStartScheduler+0x8c>)
 8005c74:	481e      	ldr	r0, [pc, #120]	; (8005cf0 <vTaskStartScheduler+0x90>)
 8005c76:	f7ff fead 	bl	80059d4 <xTaskCreate>
 8005c7a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d102      	bne.n	8005c88 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005c82:	f000 ff59 	bl	8006b38 <xTimerCreateTimerTask>
 8005c86:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d116      	bne.n	8005cbc <vTaskStartScheduler+0x5c>
        __asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	60bb      	str	r3, [r7, #8]
    }
 8005ca0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005ca2:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <vTaskStartScheduler+0x94>)
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005caa:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <vTaskStartScheduler+0x98>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cb0:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <vTaskStartScheduler+0x9c>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005cb6:	f001 fb85 	bl	80073c4 <xPortStartScheduler>
 8005cba:	e00e      	b.n	8005cda <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d10a      	bne.n	8005cda <vTaskStartScheduler+0x7a>
        __asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	607b      	str	r3, [r7, #4]
    }
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <vTaskStartScheduler+0xa0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000320 	.word	0x20000320
 8005cec:	08009124 	.word	0x08009124
 8005cf0:	08006315 	.word	0x08006315
 8005cf4:	2000031c 	.word	0x2000031c
 8005cf8:	20000308 	.word	0x20000308
 8005cfc:	20000300 	.word	0x20000300
 8005d00:	20000020 	.word	0x20000020

08005d04 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005d08:	4b04      	ldr	r3, [pc, #16]	; (8005d1c <vTaskSuspendAll+0x18>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	4a03      	ldr	r2, [pc, #12]	; (8005d1c <vTaskSuspendAll+0x18>)
 8005d10:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005d12:	bf00      	nop
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20000324 	.word	0x20000324

08005d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005d2e:	4b41      	ldr	r3, [pc, #260]	; (8005e34 <xTaskResumeAll+0x114>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <xTaskResumeAll+0x2c>
        __asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	603b      	str	r3, [r7, #0]
    }
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005d4c:	f001 fbdc 	bl	8007508 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005d50:	4b38      	ldr	r3, [pc, #224]	; (8005e34 <xTaskResumeAll+0x114>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	4a37      	ldr	r2, [pc, #220]	; (8005e34 <xTaskResumeAll+0x114>)
 8005d58:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5a:	4b36      	ldr	r3, [pc, #216]	; (8005e34 <xTaskResumeAll+0x114>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d161      	bne.n	8005e26 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d62:	4b35      	ldr	r3, [pc, #212]	; (8005e38 <xTaskResumeAll+0x118>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d05d      	beq.n	8005e26 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d6a:	e02e      	b.n	8005dca <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d6c:	4b33      	ldr	r3, [pc, #204]	; (8005e3c <xTaskResumeAll+0x11c>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3318      	adds	r3, #24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff f84d 	bl	8004e18 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff f848 	bl	8004e18 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	4b2b      	ldr	r3, [pc, #172]	; (8005e40 <xTaskResumeAll+0x120>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <xTaskResumeAll+0x120>)
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4a27      	ldr	r2, [pc, #156]	; (8005e44 <xTaskResumeAll+0x124>)
 8005da8:	441a      	add	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f7fe ffd4 	bl	8004d5e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dba:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <xTaskResumeAll+0x128>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d302      	bcc.n	8005dca <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005dc4:	4b21      	ldr	r3, [pc, #132]	; (8005e4c <xTaskResumeAll+0x12c>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dca:	4b1c      	ldr	r3, [pc, #112]	; (8005e3c <xTaskResumeAll+0x11c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1cc      	bne.n	8005d6c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005dd8:	f000 fb32 	bl	8006440 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <xTaskResumeAll+0x130>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d010      	beq.n	8005e0a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005de8:	f000 f846 	bl	8005e78 <xTaskIncrementTick>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005df2:	4b16      	ldr	r3, [pc, #88]	; (8005e4c <xTaskResumeAll+0x12c>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f1      	bne.n	8005de8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005e04:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <xTaskResumeAll+0x130>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005e0a:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <xTaskResumeAll+0x12c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005e12:	2301      	movs	r3, #1
 8005e14:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005e16:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <xTaskResumeAll+0x134>)
 8005e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005e26:	f001 fb9f 	bl	8007568 <vPortExitCritical>

    return xAlreadyYielded;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20000324 	.word	0x20000324
 8005e38:	200002fc 	.word	0x200002fc
 8005e3c:	200002bc 	.word	0x200002bc
 8005e40:	20000304 	.word	0x20000304
 8005e44:	20000228 	.word	0x20000228
 8005e48:	20000224 	.word	0x20000224
 8005e4c:	20000310 	.word	0x20000310
 8005e50:	2000030c 	.word	0x2000030c
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <xTaskGetTickCount+0x1c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005e64:	687b      	ldr	r3, [r7, #4]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000300 	.word	0x20000300

08005e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e82:	4b4e      	ldr	r3, [pc, #312]	; (8005fbc <xTaskIncrementTick+0x144>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 808e 	bne.w	8005fa8 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e8c:	4b4c      	ldr	r3, [pc, #304]	; (8005fc0 <xTaskIncrementTick+0x148>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005e94:	4a4a      	ldr	r2, [pc, #296]	; (8005fc0 <xTaskIncrementTick+0x148>)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d120      	bne.n	8005ee2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005ea0:	4b48      	ldr	r3, [pc, #288]	; (8005fc4 <xTaskIncrementTick+0x14c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <xTaskIncrementTick+0x48>
        __asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	603b      	str	r3, [r7, #0]
    }
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <xTaskIncrementTick+0x46>
 8005ec0:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <xTaskIncrementTick+0x14c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	4b40      	ldr	r3, [pc, #256]	; (8005fc8 <xTaskIncrementTick+0x150>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a3e      	ldr	r2, [pc, #248]	; (8005fc4 <xTaskIncrementTick+0x14c>)
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	4a3e      	ldr	r2, [pc, #248]	; (8005fc8 <xTaskIncrementTick+0x150>)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4b3d      	ldr	r3, [pc, #244]	; (8005fcc <xTaskIncrementTick+0x154>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	4a3c      	ldr	r2, [pc, #240]	; (8005fcc <xTaskIncrementTick+0x154>)
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	f000 faaf 	bl	8006440 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005ee2:	4b3b      	ldr	r3, [pc, #236]	; (8005fd0 <xTaskIncrementTick+0x158>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d348      	bcc.n	8005f7e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eec:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <xTaskIncrementTick+0x14c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef6:	4b36      	ldr	r3, [pc, #216]	; (8005fd0 <xTaskIncrementTick+0x158>)
 8005ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8005efc:	601a      	str	r2, [r3, #0]
                    break;
 8005efe:	e03e      	b.n	8005f7e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f00:	4b30      	ldr	r3, [pc, #192]	; (8005fc4 <xTaskIncrementTick+0x14c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d203      	bcs.n	8005f20 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005f18:	4a2d      	ldr	r2, [pc, #180]	; (8005fd0 <xTaskIncrementTick+0x158>)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f1e:	e02e      	b.n	8005f7e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe ff77 	bl	8004e18 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d004      	beq.n	8005f3c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	3318      	adds	r3, #24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe ff6e 	bl	8004e18 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	2201      	movs	r2, #1
 8005f42:	409a      	lsls	r2, r3
 8005f44:	4b23      	ldr	r3, [pc, #140]	; (8005fd4 <xTaskIncrementTick+0x15c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	4a22      	ldr	r2, [pc, #136]	; (8005fd4 <xTaskIncrementTick+0x15c>)
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4a1f      	ldr	r2, [pc, #124]	; (8005fd8 <xTaskIncrementTick+0x160>)
 8005f5c:	441a      	add	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	3304      	adds	r3, #4
 8005f62:	4619      	mov	r1, r3
 8005f64:	4610      	mov	r0, r2
 8005f66:	f7fe fefa 	bl	8004d5e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <xTaskIncrementTick+0x164>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d3b9      	bcc.n	8005eec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7c:	e7b6      	b.n	8005eec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f7e:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <xTaskIncrementTick+0x164>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f84:	4914      	ldr	r1, [pc, #80]	; (8005fd8 <xTaskIncrementTick+0x160>)
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d901      	bls.n	8005f9a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005f96:	2301      	movs	r3, #1
 8005f98:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <xTaskIncrementTick+0x168>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e004      	b.n	8005fb2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <xTaskIncrementTick+0x16c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3301      	adds	r3, #1
 8005fae:	4a0d      	ldr	r2, [pc, #52]	; (8005fe4 <xTaskIncrementTick+0x16c>)
 8005fb0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005fb2:	697b      	ldr	r3, [r7, #20]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20000324 	.word	0x20000324
 8005fc0:	20000300 	.word	0x20000300
 8005fc4:	200002b4 	.word	0x200002b4
 8005fc8:	200002b8 	.word	0x200002b8
 8005fcc:	20000314 	.word	0x20000314
 8005fd0:	2000031c 	.word	0x2000031c
 8005fd4:	20000304 	.word	0x20000304
 8005fd8:	20000228 	.word	0x20000228
 8005fdc:	20000224 	.word	0x20000224
 8005fe0:	20000310 	.word	0x20000310
 8005fe4:	2000030c 	.word	0x2000030c

08005fe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fee:	4b27      	ldr	r3, [pc, #156]	; (800608c <vTaskSwitchContext+0xa4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005ff6:	4b26      	ldr	r3, [pc, #152]	; (8006090 <vTaskSwitchContext+0xa8>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005ffc:	e03f      	b.n	800607e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005ffe:	4b24      	ldr	r3, [pc, #144]	; (8006090 <vTaskSwitchContext+0xa8>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006004:	4b23      	ldr	r3, [pc, #140]	; (8006094 <vTaskSwitchContext+0xac>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	fab3 f383 	clz	r3, r3
 8006010:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006012:	7afb      	ldrb	r3, [r7, #11]
 8006014:	f1c3 031f 	rsb	r3, r3, #31
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	491f      	ldr	r1, [pc, #124]	; (8006098 <vTaskSwitchContext+0xb0>)
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <vTaskSwitchContext+0x5c>
        __asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	607b      	str	r3, [r7, #4]
    }
 8006040:	bf00      	nop
 8006042:	e7fe      	b.n	8006042 <vTaskSwitchContext+0x5a>
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4a12      	ldr	r2, [pc, #72]	; (8006098 <vTaskSwitchContext+0xb0>)
 8006050:	4413      	add	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	3308      	adds	r3, #8
 8006066:	429a      	cmp	r2, r3
 8006068:	d104      	bne.n	8006074 <vTaskSwitchContext+0x8c>
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	605a      	str	r2, [r3, #4]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	4a08      	ldr	r2, [pc, #32]	; (800609c <vTaskSwitchContext+0xb4>)
 800607c:	6013      	str	r3, [r2, #0]
}
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000324 	.word	0x20000324
 8006090:	20000310 	.word	0x20000310
 8006094:	20000304 	.word	0x20000304
 8006098:	20000228 	.word	0x20000228
 800609c:	20000224 	.word	0x20000224

080060a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60fb      	str	r3, [r7, #12]
    }
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060c6:	4b07      	ldr	r3, [pc, #28]	; (80060e4 <vTaskPlaceOnEventList+0x44>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3318      	adds	r3, #24
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fe fe69 	bl	8004da6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060d4:	2101      	movs	r1, #1
 80060d6:	6838      	ldr	r0, [r7, #0]
 80060d8:	f000 fcc8 	bl	8006a6c <prvAddCurrentTaskToDelayedList>
}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000224 	.word	0x20000224

080060e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	617b      	str	r3, [r7, #20]
    }
 800610c:	bf00      	nop
 800610e:	e7fe      	b.n	800610e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006110:	4b0a      	ldr	r3, [pc, #40]	; (800613c <vTaskPlaceOnEventListRestricted+0x54>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3318      	adds	r3, #24
 8006116:	4619      	mov	r1, r3
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7fe fe20 	bl	8004d5e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8006124:	f04f 33ff 	mov.w	r3, #4294967295
 8006128:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	68b8      	ldr	r0, [r7, #8]
 800612e:	f000 fc9d 	bl	8006a6c <prvAddCurrentTaskToDelayedList>
    }
 8006132:	bf00      	nop
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000224 	.word	0x20000224

08006140 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60fb      	str	r3, [r7, #12]
    }
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	3318      	adds	r3, #24
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe fe51 	bl	8004e18 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <xTaskRemoveFromEventList+0xac>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d11c      	bne.n	80061b8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	3304      	adds	r3, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fe48 	bl	8004e18 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	2201      	movs	r2, #1
 800618e:	409a      	lsls	r2, r3
 8006190:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <xTaskRemoveFromEventList+0xb0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4313      	orrs	r3, r2
 8006196:	4a16      	ldr	r2, [pc, #88]	; (80061f0 <xTaskRemoveFromEventList+0xb0>)
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <xTaskRemoveFromEventList+0xb4>)
 80061a8:	441a      	add	r2, r3
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	4610      	mov	r0, r2
 80061b2:	f7fe fdd4 	bl	8004d5e <vListInsertEnd>
 80061b6:	e005      	b.n	80061c4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	3318      	adds	r3, #24
 80061bc:	4619      	mov	r1, r3
 80061be:	480e      	ldr	r0, [pc, #56]	; (80061f8 <xTaskRemoveFromEventList+0xb8>)
 80061c0:	f7fe fdcd 	bl	8004d5e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <xTaskRemoveFromEventList+0xbc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d905      	bls.n	80061de <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80061d2:	2301      	movs	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <xTaskRemoveFromEventList+0xc0>)
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	e001      	b.n	80061e2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80061e2:	697b      	ldr	r3, [r7, #20]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000324 	.word	0x20000324
 80061f0:	20000304 	.word	0x20000304
 80061f4:	20000228 	.word	0x20000228
 80061f8:	200002bc 	.word	0x200002bc
 80061fc:	20000224 	.word	0x20000224
 8006200:	20000310 	.word	0x20000310

08006204 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800620c:	4b06      	ldr	r3, [pc, #24]	; (8006228 <vTaskInternalSetTimeOutState+0x24>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <vTaskInternalSetTimeOutState+0x28>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	605a      	str	r2, [r3, #4]
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	20000314 	.word	0x20000314
 800622c:	20000300 	.word	0x20000300

08006230 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	613b      	str	r3, [r7, #16]
    }
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	60fb      	str	r3, [r7, #12]
    }
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006272:	f001 f949 	bl	8007508 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006276:	4b1f      	ldr	r3, [pc, #124]	; (80062f4 <xTaskCheckForTimeOut+0xc4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	d102      	bne.n	8006296 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	e026      	b.n	80062e4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b17      	ldr	r3, [pc, #92]	; (80062f8 <xTaskCheckForTimeOut+0xc8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d00a      	beq.n	80062b8 <xTaskCheckForTimeOut+0x88>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d305      	bcc.n	80062b8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80062ac:	2301      	movs	r3, #1
 80062ae:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e015      	b.n	80062e4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d20b      	bcs.n	80062da <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	1ad2      	subs	r2, r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff ff98 	bl	8006204 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80062d4:	2300      	movs	r3, #0
 80062d6:	61fb      	str	r3, [r7, #28]
 80062d8:	e004      	b.n	80062e4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80062e0:	2301      	movs	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80062e4:	f001 f940 	bl	8007568 <vPortExitCritical>

    return xReturn;
 80062e8:	69fb      	ldr	r3, [r7, #28]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3720      	adds	r7, #32
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000300 	.word	0x20000300
 80062f8:	20000314 	.word	0x20000314

080062fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <vTaskMissedYield+0x14>)
 8006302:	2201      	movs	r2, #1
 8006304:	601a      	str	r2, [r3, #0]
}
 8006306:	bf00      	nop
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	20000310 	.word	0x20000310

08006314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800631c:	f000 f852 	bl	80063c4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <prvIdleTask+0x28>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d9f9      	bls.n	800631c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <prvIdleTask+0x2c>)
 800632a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006338:	e7f0      	b.n	800631c <prvIdleTask+0x8>
 800633a:	bf00      	nop
 800633c:	20000228 	.word	0x20000228
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800634a:	2300      	movs	r3, #0
 800634c:	607b      	str	r3, [r7, #4]
 800634e:	e00c      	b.n	800636a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4a12      	ldr	r2, [pc, #72]	; (80063a4 <prvInitialiseTaskLists+0x60>)
 800635c:	4413      	add	r3, r2
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe fcd0 	bl	8004d04 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3301      	adds	r3, #1
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b04      	cmp	r3, #4
 800636e:	d9ef      	bls.n	8006350 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006370:	480d      	ldr	r0, [pc, #52]	; (80063a8 <prvInitialiseTaskLists+0x64>)
 8006372:	f7fe fcc7 	bl	8004d04 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006376:	480d      	ldr	r0, [pc, #52]	; (80063ac <prvInitialiseTaskLists+0x68>)
 8006378:	f7fe fcc4 	bl	8004d04 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800637c:	480c      	ldr	r0, [pc, #48]	; (80063b0 <prvInitialiseTaskLists+0x6c>)
 800637e:	f7fe fcc1 	bl	8004d04 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006382:	480c      	ldr	r0, [pc, #48]	; (80063b4 <prvInitialiseTaskLists+0x70>)
 8006384:	f7fe fcbe 	bl	8004d04 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006388:	480b      	ldr	r0, [pc, #44]	; (80063b8 <prvInitialiseTaskLists+0x74>)
 800638a:	f7fe fcbb 	bl	8004d04 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800638e:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <prvInitialiseTaskLists+0x78>)
 8006390:	4a05      	ldr	r2, [pc, #20]	; (80063a8 <prvInitialiseTaskLists+0x64>)
 8006392:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <prvInitialiseTaskLists+0x7c>)
 8006396:	4a05      	ldr	r2, [pc, #20]	; (80063ac <prvInitialiseTaskLists+0x68>)
 8006398:	601a      	str	r2, [r3, #0]
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000228 	.word	0x20000228
 80063a8:	2000028c 	.word	0x2000028c
 80063ac:	200002a0 	.word	0x200002a0
 80063b0:	200002bc 	.word	0x200002bc
 80063b4:	200002d0 	.word	0x200002d0
 80063b8:	200002e8 	.word	0x200002e8
 80063bc:	200002b4 	.word	0x200002b4
 80063c0:	200002b8 	.word	0x200002b8

080063c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ca:	e019      	b.n	8006400 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80063cc:	f001 f89c 	bl	8007508 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d0:	4b10      	ldr	r3, [pc, #64]	; (8006414 <prvCheckTasksWaitingTermination+0x50>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3304      	adds	r3, #4
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fe fd1b 	bl	8004e18 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80063e2:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <prvCheckTasksWaitingTermination+0x54>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	4a0b      	ldr	r2, [pc, #44]	; (8006418 <prvCheckTasksWaitingTermination+0x54>)
 80063ea:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80063ec:	4b0b      	ldr	r3, [pc, #44]	; (800641c <prvCheckTasksWaitingTermination+0x58>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	4a0a      	ldr	r2, [pc, #40]	; (800641c <prvCheckTasksWaitingTermination+0x58>)
 80063f4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80063f6:	f001 f8b7 	bl	8007568 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f810 	bl	8006420 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006400:	4b06      	ldr	r3, [pc, #24]	; (800641c <prvCheckTasksWaitingTermination+0x58>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e1      	bne.n	80063cc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	200002d0 	.word	0x200002d0
 8006418:	200002fc 	.word	0x200002fc
 800641c:	200002e4 	.word	0x200002e4

08006420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	4618      	mov	r0, r3
 800642e:	f001 fa6d 	bl	800790c <vPortFree>
                vPortFree( pxTCB );
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 fa6a 	bl	800790c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <prvResetNextTaskUnblockTime+0x30>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d104      	bne.n	8006458 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800644e:	4b09      	ldr	r3, [pc, #36]	; (8006474 <prvResetNextTaskUnblockTime+0x34>)
 8006450:	f04f 32ff 	mov.w	r2, #4294967295
 8006454:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006456:	e005      	b.n	8006464 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <prvResetNextTaskUnblockTime+0x30>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a04      	ldr	r2, [pc, #16]	; (8006474 <prvResetNextTaskUnblockTime+0x34>)
 8006462:	6013      	str	r3, [r2, #0]
}
 8006464:	bf00      	nop
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	200002b4 	.word	0x200002b4
 8006474:	2000031c 	.word	0x2000031c

08006478 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800647e:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <xTaskGetSchedulerState+0x34>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006486:	2301      	movs	r3, #1
 8006488:	607b      	str	r3, [r7, #4]
 800648a:	e008      	b.n	800649e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800648c:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <xTaskGetSchedulerState+0x38>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006494:	2302      	movs	r3, #2
 8006496:	607b      	str	r3, [r7, #4]
 8006498:	e001      	b.n	800649e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800649a:	2300      	movs	r3, #0
 800649c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800649e:	687b      	ldr	r3, [r7, #4]
    }
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	20000308 	.word	0x20000308
 80064b0:	20000324 	.word	0x20000324

080064b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d063      	beq.n	8006592 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80064ca:	4b34      	ldr	r3, [pc, #208]	; (800659c <xTaskPriorityDisinherit+0xe8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d00a      	beq.n	80064ea <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	60fb      	str	r3, [r7, #12]
    }
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	60bb      	str	r3, [r7, #8]
    }
 8006504:	bf00      	nop
 8006506:	e7fe      	b.n	8006506 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650c:	1e5a      	subs	r2, r3, #1
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651a:	429a      	cmp	r2, r3
 800651c:	d039      	beq.n	8006592 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d135      	bne.n	8006592 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	3304      	adds	r3, #4
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fc74 	bl	8004e18 <uxListRemove>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	2201      	movs	r2, #1
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	43da      	mvns	r2, r3
 8006542:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <xTaskPriorityDisinherit+0xec>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4013      	ands	r3, r2
 8006548:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <xTaskPriorityDisinherit+0xec>)
 800654a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	f1c3 0205 	rsb	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	2201      	movs	r2, #1
 8006566:	409a      	lsls	r2, r3
 8006568:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <xTaskPriorityDisinherit+0xec>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4313      	orrs	r3, r2
 800656e:	4a0c      	ldr	r2, [pc, #48]	; (80065a0 <xTaskPriorityDisinherit+0xec>)
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4a09      	ldr	r2, [pc, #36]	; (80065a4 <xTaskPriorityDisinherit+0xf0>)
 8006580:	441a      	add	r2, r3
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	3304      	adds	r3, #4
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f7fe fbe8 	bl	8004d5e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800658e:	2301      	movs	r3, #1
 8006590:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006592:	697b      	ldr	r3, [r7, #20]
    }
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000224 	.word	0x20000224
 80065a0:	20000304 	.word	0x20000304
 80065a4:	20000228 	.word	0x20000228

080065a8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	613b      	str	r3, [r7, #16]
    }
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80065d2:	f000 ff99 	bl	8007508 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80065d6:	4b32      	ldr	r3, [pc, #200]	; (80066a0 <xTaskGenericNotifyWait+0xf8>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4413      	add	r3, r2
 80065de:	3354      	adds	r3, #84	; 0x54
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d022      	beq.n	800662e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80065e8:	4b2d      	ldr	r3, [pc, #180]	; (80066a0 <xTaskGenericNotifyWait+0xf8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	3214      	adds	r2, #20
 80065f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	43d2      	mvns	r2, r2
 80065f8:	4011      	ands	r1, r2
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	3214      	adds	r2, #20
 80065fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006602:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <xTaskGenericNotifyWait+0xf8>)
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	3354      	adds	r3, #84	; 0x54
 800660c:	2201      	movs	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006616:	2101      	movs	r1, #1
 8006618:	6a38      	ldr	r0, [r7, #32]
 800661a:	f000 fa27 	bl	8006a6c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800661e:	4b21      	ldr	r3, [pc, #132]	; (80066a4 <xTaskGenericNotifyWait+0xfc>)
 8006620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800662e:	f000 ff9b 	bl	8007568 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006632:	f000 ff69 	bl	8007508 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800663c:	4b18      	ldr	r3, [pc, #96]	; (80066a0 <xTaskGenericNotifyWait+0xf8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	3214      	adds	r2, #20
 8006644:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800664c:	4b14      	ldr	r3, [pc, #80]	; (80066a0 <xTaskGenericNotifyWait+0xf8>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	3354      	adds	r3, #84	; 0x54
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d002      	beq.n	8006664 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	e00e      	b.n	8006682 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006664:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <xTaskGenericNotifyWait+0xf8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	3214      	adds	r2, #20
 800666c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	43d2      	mvns	r2, r2
 8006674:	4011      	ands	r1, r2
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	3214      	adds	r2, #20
 800667a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800667e:	2301      	movs	r3, #1
 8006680:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006682:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <xTaskGenericNotifyWait+0xf8>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	3354      	adds	r3, #84	; 0x54
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006690:	f000 ff6a 	bl	8007568 <vPortExitCritical>

        return xReturn;
 8006694:	697b      	ldr	r3, [r7, #20]
    }
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000224 	.word	0x20000224
 80066a4:	e000ed04 	.word	0xe000ed04

080066a8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08c      	sub	sp, #48	; 0x30
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80066b6:	2301      	movs	r3, #1
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <xTaskGenericNotify+0x2e>
        __asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	623b      	str	r3, [r7, #32]
    }
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <xTaskGenericNotify+0x4a>
        __asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	61fb      	str	r3, [r7, #28]
    }
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80066f6:	f000 ff07 	bl	8007508 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	3214      	adds	r2, #20
 8006706:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800670e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4413      	add	r3, r2
 8006714:	3354      	adds	r3, #84	; 0x54
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800671c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4413      	add	r3, r2
 8006722:	3354      	adds	r3, #84	; 0x54
 8006724:	2202      	movs	r2, #2
 8006726:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	2b04      	cmp	r3, #4
 800672c:	d83b      	bhi.n	80067a6 <xTaskGenericNotify+0xfe>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <xTaskGenericNotify+0x8c>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	080067c5 	.word	0x080067c5
 8006738:	08006749 	.word	0x08006749
 800673c:	08006765 	.word	0x08006765
 8006740:	0800677d 	.word	0x0800677d
 8006744:	0800678b 	.word	0x0800678b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	3214      	adds	r2, #20
 800674e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	ea42 0103 	orr.w	r1, r2, r3
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	3214      	adds	r2, #20
 800675e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006762:	e032      	b.n	80067ca <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	3214      	adds	r2, #20
 800676a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	3214      	adds	r2, #20
 8006776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800677a:	e026      	b.n	80067ca <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	3214      	adds	r2, #20
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006788:	e01f      	b.n	80067ca <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800678a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800678e:	2b02      	cmp	r3, #2
 8006790:	d006      	beq.n	80067a0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	3214      	adds	r2, #20
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800679e:	e014      	b.n	80067ca <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80067a4:	e011      	b.n	80067ca <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80067a6:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <xTaskGenericNotify+0x1ac>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00c      	beq.n	80067c8 <xTaskGenericNotify+0x120>
        __asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	61bb      	str	r3, [r7, #24]
    }
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <xTaskGenericNotify+0x11a>
                    break;
 80067c4:	bf00      	nop
 80067c6:	e000      	b.n	80067ca <xTaskGenericNotify+0x122>

                    break;
 80067c8:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80067ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d139      	bne.n	8006846 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	3304      	adds	r3, #4
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe fb1e 	bl	8004e18 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	2201      	movs	r2, #1
 80067e2:	409a      	lsls	r2, r3
 80067e4:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <xTaskGenericNotify+0x1b0>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	4a1b      	ldr	r2, [pc, #108]	; (8006858 <xTaskGenericNotify+0x1b0>)
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4a18      	ldr	r2, [pc, #96]	; (800685c <xTaskGenericNotify+0x1b4>)
 80067fc:	441a      	add	r2, r3
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	3304      	adds	r3, #4
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f7fe faaa 	bl	8004d5e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <xTaskGenericNotify+0x180>
        __asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	617b      	str	r3, [r7, #20]
    }
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682c:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <xTaskGenericNotify+0x1b8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	429a      	cmp	r2, r3
 8006834:	d907      	bls.n	8006846 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006836:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <xTaskGenericNotify+0x1bc>)
 8006838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006846:	f000 fe8f 	bl	8007568 <vPortExitCritical>

        return xReturn;
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800684c:	4618      	mov	r0, r3
 800684e:	3730      	adds	r7, #48	; 0x30
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	20000300 	.word	0x20000300
 8006858:	20000304 	.word	0x20000304
 800685c:	20000228 	.word	0x20000228
 8006860:	20000224 	.word	0x20000224
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006868:	b580      	push	{r7, lr}
 800686a:	b090      	sub	sp, #64	; 0x40
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006876:	2301      	movs	r3, #1
 8006878:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068b2:	f000 ff0b 	bl	80076cc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80068ba:	f3ef 8211 	mrs	r2, BASEPRI
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	627a      	str	r2, [r7, #36]	; 0x24
 80068d0:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80068d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d006      	beq.n	80068ea <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	3214      	adds	r2, #20
 80068e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80068ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4413      	add	r3, r2
 80068f0:	3354      	adds	r3, #84	; 0x54
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80068f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	3354      	adds	r3, #84	; 0x54
 8006900:	2202      	movs	r2, #2
 8006902:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	2b04      	cmp	r3, #4
 8006908:	d83b      	bhi.n	8006982 <xTaskGenericNotifyFromISR+0x11a>
 800690a:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <xTaskGenericNotifyFromISR+0xa8>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	080069a1 	.word	0x080069a1
 8006914:	08006925 	.word	0x08006925
 8006918:	08006941 	.word	0x08006941
 800691c:	08006959 	.word	0x08006959
 8006920:	08006967 	.word	0x08006967
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	3214      	adds	r2, #20
 800692a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	ea42 0103 	orr.w	r1, r2, r3
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	3214      	adds	r2, #20
 800693a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800693e:	e032      	b.n	80069a6 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	3214      	adds	r2, #20
 8006946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	3214      	adds	r2, #20
 8006952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006956:	e026      	b.n	80069a6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	3214      	adds	r2, #20
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006964:	e01f      	b.n	80069a6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006966:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800696a:	2b02      	cmp	r3, #2
 800696c:	d006      	beq.n	800697c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	3214      	adds	r2, #20
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800697a:	e014      	b.n	80069a6 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800697c:	2300      	movs	r3, #0
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006980:	e011      	b.n	80069a6 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006982:	4b33      	ldr	r3, [pc, #204]	; (8006a50 <xTaskGenericNotifyFromISR+0x1e8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00c      	beq.n	80069a4 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	61fb      	str	r3, [r7, #28]
    }
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xTaskGenericNotifyFromISR+0x136>
                    break;
 80069a0:	bf00      	nop
 80069a2:	e000      	b.n	80069a6 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80069a4:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80069a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d145      	bne.n	8006a3a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	61bb      	str	r3, [r7, #24]
    }
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069cc:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <xTaskGenericNotifyFromISR+0x1ec>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d11c      	bne.n	8006a0e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	3304      	adds	r3, #4
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe fa1d 	bl	8004e18 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e2:	2201      	movs	r2, #1
 80069e4:	409a      	lsls	r2, r3
 80069e6:	4b1c      	ldr	r3, [pc, #112]	; (8006a58 <xTaskGenericNotifyFromISR+0x1f0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	4a1a      	ldr	r2, [pc, #104]	; (8006a58 <xTaskGenericNotifyFromISR+0x1f0>)
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4a17      	ldr	r2, [pc, #92]	; (8006a5c <xTaskGenericNotifyFromISR+0x1f4>)
 80069fe:	441a      	add	r2, r3
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	3304      	adds	r3, #4
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f7fe f9a9 	bl	8004d5e <vListInsertEnd>
 8006a0c:	e005      	b.n	8006a1a <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	3318      	adds	r3, #24
 8006a12:	4619      	mov	r1, r3
 8006a14:	4812      	ldr	r0, [pc, #72]	; (8006a60 <xTaskGenericNotifyFromISR+0x1f8>)
 8006a16:	f7fe f9a2 	bl	8004d5e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1e:	4b11      	ldr	r3, [pc, #68]	; (8006a64 <xTaskGenericNotifyFromISR+0x1fc>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d908      	bls.n	8006a3a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a30:	2201      	movs	r2, #1
 8006a32:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <xTaskGenericNotifyFromISR+0x200>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3c:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f383 8811 	msr	BASEPRI, r3
    }
 8006a44:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3740      	adds	r7, #64	; 0x40
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	20000300 	.word	0x20000300
 8006a54:	20000324 	.word	0x20000324
 8006a58:	20000304 	.word	0x20000304
 8006a5c:	20000228 	.word	0x20000228
 8006a60:	200002bc 	.word	0x200002bc
 8006a64:	20000224 	.word	0x20000224
 8006a68:	20000310 	.word	0x20000310

08006a6c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006a76:	4b29      	ldr	r3, [pc, #164]	; (8006b1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a7c:	4b28      	ldr	r3, [pc, #160]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe f9c8 	bl	8004e18 <uxListRemove>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10b      	bne.n	8006aa6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a8e:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	2201      	movs	r2, #1
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	43da      	mvns	r2, r3
 8006a9c:	4b21      	ldr	r3, [pc, #132]	; (8006b24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	4a20      	ldr	r2, [pc, #128]	; (8006b24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006aa4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d10a      	bne.n	8006ac4 <prvAddCurrentTaskToDelayedList+0x58>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ab4:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4619      	mov	r1, r3
 8006abc:	481a      	ldr	r0, [pc, #104]	; (8006b28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006abe:	f7fe f94e 	bl	8004d5e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006ac2:	e026      	b.n	8006b12 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4413      	add	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006acc:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d209      	bcs.n	8006af0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006adc:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f7fe f95c 	bl	8004da6 <vListInsert>
}
 8006aee:	e010      	b.n	8006b12 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4619      	mov	r1, r3
 8006afc:	4610      	mov	r0, r2
 8006afe:	f7fe f952 	bl	8004da6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006b02:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d202      	bcs.n	8006b12 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006b0c:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6013      	str	r3, [r2, #0]
}
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000300 	.word	0x20000300
 8006b20:	20000224 	.word	0x20000224
 8006b24:	20000304 	.word	0x20000304
 8006b28:	200002e8 	.word	0x200002e8
 8006b2c:	200002b8 	.word	0x200002b8
 8006b30:	200002b4 	.word	0x200002b4
 8006b34:	2000031c 	.word	0x2000031c

08006b38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006b42:	f000 fb31 	bl	80071a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006b46:	4b11      	ldr	r3, [pc, #68]	; (8006b8c <xTimerCreateTimerTask+0x54>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006b4e:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <xTimerCreateTimerTask+0x58>)
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	2302      	movs	r3, #2
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	2300      	movs	r3, #0
 8006b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006b5c:	490d      	ldr	r1, [pc, #52]	; (8006b94 <xTimerCreateTimerTask+0x5c>)
 8006b5e:	480e      	ldr	r0, [pc, #56]	; (8006b98 <xTimerCreateTimerTask+0x60>)
 8006b60:	f7fe ff38 	bl	80059d4 <xTaskCreate>
 8006b64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10a      	bne.n	8006b82 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	603b      	str	r3, [r7, #0]
    }
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006b82:	687b      	ldr	r3, [r7, #4]
    }
 8006b84:	4618      	mov	r0, r3
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20000358 	.word	0x20000358
 8006b90:	2000035c 	.word	0x2000035c
 8006b94:	0800912c 	.word	0x0800912c
 8006b98:	08006d89 	.word	0x08006d89

08006b9c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006baa:	202c      	movs	r0, #44	; 0x2c
 8006bac:	f000 fdce 	bl	800774c <pvPortMalloc>
 8006bb0:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00d      	beq.n	8006bd4 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	9301      	str	r3, [sp, #4]
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	68b9      	ldr	r1, [r7, #8]
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 f805 	bl	8006bde <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006bd4:	697b      	ldr	r3, [r7, #20]
        }
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b086      	sub	sp, #24
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	617b      	str	r3, [r7, #20]
    }
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d01e      	beq.n	8006c4c <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006c0e:	f000 facb 	bl	80071a8 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	6a3a      	ldr	r2, [r7, #32]
 8006c28:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fe f888 	bl	8004d44 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d008      	beq.n	8006c4c <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c40:	f043 0304 	orr.w	r3, r3, #4
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006c4c:	bf00      	nop
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	623b      	str	r3, [r7, #32]
    }
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006c82:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <xTimerGenericCommand+0x98>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d02a      	beq.n	8006ce0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b05      	cmp	r3, #5
 8006c9a:	dc18      	bgt.n	8006cce <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c9c:	f7ff fbec 	bl	8006478 <xTaskGetSchedulerState>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d109      	bne.n	8006cba <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ca6:	4b11      	ldr	r3, [pc, #68]	; (8006cec <xTimerGenericCommand+0x98>)
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	f107 0114 	add.w	r1, r7, #20
 8006cae:	2300      	movs	r3, #0
 8006cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb2:	f7fe f9c5 	bl	8005040 <xQueueGenericSend>
 8006cb6:	6278      	str	r0, [r7, #36]	; 0x24
 8006cb8:	e012      	b.n	8006ce0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006cba:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <xTimerGenericCommand+0x98>)
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	f107 0114 	add.w	r1, r7, #20
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f7fe f9bb 	bl	8005040 <xQueueGenericSend>
 8006cca:	6278      	str	r0, [r7, #36]	; 0x24
 8006ccc:	e008      	b.n	8006ce0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <xTimerGenericCommand+0x98>)
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	f107 0114 	add.w	r1, r7, #20
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	f7fe faaf 	bl	800523c <xQueueGenericSendFromISR>
 8006cde:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3728      	adds	r7, #40	; 0x28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000358 	.word	0x20000358

08006cf0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cfa:	4b22      	ldr	r3, [pc, #136]	; (8006d84 <prvProcessExpiredTimer+0x94>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe f885 	bl	8004e18 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d022      	beq.n	8006d62 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	18d1      	adds	r1, r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	6978      	ldr	r0, [r7, #20]
 8006d2a:	f000 f8d1 	bl	8006ed0 <prvInsertTimerInActiveList>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01f      	beq.n	8006d74 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d34:	2300      	movs	r3, #0
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	6978      	ldr	r0, [r7, #20]
 8006d40:	f7ff ff88 	bl	8006c54 <xTimerGenericCommand>
 8006d44:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d113      	bne.n	8006d74 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	60fb      	str	r3, [r7, #12]
    }
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	6978      	ldr	r0, [r7, #20]
 8006d7a:	4798      	blx	r3
    }
 8006d7c:	bf00      	nop
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20000350 	.word	0x20000350

08006d88 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d90:	f107 0308 	add.w	r3, r7, #8
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 f857 	bl	8006e48 <prvGetNextExpireTime>
 8006d9a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f803 	bl	8006dac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006da6:	f000 f8d5 	bl	8006f54 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006daa:	e7f1      	b.n	8006d90 <prvTimerTask+0x8>

08006dac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006db6:	f7fe ffa5 	bl	8005d04 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dba:	f107 0308 	add.w	r3, r7, #8
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 f866 	bl	8006e90 <prvSampleTimeNow>
 8006dc4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d130      	bne.n	8006e2e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <prvProcessTimerOrBlockTask+0x3c>
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d806      	bhi.n	8006de8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006dda:	f7fe ffa1 	bl	8005d20 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff ff85 	bl	8006cf0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006de6:	e024      	b.n	8006e32 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d008      	beq.n	8006e00 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dee:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <prvProcessTimerOrBlockTask+0x90>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <prvProcessTimerOrBlockTask+0x50>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <prvProcessTimerOrBlockTask+0x52>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <prvProcessTimerOrBlockTask+0x94>)
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f7fe fdad 	bl	800596c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006e12:	f7fe ff85 	bl	8005d20 <xTaskResumeAll>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006e1c:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <prvProcessTimerOrBlockTask+0x98>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	f3bf 8f6f 	isb	sy
    }
 8006e2c:	e001      	b.n	8006e32 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006e2e:	f7fe ff77 	bl	8005d20 <xTaskResumeAll>
    }
 8006e32:	bf00      	nop
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000354 	.word	0x20000354
 8006e40:	20000358 	.word	0x20000358
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e50:	4b0e      	ldr	r3, [pc, #56]	; (8006e8c <prvGetNextExpireTime+0x44>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <prvGetNextExpireTime+0x16>
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	e000      	b.n	8006e60 <prvGetNextExpireTime+0x18>
 8006e5e:	2200      	movs	r2, #0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d105      	bne.n	8006e78 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e6c:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <prvGetNextExpireTime+0x44>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	e001      	b.n	8006e7c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
    }
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000350 	.word	0x20000350

08006e90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006e98:	f7fe ffde 	bl	8005e58 <xTaskGetTickCount>
 8006e9c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006e9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <prvSampleTimeNow+0x3c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d205      	bcs.n	8006eb4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006ea8:	f000 f91a 	bl	80070e0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	e002      	b.n	8006eba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006eba:	4a04      	ldr	r2, [pc, #16]	; (8006ecc <prvSampleTimeNow+0x3c>)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
    }
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000360 	.word	0x20000360

08006ed0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d812      	bhi.n	8006f1c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	1ad2      	subs	r2, r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d302      	bcc.n	8006f0a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006f04:	2301      	movs	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e01b      	b.n	8006f42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f0a:	4b10      	ldr	r3, [pc, #64]	; (8006f4c <prvInsertTimerInActiveList+0x7c>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3304      	adds	r3, #4
 8006f12:	4619      	mov	r1, r3
 8006f14:	4610      	mov	r0, r2
 8006f16:	f7fd ff46 	bl	8004da6 <vListInsert>
 8006f1a:	e012      	b.n	8006f42 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d206      	bcs.n	8006f32 <prvInsertTimerInActiveList+0x62>
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d302      	bcc.n	8006f32 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	e007      	b.n	8006f42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f32:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <prvInsertTimerInActiveList+0x80>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f7fd ff32 	bl	8004da6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006f42:	697b      	ldr	r3, [r7, #20]
    }
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000354 	.word	0x20000354
 8006f50:	20000350 	.word	0x20000350

08006f54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08c      	sub	sp, #48	; 0x30
 8006f58:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f5a:	e0ae      	b.n	80070ba <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f2c0 80ab 	blt.w	80070ba <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	3304      	adds	r3, #4
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fd ff4f 	bl	8004e18 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f7a:	1d3b      	adds	r3, r7, #4
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff ff87 	bl	8006e90 <prvSampleTimeNow>
 8006f82:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b09      	cmp	r3, #9
 8006f88:	f200 8096 	bhi.w	80070b8 <prvProcessReceivedCommands+0x164>
 8006f8c:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <prvProcessReceivedCommands+0x40>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fbd 	.word	0x08006fbd
 8006f98:	08006fbd 	.word	0x08006fbd
 8006f9c:	08006fbd 	.word	0x08006fbd
 8006fa0:	08007031 	.word	0x08007031
 8006fa4:	08007045 	.word	0x08007045
 8006fa8:	0800708f 	.word	0x0800708f
 8006fac:	08006fbd 	.word	0x08006fbd
 8006fb0:	08006fbd 	.word	0x08006fbd
 8006fb4:	08007031 	.word	0x08007031
 8006fb8:	08007045 	.word	0x08007045
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fc2:	f043 0301 	orr.w	r3, r3, #1
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	18d1      	adds	r1, r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a3a      	ldr	r2, [r7, #32]
 8006fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fdc:	f7ff ff78 	bl	8006ed0 <prvInsertTimerInActiveList>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d069      	beq.n	80070ba <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fec:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d05e      	beq.n	80070ba <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	441a      	add	r2, r3
 8007004:	2300      	movs	r3, #0
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	2300      	movs	r3, #0
 800700a:	2100      	movs	r1, #0
 800700c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800700e:	f7ff fe21 	bl	8006c54 <xTimerGenericCommand>
 8007012:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d14f      	bne.n	80070ba <prvProcessReceivedCommands+0x166>
        __asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	61bb      	str	r3, [r7, #24]
    }
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	b2da      	uxtb	r2, r3
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007042:	e03a      	b.n	80070ba <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	b2da      	uxtb	r2, r3
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	617b      	str	r3, [r7, #20]
    }
 8007076:	bf00      	nop
 8007078:	e7fe      	b.n	8007078 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	18d1      	adds	r1, r2, r3
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	6a3a      	ldr	r2, [r7, #32]
 8007086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007088:	f7ff ff22 	bl	8006ed0 <prvInsertTimerInActiveList>
                        break;
 800708c:	e015      	b.n	80070ba <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d103      	bne.n	80070a4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800709c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800709e:	f000 fc35 	bl	800790c <vPortFree>
 80070a2:	e00a      	b.n	80070ba <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80070b6:	e000      	b.n	80070ba <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 80070b8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ba:	4b08      	ldr	r3, [pc, #32]	; (80070dc <prvProcessReceivedCommands+0x188>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f107 0108 	add.w	r1, r7, #8
 80070c2:	2200      	movs	r2, #0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe f963 	bl	8005390 <xQueueReceive>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f47f af45 	bne.w	8006f5c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	3728      	adds	r7, #40	; 0x28
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000358 	.word	0x20000358

080070e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070e6:	e048      	b.n	800717a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070e8:	4b2d      	ldr	r3, [pc, #180]	; (80071a0 <prvSwitchTimerLists+0xc0>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f2:	4b2b      	ldr	r3, [pc, #172]	; (80071a0 <prvSwitchTimerLists+0xc0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3304      	adds	r3, #4
 8007100:	4618      	mov	r0, r3
 8007102:	f7fd fe89 	bl	8004e18 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d02e      	beq.n	800717a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4413      	add	r3, r2
 8007124:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	429a      	cmp	r2, r3
 800712c:	d90e      	bls.n	800714c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800713a:	4b19      	ldr	r3, [pc, #100]	; (80071a0 <prvSwitchTimerLists+0xc0>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3304      	adds	r3, #4
 8007142:	4619      	mov	r1, r3
 8007144:	4610      	mov	r0, r2
 8007146:	f7fd fe2e 	bl	8004da6 <vListInsert>
 800714a:	e016      	b.n	800717a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800714c:	2300      	movs	r3, #0
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	2300      	movs	r3, #0
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	2100      	movs	r1, #0
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff fd7c 	bl	8006c54 <xTimerGenericCommand>
 800715c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	603b      	str	r3, [r7, #0]
    }
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800717a:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <prvSwitchTimerLists+0xc0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1b1      	bne.n	80070e8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007184:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <prvSwitchTimerLists+0xc0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800718a:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <prvSwitchTimerLists+0xc4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a04      	ldr	r2, [pc, #16]	; (80071a0 <prvSwitchTimerLists+0xc0>)
 8007190:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007192:	4a04      	ldr	r2, [pc, #16]	; (80071a4 <prvSwitchTimerLists+0xc4>)
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	6013      	str	r3, [r2, #0]
    }
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000350 	.word	0x20000350
 80071a4:	20000354 	.word	0x20000354

080071a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80071ac:	f000 f9ac 	bl	8007508 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80071b0:	4b12      	ldr	r3, [pc, #72]	; (80071fc <prvCheckForValidListAndQueue+0x54>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d11d      	bne.n	80071f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80071b8:	4811      	ldr	r0, [pc, #68]	; (8007200 <prvCheckForValidListAndQueue+0x58>)
 80071ba:	f7fd fda3 	bl	8004d04 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80071be:	4811      	ldr	r0, [pc, #68]	; (8007204 <prvCheckForValidListAndQueue+0x5c>)
 80071c0:	f7fd fda0 	bl	8004d04 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80071c4:	4b10      	ldr	r3, [pc, #64]	; (8007208 <prvCheckForValidListAndQueue+0x60>)
 80071c6:	4a0e      	ldr	r2, [pc, #56]	; (8007200 <prvCheckForValidListAndQueue+0x58>)
 80071c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80071ca:	4b10      	ldr	r3, [pc, #64]	; (800720c <prvCheckForValidListAndQueue+0x64>)
 80071cc:	4a0d      	ldr	r2, [pc, #52]	; (8007204 <prvCheckForValidListAndQueue+0x5c>)
 80071ce:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80071d0:	2200      	movs	r2, #0
 80071d2:	210c      	movs	r1, #12
 80071d4:	200a      	movs	r0, #10
 80071d6:	f7fd feb1 	bl	8004f3c <xQueueGenericCreate>
 80071da:	4603      	mov	r3, r0
 80071dc:	4a07      	ldr	r2, [pc, #28]	; (80071fc <prvCheckForValidListAndQueue+0x54>)
 80071de:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <prvCheckForValidListAndQueue+0x54>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071e8:	4b04      	ldr	r3, [pc, #16]	; (80071fc <prvCheckForValidListAndQueue+0x54>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4908      	ldr	r1, [pc, #32]	; (8007210 <prvCheckForValidListAndQueue+0x68>)
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe fb92 	bl	8005918 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80071f4:	f000 f9b8 	bl	8007568 <vPortExitCritical>
    }
 80071f8:	bf00      	nop
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000358 	.word	0x20000358
 8007200:	20000328 	.word	0x20000328
 8007204:	2000033c 	.word	0x2000033c
 8007208:	20000350 	.word	0x20000350
 800720c:	20000354 	.word	0x20000354
 8007210:	08009134 	.word	0x08009134

08007214 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <xTimerIsTimerActive+0x28>
        __asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60fb      	str	r3, [r7, #12]
    }
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 800723c:	f000 f964 	bl	8007508 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d102      	bne.n	8007254 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e001      	b.n	8007258 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 8007254:	2301      	movs	r3, #1
 8007256:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8007258:	f000 f986 	bl	8007568 <vPortExitCritical>

        return xReturn;
 800725c:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007266:	b580      	push	{r7, lr}
 8007268:	b086      	sub	sp, #24
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <pvTimerGetTimerID+0x28>
        __asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	60fb      	str	r3, [r7, #12]
    }
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800728e:	f000 f93b 	bl	8007508 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007298:	f000 f966 	bl	8007568 <vPortExitCritical>

        return pvReturn;
 800729c:	693b      	ldr	r3, [r7, #16]
    }
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3b04      	subs	r3, #4
 80072b8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3b04      	subs	r3, #4
 80072c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f023 0201 	bic.w	r2, r3, #1
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3b04      	subs	r3, #4
 80072d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80072d8:	4a0c      	ldr	r2, [pc, #48]	; (800730c <pxPortInitialiseStack+0x64>)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3b14      	subs	r3, #20
 80072e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3b04      	subs	r3, #4
 80072ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f06f 0202 	mvn.w	r2, #2
 80072f6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3b20      	subs	r3, #32
 80072fc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80072fe:	68fb      	ldr	r3, [r7, #12]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	08007311 	.word	0x08007311

08007310 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800731a:	4b12      	ldr	r3, [pc, #72]	; (8007364 <prvTaskExitError+0x54>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007322:	d00a      	beq.n	800733a <prvTaskExitError+0x2a>
        __asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	60fb      	str	r3, [r7, #12]
    }
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <prvTaskExitError+0x28>
        __asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	60bb      	str	r3, [r7, #8]
    }
 800734c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800734e:	bf00      	nop
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0fc      	beq.n	8007350 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007356:	bf00      	nop
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	20000024 	.word	0x20000024
	...

08007370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007370:	4b07      	ldr	r3, [pc, #28]	; (8007390 <pxCurrentTCBConst2>)
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	6808      	ldr	r0, [r1, #0]
 8007376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737a:	f380 8809 	msr	PSP, r0
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f380 8811 	msr	BASEPRI, r0
 800738a:	4770      	bx	lr
 800738c:	f3af 8000 	nop.w

08007390 <pxCurrentTCBConst2>:
 8007390:	20000224 	.word	0x20000224
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007398:	4808      	ldr	r0, [pc, #32]	; (80073bc <prvPortStartFirstTask+0x24>)
 800739a:	6800      	ldr	r0, [r0, #0]
 800739c:	6800      	ldr	r0, [r0, #0]
 800739e:	f380 8808 	msr	MSP, r0
 80073a2:	f04f 0000 	mov.w	r0, #0
 80073a6:	f380 8814 	msr	CONTROL, r0
 80073aa:	b662      	cpsie	i
 80073ac:	b661      	cpsie	f
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	df00      	svc	0
 80073b8:	bf00      	nop
 80073ba:	0000      	.short	0x0000
 80073bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80073c0:	bf00      	nop
 80073c2:	bf00      	nop

080073c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073ca:	4b46      	ldr	r3, [pc, #280]	; (80074e4 <xPortStartScheduler+0x120>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a46      	ldr	r2, [pc, #280]	; (80074e8 <xPortStartScheduler+0x124>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d10a      	bne.n	80073ea <xPortStartScheduler+0x26>
        __asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	613b      	str	r3, [r7, #16]
    }
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073ea:	4b3e      	ldr	r3, [pc, #248]	; (80074e4 <xPortStartScheduler+0x120>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a3f      	ldr	r2, [pc, #252]	; (80074ec <xPortStartScheduler+0x128>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d10a      	bne.n	800740a <xPortStartScheduler+0x46>
        __asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	60fb      	str	r3, [r7, #12]
    }
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800740a:	4b39      	ldr	r3, [pc, #228]	; (80074f0 <xPortStartScheduler+0x12c>)
 800740c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	22ff      	movs	r2, #255	; 0xff
 800741a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800742c:	b2da      	uxtb	r2, r3
 800742e:	4b31      	ldr	r3, [pc, #196]	; (80074f4 <xPortStartScheduler+0x130>)
 8007430:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007432:	4b31      	ldr	r3, [pc, #196]	; (80074f8 <xPortStartScheduler+0x134>)
 8007434:	2207      	movs	r2, #7
 8007436:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007438:	e009      	b.n	800744e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800743a:	4b2f      	ldr	r3, [pc, #188]	; (80074f8 <xPortStartScheduler+0x134>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3b01      	subs	r3, #1
 8007440:	4a2d      	ldr	r2, [pc, #180]	; (80074f8 <xPortStartScheduler+0x134>)
 8007442:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	b2db      	uxtb	r3, r3
 800744c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800744e:	78fb      	ldrb	r3, [r7, #3]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007456:	2b80      	cmp	r3, #128	; 0x80
 8007458:	d0ef      	beq.n	800743a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800745a:	4b27      	ldr	r3, [pc, #156]	; (80074f8 <xPortStartScheduler+0x134>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1c3 0307 	rsb	r3, r3, #7
 8007462:	2b04      	cmp	r3, #4
 8007464:	d00a      	beq.n	800747c <xPortStartScheduler+0xb8>
        __asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	60bb      	str	r3, [r7, #8]
    }
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800747c:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <xPortStartScheduler+0x134>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	4a1d      	ldr	r2, [pc, #116]	; (80074f8 <xPortStartScheduler+0x134>)
 8007484:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007486:	4b1c      	ldr	r3, [pc, #112]	; (80074f8 <xPortStartScheduler+0x134>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800748e:	4a1a      	ldr	r2, [pc, #104]	; (80074f8 <xPortStartScheduler+0x134>)
 8007490:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800749a:	4b18      	ldr	r3, [pc, #96]	; (80074fc <xPortStartScheduler+0x138>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a17      	ldr	r2, [pc, #92]	; (80074fc <xPortStartScheduler+0x138>)
 80074a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80074a6:	4b15      	ldr	r3, [pc, #84]	; (80074fc <xPortStartScheduler+0x138>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a14      	ldr	r2, [pc, #80]	; (80074fc <xPortStartScheduler+0x138>)
 80074ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80074b2:	f000 f8db 	bl	800766c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80074b6:	4b12      	ldr	r3, [pc, #72]	; (8007500 <xPortStartScheduler+0x13c>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80074bc:	f000 f8fa 	bl	80076b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074c0:	4b10      	ldr	r3, [pc, #64]	; (8007504 <xPortStartScheduler+0x140>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a0f      	ldr	r2, [pc, #60]	; (8007504 <xPortStartScheduler+0x140>)
 80074c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80074cc:	f7ff ff64 	bl	8007398 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80074d0:	f7fe fd8a 	bl	8005fe8 <vTaskSwitchContext>
    prvTaskExitError();
 80074d4:	f7ff ff1c 	bl	8007310 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	e000ed00 	.word	0xe000ed00
 80074e8:	410fc271 	.word	0x410fc271
 80074ec:	410fc270 	.word	0x410fc270
 80074f0:	e000e400 	.word	0xe000e400
 80074f4:	20000364 	.word	0x20000364
 80074f8:	20000368 	.word	0x20000368
 80074fc:	e000ed20 	.word	0xe000ed20
 8007500:	20000024 	.word	0x20000024
 8007504:	e000ef34 	.word	0xe000ef34

08007508 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
        __asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	607b      	str	r3, [r7, #4]
    }
 8007520:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007522:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <vPortEnterCritical+0x58>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3301      	adds	r3, #1
 8007528:	4a0d      	ldr	r2, [pc, #52]	; (8007560 <vPortEnterCritical+0x58>)
 800752a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800752c:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <vPortEnterCritical+0x58>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d10f      	bne.n	8007554 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007534:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <vPortEnterCritical+0x5c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <vPortEnterCritical+0x4c>
        __asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	603b      	str	r3, [r7, #0]
    }
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <vPortEnterCritical+0x4a>
    }
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	20000024 	.word	0x20000024
 8007564:	e000ed04 	.word	0xe000ed04

08007568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <vPortExitCritical+0x50>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <vPortExitCritical+0x24>
        __asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	607b      	str	r3, [r7, #4]
    }
 8007588:	bf00      	nop
 800758a:	e7fe      	b.n	800758a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <vPortExitCritical+0x50>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3b01      	subs	r3, #1
 8007592:	4a09      	ldr	r2, [pc, #36]	; (80075b8 <vPortExitCritical+0x50>)
 8007594:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007596:	4b08      	ldr	r3, [pc, #32]	; (80075b8 <vPortExitCritical+0x50>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d105      	bne.n	80075aa <vPortExitCritical+0x42>
 800759e:	2300      	movs	r3, #0
 80075a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	f383 8811 	msr	BASEPRI, r3
    }
 80075a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20000024 	.word	0x20000024
 80075bc:	00000000 	.word	0x00000000

080075c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80075c0:	f3ef 8009 	mrs	r0, PSP
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	4b15      	ldr	r3, [pc, #84]	; (8007620 <pxCurrentTCBConst>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	f01e 0f10 	tst.w	lr, #16
 80075d0:	bf08      	it	eq
 80075d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075da:	6010      	str	r0, [r2, #0]
 80075dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075e4:	f380 8811 	msr	BASEPRI, r0
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f7fe fcfa 	bl	8005fe8 <vTaskSwitchContext>
 80075f4:	f04f 0000 	mov.w	r0, #0
 80075f8:	f380 8811 	msr	BASEPRI, r0
 80075fc:	bc09      	pop	{r0, r3}
 80075fe:	6819      	ldr	r1, [r3, #0]
 8007600:	6808      	ldr	r0, [r1, #0]
 8007602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007606:	f01e 0f10 	tst.w	lr, #16
 800760a:	bf08      	it	eq
 800760c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007610:	f380 8809 	msr	PSP, r0
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	f3af 8000 	nop.w

08007620 <pxCurrentTCBConst>:
 8007620:	20000224 	.word	0x20000224
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop

08007628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
        __asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	607b      	str	r3, [r7, #4]
    }
 8007640:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007642:	f7fe fc19 	bl	8005e78 <xTaskIncrementTick>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800764c:	4b06      	ldr	r3, [pc, #24]	; (8007668 <SysTick_Handler+0x40>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	2300      	movs	r3, #0
 8007656:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f383 8811 	msr	BASEPRI, r3
    }
 800765e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007670:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <vPortSetupTimerInterrupt+0x34>)
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007676:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <vPortSetupTimerInterrupt+0x38>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800767c:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <vPortSetupTimerInterrupt+0x3c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a0a      	ldr	r2, [pc, #40]	; (80076ac <vPortSetupTimerInterrupt+0x40>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	099b      	lsrs	r3, r3, #6
 8007688:	4a09      	ldr	r2, [pc, #36]	; (80076b0 <vPortSetupTimerInterrupt+0x44>)
 800768a:	3b01      	subs	r3, #1
 800768c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800768e:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <vPortSetupTimerInterrupt+0x34>)
 8007690:	2207      	movs	r2, #7
 8007692:	601a      	str	r2, [r3, #0]
}
 8007694:	bf00      	nop
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	e000e010 	.word	0xe000e010
 80076a4:	e000e018 	.word	0xe000e018
 80076a8:	20000010 	.word	0x20000010
 80076ac:	10624dd3 	.word	0x10624dd3
 80076b0:	e000e014 	.word	0xe000e014

080076b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80076b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076c4 <vPortEnableVFP+0x10>
 80076b8:	6801      	ldr	r1, [r0, #0]
 80076ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076be:	6001      	str	r1, [r0, #0]
 80076c0:	4770      	bx	lr
 80076c2:	0000      	.short	0x0000
 80076c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop

080076cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80076d2:	f3ef 8305 	mrs	r3, IPSR
 80076d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b0f      	cmp	r3, #15
 80076dc:	d914      	bls.n	8007708 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076de:	4a17      	ldr	r2, [pc, #92]	; (800773c <vPortValidateInterruptPriority+0x70>)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076e8:	4b15      	ldr	r3, [pc, #84]	; (8007740 <vPortValidateInterruptPriority+0x74>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	7afa      	ldrb	r2, [r7, #11]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d20a      	bcs.n	8007708 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	607b      	str	r3, [r7, #4]
    }
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <vPortValidateInterruptPriority+0x78>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007710:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <vPortValidateInterruptPriority+0x7c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d90a      	bls.n	800772e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	603b      	str	r3, [r7, #0]
    }
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <vPortValidateInterruptPriority+0x60>
    }
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	e000e3f0 	.word	0xe000e3f0
 8007740:	20000364 	.word	0x20000364
 8007744:	e000ed0c 	.word	0xe000ed0c
 8007748:	20000368 	.word	0x20000368

0800774c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007758:	f7fe fad4 	bl	8005d04 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800775c:	4b65      	ldr	r3, [pc, #404]	; (80078f4 <pvPortMalloc+0x1a8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007764:	f000 f934 	bl	80079d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007768:	4b63      	ldr	r3, [pc, #396]	; (80078f8 <pvPortMalloc+0x1ac>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4013      	ands	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	f040 80a7 	bne.w	80078c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d02d      	beq.n	80077d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800777c:	2208      	movs	r2, #8
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	429a      	cmp	r2, r3
 8007786:	d227      	bcs.n	80077d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007788:	2208      	movs	r2, #8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	2b00      	cmp	r3, #0
 8007798:	d021      	beq.n	80077de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f023 0307 	bic.w	r3, r3, #7
 80077a0:	3308      	adds	r3, #8
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d214      	bcs.n	80077d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f023 0307 	bic.w	r3, r3, #7
 80077ae:	3308      	adds	r3, #8
 80077b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d010      	beq.n	80077de <pvPortMalloc+0x92>
        __asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	617b      	str	r3, [r7, #20]
    }
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077d6:	e002      	b.n	80077de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80077d8:	2300      	movs	r3, #0
 80077da:	607b      	str	r3, [r7, #4]
 80077dc:	e000      	b.n	80077e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d06e      	beq.n	80078c4 <pvPortMalloc+0x178>
 80077e6:	4b45      	ldr	r3, [pc, #276]	; (80078fc <pvPortMalloc+0x1b0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d869      	bhi.n	80078c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80077f0:	4b43      	ldr	r3, [pc, #268]	; (8007900 <pvPortMalloc+0x1b4>)
 80077f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80077f4:	4b42      	ldr	r3, [pc, #264]	; (8007900 <pvPortMalloc+0x1b4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077fa:	e004      	b.n	8007806 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	d903      	bls.n	8007818 <pvPortMalloc+0xcc>
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f1      	bne.n	80077fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007818:	4b36      	ldr	r3, [pc, #216]	; (80078f4 <pvPortMalloc+0x1a8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781e:	429a      	cmp	r2, r3
 8007820:	d050      	beq.n	80078c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2208      	movs	r2, #8
 8007828:	4413      	add	r3, r2
 800782a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	1ad2      	subs	r2, r2, r3
 800783c:	2308      	movs	r3, #8
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	429a      	cmp	r2, r3
 8007842:	d91f      	bls.n	8007884 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <pvPortMalloc+0x120>
        __asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	613b      	str	r3, [r7, #16]
    }
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	1ad2      	subs	r2, r2, r3
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800787e:	69b8      	ldr	r0, [r7, #24]
 8007880:	f000 f908 	bl	8007a94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007884:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <pvPortMalloc+0x1b0>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	4a1b      	ldr	r2, [pc, #108]	; (80078fc <pvPortMalloc+0x1b0>)
 8007890:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007892:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <pvPortMalloc+0x1b0>)
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <pvPortMalloc+0x1b8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d203      	bcs.n	80078a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800789e:	4b17      	ldr	r3, [pc, #92]	; (80078fc <pvPortMalloc+0x1b0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a18      	ldr	r2, [pc, #96]	; (8007904 <pvPortMalloc+0x1b8>)
 80078a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <pvPortMalloc+0x1ac>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80078ba:	4b13      	ldr	r3, [pc, #76]	; (8007908 <pvPortMalloc+0x1bc>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3301      	adds	r3, #1
 80078c0:	4a11      	ldr	r2, [pc, #68]	; (8007908 <pvPortMalloc+0x1bc>)
 80078c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80078c4:	f7fe fa2c 	bl	8005d20 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <pvPortMalloc+0x19c>
        __asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	60fb      	str	r3, [r7, #12]
    }
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80078e8:	69fb      	ldr	r3, [r7, #28]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3728      	adds	r7, #40	; 0x28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20019374 	.word	0x20019374
 80078f8:	20019388 	.word	0x20019388
 80078fc:	20019378 	.word	0x20019378
 8007900:	2001936c 	.word	0x2001936c
 8007904:	2001937c 	.word	0x2001937c
 8007908:	20019380 	.word	0x20019380

0800790c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d04d      	beq.n	80079ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800791e:	2308      	movs	r3, #8
 8007920:	425b      	negs	r3, r3
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4413      	add	r3, r2
 8007926:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <vPortFree+0xb8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4013      	ands	r3, r2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <vPortFree+0x44>
        __asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	60fb      	str	r3, [r7, #12]
    }
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00a      	beq.n	800796e <vPortFree+0x62>
        __asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	60bb      	str	r3, [r7, #8]
    }
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <vPortFree+0xb8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4013      	ands	r3, r2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01e      	beq.n	80079ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11a      	bne.n	80079ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	4b0e      	ldr	r3, [pc, #56]	; (80079c4 <vPortFree+0xb8>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	43db      	mvns	r3, r3
 800798e:	401a      	ands	r2, r3
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007994:	f7fe f9b6 	bl	8005d04 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	4b0a      	ldr	r3, [pc, #40]	; (80079c8 <vPortFree+0xbc>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4413      	add	r3, r2
 80079a2:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <vPortFree+0xbc>)
 80079a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079a6:	6938      	ldr	r0, [r7, #16]
 80079a8:	f000 f874 	bl	8007a94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80079ac:	4b07      	ldr	r3, [pc, #28]	; (80079cc <vPortFree+0xc0>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3301      	adds	r3, #1
 80079b2:	4a06      	ldr	r2, [pc, #24]	; (80079cc <vPortFree+0xc0>)
 80079b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80079b6:	f7fe f9b3 	bl	8005d20 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80079ba:	bf00      	nop
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20019388 	.word	0x20019388
 80079c8:	20019378 	.word	0x20019378
 80079cc:	20019384 	.word	0x20019384

080079d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079d6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80079da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80079dc:	4b27      	ldr	r3, [pc, #156]	; (8007a7c <prvHeapInit+0xac>)
 80079de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00c      	beq.n	8007a04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3307      	adds	r3, #7
 80079ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0307 	bic.w	r3, r3, #7
 80079f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	4a1f      	ldr	r2, [pc, #124]	; (8007a7c <prvHeapInit+0xac>)
 8007a00:	4413      	add	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a08:	4a1d      	ldr	r2, [pc, #116]	; (8007a80 <prvHeapInit+0xb0>)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007a0e:	4b1c      	ldr	r3, [pc, #112]	; (8007a80 <prvHeapInit+0xb0>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	4413      	add	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	1a9b      	subs	r3, r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0307 	bic.w	r3, r3, #7
 8007a2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4a15      	ldr	r2, [pc, #84]	; (8007a84 <prvHeapInit+0xb4>)
 8007a30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007a32:	4b14      	ldr	r3, [pc, #80]	; (8007a84 <prvHeapInit+0xb4>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007a3a:	4b12      	ldr	r3, [pc, #72]	; (8007a84 <prvHeapInit+0xb4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	1ad2      	subs	r2, r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a50:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <prvHeapInit+0xb4>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	4a0a      	ldr	r2, [pc, #40]	; (8007a88 <prvHeapInit+0xb8>)
 8007a5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	4a09      	ldr	r2, [pc, #36]	; (8007a8c <prvHeapInit+0xbc>)
 8007a66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a68:	4b09      	ldr	r3, [pc, #36]	; (8007a90 <prvHeapInit+0xc0>)
 8007a6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a6e:	601a      	str	r2, [r3, #0]
}
 8007a70:	bf00      	nop
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	2000036c 	.word	0x2000036c
 8007a80:	2001936c 	.word	0x2001936c
 8007a84:	20019374 	.word	0x20019374
 8007a88:	2001937c 	.word	0x2001937c
 8007a8c:	20019378 	.word	0x20019378
 8007a90:	20019388 	.word	0x20019388

08007a94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a9c:	4b28      	ldr	r3, [pc, #160]	; (8007b40 <prvInsertBlockIntoFreeList+0xac>)
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	e002      	b.n	8007aa8 <prvInsertBlockIntoFreeList+0x14>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d8f7      	bhi.n	8007aa2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	4413      	add	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d108      	bne.n	8007ad6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	441a      	add	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	441a      	add	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d118      	bne.n	8007b1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4b15      	ldr	r3, [pc, #84]	; (8007b44 <prvInsertBlockIntoFreeList+0xb0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d00d      	beq.n	8007b12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	441a      	add	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e008      	b.n	8007b24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b12:	4b0c      	ldr	r3, [pc, #48]	; (8007b44 <prvInsertBlockIntoFreeList+0xb0>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	e003      	b.n	8007b24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d002      	beq.n	8007b32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	2001936c 	.word	0x2001936c
 8007b44:	20019374 	.word	0x20019374

08007b48 <std>:
 8007b48:	2300      	movs	r3, #0
 8007b4a:	b510      	push	{r4, lr}
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b56:	6083      	str	r3, [r0, #8]
 8007b58:	8181      	strh	r1, [r0, #12]
 8007b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b5c:	81c2      	strh	r2, [r0, #14]
 8007b5e:	6183      	str	r3, [r0, #24]
 8007b60:	4619      	mov	r1, r3
 8007b62:	2208      	movs	r2, #8
 8007b64:	305c      	adds	r0, #92	; 0x5c
 8007b66:	f000 f914 	bl	8007d92 <memset>
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <std+0x38>)
 8007b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b6e:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <std+0x3c>)
 8007b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <std+0x40>)
 8007b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <std+0x44>)
 8007b78:	6224      	str	r4, [r4, #32]
 8007b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b7c:	bd10      	pop	{r4, pc}
 8007b7e:	bf00      	nop
 8007b80:	08007d0d 	.word	0x08007d0d
 8007b84:	08007d2f 	.word	0x08007d2f
 8007b88:	08007d67 	.word	0x08007d67
 8007b8c:	08007d8b 	.word	0x08007d8b

08007b90 <stdio_exit_handler>:
 8007b90:	4a02      	ldr	r2, [pc, #8]	; (8007b9c <stdio_exit_handler+0xc>)
 8007b92:	4903      	ldr	r1, [pc, #12]	; (8007ba0 <stdio_exit_handler+0x10>)
 8007b94:	4803      	ldr	r0, [pc, #12]	; (8007ba4 <stdio_exit_handler+0x14>)
 8007b96:	f000 b869 	b.w	8007c6c <_fwalk_sglue>
 8007b9a:	bf00      	nop
 8007b9c:	20000028 	.word	0x20000028
 8007ba0:	080089f9 	.word	0x080089f9
 8007ba4:	20000034 	.word	0x20000034

08007ba8 <cleanup_stdio>:
 8007ba8:	6841      	ldr	r1, [r0, #4]
 8007baa:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <cleanup_stdio+0x34>)
 8007bac:	4299      	cmp	r1, r3
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	d001      	beq.n	8007bb8 <cleanup_stdio+0x10>
 8007bb4:	f000 ff20 	bl	80089f8 <_fflush_r>
 8007bb8:	68a1      	ldr	r1, [r4, #8]
 8007bba:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <cleanup_stdio+0x38>)
 8007bbc:	4299      	cmp	r1, r3
 8007bbe:	d002      	beq.n	8007bc6 <cleanup_stdio+0x1e>
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 ff19 	bl	80089f8 <_fflush_r>
 8007bc6:	68e1      	ldr	r1, [r4, #12]
 8007bc8:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <cleanup_stdio+0x3c>)
 8007bca:	4299      	cmp	r1, r3
 8007bcc:	d004      	beq.n	8007bd8 <cleanup_stdio+0x30>
 8007bce:	4620      	mov	r0, r4
 8007bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd4:	f000 bf10 	b.w	80089f8 <_fflush_r>
 8007bd8:	bd10      	pop	{r4, pc}
 8007bda:	bf00      	nop
 8007bdc:	2001938c 	.word	0x2001938c
 8007be0:	200193f4 	.word	0x200193f4
 8007be4:	2001945c 	.word	0x2001945c

08007be8 <global_stdio_init.part.0>:
 8007be8:	b510      	push	{r4, lr}
 8007bea:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <global_stdio_init.part.0+0x30>)
 8007bec:	4c0b      	ldr	r4, [pc, #44]	; (8007c1c <global_stdio_init.part.0+0x34>)
 8007bee:	4a0c      	ldr	r2, [pc, #48]	; (8007c20 <global_stdio_init.part.0+0x38>)
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2104      	movs	r1, #4
 8007bf8:	f7ff ffa6 	bl	8007b48 <std>
 8007bfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c00:	2201      	movs	r2, #1
 8007c02:	2109      	movs	r1, #9
 8007c04:	f7ff ffa0 	bl	8007b48 <std>
 8007c08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c12:	2112      	movs	r1, #18
 8007c14:	f7ff bf98 	b.w	8007b48 <std>
 8007c18:	200194c4 	.word	0x200194c4
 8007c1c:	2001938c 	.word	0x2001938c
 8007c20:	08007b91 	.word	0x08007b91

08007c24 <__sfp_lock_acquire>:
 8007c24:	4801      	ldr	r0, [pc, #4]	; (8007c2c <__sfp_lock_acquire+0x8>)
 8007c26:	f000 b92d 	b.w	8007e84 <__retarget_lock_acquire_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	200194cd 	.word	0x200194cd

08007c30 <__sfp_lock_release>:
 8007c30:	4801      	ldr	r0, [pc, #4]	; (8007c38 <__sfp_lock_release+0x8>)
 8007c32:	f000 b928 	b.w	8007e86 <__retarget_lock_release_recursive>
 8007c36:	bf00      	nop
 8007c38:	200194cd 	.word	0x200194cd

08007c3c <__sinit>:
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	4604      	mov	r4, r0
 8007c40:	f7ff fff0 	bl	8007c24 <__sfp_lock_acquire>
 8007c44:	6a23      	ldr	r3, [r4, #32]
 8007c46:	b11b      	cbz	r3, 8007c50 <__sinit+0x14>
 8007c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c4c:	f7ff bff0 	b.w	8007c30 <__sfp_lock_release>
 8007c50:	4b04      	ldr	r3, [pc, #16]	; (8007c64 <__sinit+0x28>)
 8007c52:	6223      	str	r3, [r4, #32]
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <__sinit+0x2c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1f5      	bne.n	8007c48 <__sinit+0xc>
 8007c5c:	f7ff ffc4 	bl	8007be8 <global_stdio_init.part.0>
 8007c60:	e7f2      	b.n	8007c48 <__sinit+0xc>
 8007c62:	bf00      	nop
 8007c64:	08007ba9 	.word	0x08007ba9
 8007c68:	200194c4 	.word	0x200194c4

08007c6c <_fwalk_sglue>:
 8007c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c70:	4607      	mov	r7, r0
 8007c72:	4688      	mov	r8, r1
 8007c74:	4614      	mov	r4, r2
 8007c76:	2600      	movs	r6, #0
 8007c78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c7c:	f1b9 0901 	subs.w	r9, r9, #1
 8007c80:	d505      	bpl.n	8007c8e <_fwalk_sglue+0x22>
 8007c82:	6824      	ldr	r4, [r4, #0]
 8007c84:	2c00      	cmp	r4, #0
 8007c86:	d1f7      	bne.n	8007c78 <_fwalk_sglue+0xc>
 8007c88:	4630      	mov	r0, r6
 8007c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c8e:	89ab      	ldrh	r3, [r5, #12]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d907      	bls.n	8007ca4 <_fwalk_sglue+0x38>
 8007c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	d003      	beq.n	8007ca4 <_fwalk_sglue+0x38>
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	47c0      	blx	r8
 8007ca2:	4306      	orrs	r6, r0
 8007ca4:	3568      	adds	r5, #104	; 0x68
 8007ca6:	e7e9      	b.n	8007c7c <_fwalk_sglue+0x10>

08007ca8 <iprintf>:
 8007ca8:	b40f      	push	{r0, r1, r2, r3}
 8007caa:	b507      	push	{r0, r1, r2, lr}
 8007cac:	4906      	ldr	r1, [pc, #24]	; (8007cc8 <iprintf+0x20>)
 8007cae:	ab04      	add	r3, sp, #16
 8007cb0:	6808      	ldr	r0, [r1, #0]
 8007cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb6:	6881      	ldr	r1, [r0, #8]
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	f000 fb6d 	bl	8008398 <_vfiprintf_r>
 8007cbe:	b003      	add	sp, #12
 8007cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cc4:	b004      	add	sp, #16
 8007cc6:	4770      	bx	lr
 8007cc8:	20000080 	.word	0x20000080

08007ccc <siprintf>:
 8007ccc:	b40e      	push	{r1, r2, r3}
 8007cce:	b500      	push	{lr}
 8007cd0:	b09c      	sub	sp, #112	; 0x70
 8007cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8007cd4:	9002      	str	r0, [sp, #8]
 8007cd6:	9006      	str	r0, [sp, #24]
 8007cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cdc:	4809      	ldr	r0, [pc, #36]	; (8007d04 <siprintf+0x38>)
 8007cde:	9107      	str	r1, [sp, #28]
 8007ce0:	9104      	str	r1, [sp, #16]
 8007ce2:	4909      	ldr	r1, [pc, #36]	; (8007d08 <siprintf+0x3c>)
 8007ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce8:	9105      	str	r1, [sp, #20]
 8007cea:	6800      	ldr	r0, [r0, #0]
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	a902      	add	r1, sp, #8
 8007cf0:	f000 fa2a 	bl	8008148 <_svfiprintf_r>
 8007cf4:	9b02      	ldr	r3, [sp, #8]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	b01c      	add	sp, #112	; 0x70
 8007cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d00:	b003      	add	sp, #12
 8007d02:	4770      	bx	lr
 8007d04:	20000080 	.word	0x20000080
 8007d08:	ffff0208 	.word	0xffff0208

08007d0c <__sread>:
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	460c      	mov	r4, r1
 8007d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d14:	f000 f868 	bl	8007de8 <_read_r>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	bfab      	itete	ge
 8007d1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d20:	181b      	addge	r3, r3, r0
 8007d22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d26:	bfac      	ite	ge
 8007d28:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d2a:	81a3      	strhlt	r3, [r4, #12]
 8007d2c:	bd10      	pop	{r4, pc}

08007d2e <__swrite>:
 8007d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d32:	461f      	mov	r7, r3
 8007d34:	898b      	ldrh	r3, [r1, #12]
 8007d36:	05db      	lsls	r3, r3, #23
 8007d38:	4605      	mov	r5, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	4616      	mov	r6, r2
 8007d3e:	d505      	bpl.n	8007d4c <__swrite+0x1e>
 8007d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d44:	2302      	movs	r3, #2
 8007d46:	2200      	movs	r2, #0
 8007d48:	f000 f83c 	bl	8007dc4 <_lseek_r>
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d56:	81a3      	strh	r3, [r4, #12]
 8007d58:	4632      	mov	r2, r6
 8007d5a:	463b      	mov	r3, r7
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d62:	f000 b853 	b.w	8007e0c <_write_r>

08007d66 <__sseek>:
 8007d66:	b510      	push	{r4, lr}
 8007d68:	460c      	mov	r4, r1
 8007d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d6e:	f000 f829 	bl	8007dc4 <_lseek_r>
 8007d72:	1c43      	adds	r3, r0, #1
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	bf15      	itete	ne
 8007d78:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d82:	81a3      	strheq	r3, [r4, #12]
 8007d84:	bf18      	it	ne
 8007d86:	81a3      	strhne	r3, [r4, #12]
 8007d88:	bd10      	pop	{r4, pc}

08007d8a <__sclose>:
 8007d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8e:	f000 b809 	b.w	8007da4 <_close_r>

08007d92 <memset>:
 8007d92:	4402      	add	r2, r0
 8007d94:	4603      	mov	r3, r0
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d100      	bne.n	8007d9c <memset+0xa>
 8007d9a:	4770      	bx	lr
 8007d9c:	f803 1b01 	strb.w	r1, [r3], #1
 8007da0:	e7f9      	b.n	8007d96 <memset+0x4>
	...

08007da4 <_close_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d06      	ldr	r5, [pc, #24]	; (8007dc0 <_close_r+0x1c>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	4604      	mov	r4, r0
 8007dac:	4608      	mov	r0, r1
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	f7f9 fbb1 	bl	8001516 <_close>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_close_r+0x1a>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_close_r+0x1a>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	200194c8 	.word	0x200194c8

08007dc4 <_lseek_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d07      	ldr	r5, [pc, #28]	; (8007de4 <_lseek_r+0x20>)
 8007dc8:	4604      	mov	r4, r0
 8007dca:	4608      	mov	r0, r1
 8007dcc:	4611      	mov	r1, r2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	602a      	str	r2, [r5, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f7f9 fbc6 	bl	8001564 <_lseek>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_lseek_r+0x1e>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_lseek_r+0x1e>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200194c8 	.word	0x200194c8

08007de8 <_read_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	; (8007e08 <_read_r+0x20>)
 8007dec:	4604      	mov	r4, r0
 8007dee:	4608      	mov	r0, r1
 8007df0:	4611      	mov	r1, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	602a      	str	r2, [r5, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f7f9 fb54 	bl	80014a4 <_read>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_read_r+0x1e>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_read_r+0x1e>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	200194c8 	.word	0x200194c8

08007e0c <_write_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d07      	ldr	r5, [pc, #28]	; (8007e2c <_write_r+0x20>)
 8007e10:	4604      	mov	r4, r0
 8007e12:	4608      	mov	r0, r1
 8007e14:	4611      	mov	r1, r2
 8007e16:	2200      	movs	r2, #0
 8007e18:	602a      	str	r2, [r5, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f7f9 fb5f 	bl	80014de <_write>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_write_r+0x1e>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_write_r+0x1e>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	200194c8 	.word	0x200194c8

08007e30 <__errno>:
 8007e30:	4b01      	ldr	r3, [pc, #4]	; (8007e38 <__errno+0x8>)
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20000080 	.word	0x20000080

08007e3c <__libc_init_array>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	4d0d      	ldr	r5, [pc, #52]	; (8007e74 <__libc_init_array+0x38>)
 8007e40:	4c0d      	ldr	r4, [pc, #52]	; (8007e78 <__libc_init_array+0x3c>)
 8007e42:	1b64      	subs	r4, r4, r5
 8007e44:	10a4      	asrs	r4, r4, #2
 8007e46:	2600      	movs	r6, #0
 8007e48:	42a6      	cmp	r6, r4
 8007e4a:	d109      	bne.n	8007e60 <__libc_init_array+0x24>
 8007e4c:	4d0b      	ldr	r5, [pc, #44]	; (8007e7c <__libc_init_array+0x40>)
 8007e4e:	4c0c      	ldr	r4, [pc, #48]	; (8007e80 <__libc_init_array+0x44>)
 8007e50:	f000 ff76 	bl	8008d40 <_init>
 8007e54:	1b64      	subs	r4, r4, r5
 8007e56:	10a4      	asrs	r4, r4, #2
 8007e58:	2600      	movs	r6, #0
 8007e5a:	42a6      	cmp	r6, r4
 8007e5c:	d105      	bne.n	8007e6a <__libc_init_array+0x2e>
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e64:	4798      	blx	r3
 8007e66:	3601      	adds	r6, #1
 8007e68:	e7ee      	b.n	8007e48 <__libc_init_array+0xc>
 8007e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6e:	4798      	blx	r3
 8007e70:	3601      	adds	r6, #1
 8007e72:	e7f2      	b.n	8007e5a <__libc_init_array+0x1e>
 8007e74:	08009190 	.word	0x08009190
 8007e78:	08009190 	.word	0x08009190
 8007e7c:	08009190 	.word	0x08009190
 8007e80:	08009194 	.word	0x08009194

08007e84 <__retarget_lock_acquire_recursive>:
 8007e84:	4770      	bx	lr

08007e86 <__retarget_lock_release_recursive>:
 8007e86:	4770      	bx	lr

08007e88 <memcpy>:
 8007e88:	440a      	add	r2, r1
 8007e8a:	4291      	cmp	r1, r2
 8007e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e90:	d100      	bne.n	8007e94 <memcpy+0xc>
 8007e92:	4770      	bx	lr
 8007e94:	b510      	push	{r4, lr}
 8007e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e9e:	4291      	cmp	r1, r2
 8007ea0:	d1f9      	bne.n	8007e96 <memcpy+0xe>
 8007ea2:	bd10      	pop	{r4, pc}

08007ea4 <_free_r>:
 8007ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	d044      	beq.n	8007f34 <_free_r+0x90>
 8007eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eae:	9001      	str	r0, [sp, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8007eb6:	bfb8      	it	lt
 8007eb8:	18e4      	addlt	r4, r4, r3
 8007eba:	f000 f8df 	bl	800807c <__malloc_lock>
 8007ebe:	4a1e      	ldr	r2, [pc, #120]	; (8007f38 <_free_r+0x94>)
 8007ec0:	9801      	ldr	r0, [sp, #4]
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	b933      	cbnz	r3, 8007ed4 <_free_r+0x30>
 8007ec6:	6063      	str	r3, [r4, #4]
 8007ec8:	6014      	str	r4, [r2, #0]
 8007eca:	b003      	add	sp, #12
 8007ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ed0:	f000 b8da 	b.w	8008088 <__malloc_unlock>
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d908      	bls.n	8007eea <_free_r+0x46>
 8007ed8:	6825      	ldr	r5, [r4, #0]
 8007eda:	1961      	adds	r1, r4, r5
 8007edc:	428b      	cmp	r3, r1
 8007ede:	bf01      	itttt	eq
 8007ee0:	6819      	ldreq	r1, [r3, #0]
 8007ee2:	685b      	ldreq	r3, [r3, #4]
 8007ee4:	1949      	addeq	r1, r1, r5
 8007ee6:	6021      	streq	r1, [r4, #0]
 8007ee8:	e7ed      	b.n	8007ec6 <_free_r+0x22>
 8007eea:	461a      	mov	r2, r3
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	b10b      	cbz	r3, 8007ef4 <_free_r+0x50>
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	d9fa      	bls.n	8007eea <_free_r+0x46>
 8007ef4:	6811      	ldr	r1, [r2, #0]
 8007ef6:	1855      	adds	r5, r2, r1
 8007ef8:	42a5      	cmp	r5, r4
 8007efa:	d10b      	bne.n	8007f14 <_free_r+0x70>
 8007efc:	6824      	ldr	r4, [r4, #0]
 8007efe:	4421      	add	r1, r4
 8007f00:	1854      	adds	r4, r2, r1
 8007f02:	42a3      	cmp	r3, r4
 8007f04:	6011      	str	r1, [r2, #0]
 8007f06:	d1e0      	bne.n	8007eca <_free_r+0x26>
 8007f08:	681c      	ldr	r4, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	6053      	str	r3, [r2, #4]
 8007f0e:	440c      	add	r4, r1
 8007f10:	6014      	str	r4, [r2, #0]
 8007f12:	e7da      	b.n	8007eca <_free_r+0x26>
 8007f14:	d902      	bls.n	8007f1c <_free_r+0x78>
 8007f16:	230c      	movs	r3, #12
 8007f18:	6003      	str	r3, [r0, #0]
 8007f1a:	e7d6      	b.n	8007eca <_free_r+0x26>
 8007f1c:	6825      	ldr	r5, [r4, #0]
 8007f1e:	1961      	adds	r1, r4, r5
 8007f20:	428b      	cmp	r3, r1
 8007f22:	bf04      	itt	eq
 8007f24:	6819      	ldreq	r1, [r3, #0]
 8007f26:	685b      	ldreq	r3, [r3, #4]
 8007f28:	6063      	str	r3, [r4, #4]
 8007f2a:	bf04      	itt	eq
 8007f2c:	1949      	addeq	r1, r1, r5
 8007f2e:	6021      	streq	r1, [r4, #0]
 8007f30:	6054      	str	r4, [r2, #4]
 8007f32:	e7ca      	b.n	8007eca <_free_r+0x26>
 8007f34:	b003      	add	sp, #12
 8007f36:	bd30      	pop	{r4, r5, pc}
 8007f38:	200194d0 	.word	0x200194d0

08007f3c <sbrk_aligned>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	4e0e      	ldr	r6, [pc, #56]	; (8007f78 <sbrk_aligned+0x3c>)
 8007f40:	460c      	mov	r4, r1
 8007f42:	6831      	ldr	r1, [r6, #0]
 8007f44:	4605      	mov	r5, r0
 8007f46:	b911      	cbnz	r1, 8007f4e <sbrk_aligned+0x12>
 8007f48:	f000 fe2e 	bl	8008ba8 <_sbrk_r>
 8007f4c:	6030      	str	r0, [r6, #0]
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 fe29 	bl	8008ba8 <_sbrk_r>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d00a      	beq.n	8007f70 <sbrk_aligned+0x34>
 8007f5a:	1cc4      	adds	r4, r0, #3
 8007f5c:	f024 0403 	bic.w	r4, r4, #3
 8007f60:	42a0      	cmp	r0, r4
 8007f62:	d007      	beq.n	8007f74 <sbrk_aligned+0x38>
 8007f64:	1a21      	subs	r1, r4, r0
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 fe1e 	bl	8008ba8 <_sbrk_r>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d101      	bne.n	8007f74 <sbrk_aligned+0x38>
 8007f70:	f04f 34ff 	mov.w	r4, #4294967295
 8007f74:	4620      	mov	r0, r4
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	200194d4 	.word	0x200194d4

08007f7c <_malloc_r>:
 8007f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f80:	1ccd      	adds	r5, r1, #3
 8007f82:	f025 0503 	bic.w	r5, r5, #3
 8007f86:	3508      	adds	r5, #8
 8007f88:	2d0c      	cmp	r5, #12
 8007f8a:	bf38      	it	cc
 8007f8c:	250c      	movcc	r5, #12
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	4607      	mov	r7, r0
 8007f92:	db01      	blt.n	8007f98 <_malloc_r+0x1c>
 8007f94:	42a9      	cmp	r1, r5
 8007f96:	d905      	bls.n	8007fa4 <_malloc_r+0x28>
 8007f98:	230c      	movs	r3, #12
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	2600      	movs	r6, #0
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008078 <_malloc_r+0xfc>
 8007fa8:	f000 f868 	bl	800807c <__malloc_lock>
 8007fac:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb0:	461c      	mov	r4, r3
 8007fb2:	bb5c      	cbnz	r4, 800800c <_malloc_r+0x90>
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f7ff ffc0 	bl	8007f3c <sbrk_aligned>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	d155      	bne.n	800806e <_malloc_r+0xf2>
 8007fc2:	f8d8 4000 	ldr.w	r4, [r8]
 8007fc6:	4626      	mov	r6, r4
 8007fc8:	2e00      	cmp	r6, #0
 8007fca:	d145      	bne.n	8008058 <_malloc_r+0xdc>
 8007fcc:	2c00      	cmp	r4, #0
 8007fce:	d048      	beq.n	8008062 <_malloc_r+0xe6>
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	eb04 0903 	add.w	r9, r4, r3
 8007fda:	f000 fde5 	bl	8008ba8 <_sbrk_r>
 8007fde:	4581      	cmp	r9, r0
 8007fe0:	d13f      	bne.n	8008062 <_malloc_r+0xe6>
 8007fe2:	6821      	ldr	r1, [r4, #0]
 8007fe4:	1a6d      	subs	r5, r5, r1
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	4638      	mov	r0, r7
 8007fea:	f7ff ffa7 	bl	8007f3c <sbrk_aligned>
 8007fee:	3001      	adds	r0, #1
 8007ff0:	d037      	beq.n	8008062 <_malloc_r+0xe6>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	442b      	add	r3, r5
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d038      	beq.n	8008072 <_malloc_r+0xf6>
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	42a2      	cmp	r2, r4
 8008004:	d12b      	bne.n	800805e <_malloc_r+0xe2>
 8008006:	2200      	movs	r2, #0
 8008008:	605a      	str	r2, [r3, #4]
 800800a:	e00f      	b.n	800802c <_malloc_r+0xb0>
 800800c:	6822      	ldr	r2, [r4, #0]
 800800e:	1b52      	subs	r2, r2, r5
 8008010:	d41f      	bmi.n	8008052 <_malloc_r+0xd6>
 8008012:	2a0b      	cmp	r2, #11
 8008014:	d917      	bls.n	8008046 <_malloc_r+0xca>
 8008016:	1961      	adds	r1, r4, r5
 8008018:	42a3      	cmp	r3, r4
 800801a:	6025      	str	r5, [r4, #0]
 800801c:	bf18      	it	ne
 800801e:	6059      	strne	r1, [r3, #4]
 8008020:	6863      	ldr	r3, [r4, #4]
 8008022:	bf08      	it	eq
 8008024:	f8c8 1000 	streq.w	r1, [r8]
 8008028:	5162      	str	r2, [r4, r5]
 800802a:	604b      	str	r3, [r1, #4]
 800802c:	4638      	mov	r0, r7
 800802e:	f104 060b 	add.w	r6, r4, #11
 8008032:	f000 f829 	bl	8008088 <__malloc_unlock>
 8008036:	f026 0607 	bic.w	r6, r6, #7
 800803a:	1d23      	adds	r3, r4, #4
 800803c:	1af2      	subs	r2, r6, r3
 800803e:	d0ae      	beq.n	8007f9e <_malloc_r+0x22>
 8008040:	1b9b      	subs	r3, r3, r6
 8008042:	50a3      	str	r3, [r4, r2]
 8008044:	e7ab      	b.n	8007f9e <_malloc_r+0x22>
 8008046:	42a3      	cmp	r3, r4
 8008048:	6862      	ldr	r2, [r4, #4]
 800804a:	d1dd      	bne.n	8008008 <_malloc_r+0x8c>
 800804c:	f8c8 2000 	str.w	r2, [r8]
 8008050:	e7ec      	b.n	800802c <_malloc_r+0xb0>
 8008052:	4623      	mov	r3, r4
 8008054:	6864      	ldr	r4, [r4, #4]
 8008056:	e7ac      	b.n	8007fb2 <_malloc_r+0x36>
 8008058:	4634      	mov	r4, r6
 800805a:	6876      	ldr	r6, [r6, #4]
 800805c:	e7b4      	b.n	8007fc8 <_malloc_r+0x4c>
 800805e:	4613      	mov	r3, r2
 8008060:	e7cc      	b.n	8007ffc <_malloc_r+0x80>
 8008062:	230c      	movs	r3, #12
 8008064:	603b      	str	r3, [r7, #0]
 8008066:	4638      	mov	r0, r7
 8008068:	f000 f80e 	bl	8008088 <__malloc_unlock>
 800806c:	e797      	b.n	8007f9e <_malloc_r+0x22>
 800806e:	6025      	str	r5, [r4, #0]
 8008070:	e7dc      	b.n	800802c <_malloc_r+0xb0>
 8008072:	605b      	str	r3, [r3, #4]
 8008074:	deff      	udf	#255	; 0xff
 8008076:	bf00      	nop
 8008078:	200194d0 	.word	0x200194d0

0800807c <__malloc_lock>:
 800807c:	4801      	ldr	r0, [pc, #4]	; (8008084 <__malloc_lock+0x8>)
 800807e:	f7ff bf01 	b.w	8007e84 <__retarget_lock_acquire_recursive>
 8008082:	bf00      	nop
 8008084:	200194cc 	.word	0x200194cc

08008088 <__malloc_unlock>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__malloc_unlock+0x8>)
 800808a:	f7ff befc 	b.w	8007e86 <__retarget_lock_release_recursive>
 800808e:	bf00      	nop
 8008090:	200194cc 	.word	0x200194cc

08008094 <__ssputs_r>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	688e      	ldr	r6, [r1, #8]
 800809a:	461f      	mov	r7, r3
 800809c:	42be      	cmp	r6, r7
 800809e:	680b      	ldr	r3, [r1, #0]
 80080a0:	4682      	mov	sl, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	4690      	mov	r8, r2
 80080a6:	d82c      	bhi.n	8008102 <__ssputs_r+0x6e>
 80080a8:	898a      	ldrh	r2, [r1, #12]
 80080aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080ae:	d026      	beq.n	80080fe <__ssputs_r+0x6a>
 80080b0:	6965      	ldr	r5, [r4, #20]
 80080b2:	6909      	ldr	r1, [r1, #16]
 80080b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080b8:	eba3 0901 	sub.w	r9, r3, r1
 80080bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080c0:	1c7b      	adds	r3, r7, #1
 80080c2:	444b      	add	r3, r9
 80080c4:	106d      	asrs	r5, r5, #1
 80080c6:	429d      	cmp	r5, r3
 80080c8:	bf38      	it	cc
 80080ca:	461d      	movcc	r5, r3
 80080cc:	0553      	lsls	r3, r2, #21
 80080ce:	d527      	bpl.n	8008120 <__ssputs_r+0x8c>
 80080d0:	4629      	mov	r1, r5
 80080d2:	f7ff ff53 	bl	8007f7c <_malloc_r>
 80080d6:	4606      	mov	r6, r0
 80080d8:	b360      	cbz	r0, 8008134 <__ssputs_r+0xa0>
 80080da:	6921      	ldr	r1, [r4, #16]
 80080dc:	464a      	mov	r2, r9
 80080de:	f7ff fed3 	bl	8007e88 <memcpy>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	6126      	str	r6, [r4, #16]
 80080f0:	6165      	str	r5, [r4, #20]
 80080f2:	444e      	add	r6, r9
 80080f4:	eba5 0509 	sub.w	r5, r5, r9
 80080f8:	6026      	str	r6, [r4, #0]
 80080fa:	60a5      	str	r5, [r4, #8]
 80080fc:	463e      	mov	r6, r7
 80080fe:	42be      	cmp	r6, r7
 8008100:	d900      	bls.n	8008104 <__ssputs_r+0x70>
 8008102:	463e      	mov	r6, r7
 8008104:	6820      	ldr	r0, [r4, #0]
 8008106:	4632      	mov	r2, r6
 8008108:	4641      	mov	r1, r8
 800810a:	f000 fd33 	bl	8008b74 <memmove>
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	1b9b      	subs	r3, r3, r6
 8008112:	60a3      	str	r3, [r4, #8]
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	4433      	add	r3, r6
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	2000      	movs	r0, #0
 800811c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008120:	462a      	mov	r2, r5
 8008122:	f000 fd51 	bl	8008bc8 <_realloc_r>
 8008126:	4606      	mov	r6, r0
 8008128:	2800      	cmp	r0, #0
 800812a:	d1e0      	bne.n	80080ee <__ssputs_r+0x5a>
 800812c:	6921      	ldr	r1, [r4, #16]
 800812e:	4650      	mov	r0, sl
 8008130:	f7ff feb8 	bl	8007ea4 <_free_r>
 8008134:	230c      	movs	r3, #12
 8008136:	f8ca 3000 	str.w	r3, [sl]
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008140:	81a3      	strh	r3, [r4, #12]
 8008142:	f04f 30ff 	mov.w	r0, #4294967295
 8008146:	e7e9      	b.n	800811c <__ssputs_r+0x88>

08008148 <_svfiprintf_r>:
 8008148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	4698      	mov	r8, r3
 800814e:	898b      	ldrh	r3, [r1, #12]
 8008150:	061b      	lsls	r3, r3, #24
 8008152:	b09d      	sub	sp, #116	; 0x74
 8008154:	4607      	mov	r7, r0
 8008156:	460d      	mov	r5, r1
 8008158:	4614      	mov	r4, r2
 800815a:	d50e      	bpl.n	800817a <_svfiprintf_r+0x32>
 800815c:	690b      	ldr	r3, [r1, #16]
 800815e:	b963      	cbnz	r3, 800817a <_svfiprintf_r+0x32>
 8008160:	2140      	movs	r1, #64	; 0x40
 8008162:	f7ff ff0b 	bl	8007f7c <_malloc_r>
 8008166:	6028      	str	r0, [r5, #0]
 8008168:	6128      	str	r0, [r5, #16]
 800816a:	b920      	cbnz	r0, 8008176 <_svfiprintf_r+0x2e>
 800816c:	230c      	movs	r3, #12
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	f04f 30ff 	mov.w	r0, #4294967295
 8008174:	e0d0      	b.n	8008318 <_svfiprintf_r+0x1d0>
 8008176:	2340      	movs	r3, #64	; 0x40
 8008178:	616b      	str	r3, [r5, #20]
 800817a:	2300      	movs	r3, #0
 800817c:	9309      	str	r3, [sp, #36]	; 0x24
 800817e:	2320      	movs	r3, #32
 8008180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008184:	f8cd 800c 	str.w	r8, [sp, #12]
 8008188:	2330      	movs	r3, #48	; 0x30
 800818a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008330 <_svfiprintf_r+0x1e8>
 800818e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008192:	f04f 0901 	mov.w	r9, #1
 8008196:	4623      	mov	r3, r4
 8008198:	469a      	mov	sl, r3
 800819a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800819e:	b10a      	cbz	r2, 80081a4 <_svfiprintf_r+0x5c>
 80081a0:	2a25      	cmp	r2, #37	; 0x25
 80081a2:	d1f9      	bne.n	8008198 <_svfiprintf_r+0x50>
 80081a4:	ebba 0b04 	subs.w	fp, sl, r4
 80081a8:	d00b      	beq.n	80081c2 <_svfiprintf_r+0x7a>
 80081aa:	465b      	mov	r3, fp
 80081ac:	4622      	mov	r2, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	4638      	mov	r0, r7
 80081b2:	f7ff ff6f 	bl	8008094 <__ssputs_r>
 80081b6:	3001      	adds	r0, #1
 80081b8:	f000 80a9 	beq.w	800830e <_svfiprintf_r+0x1c6>
 80081bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081be:	445a      	add	r2, fp
 80081c0:	9209      	str	r2, [sp, #36]	; 0x24
 80081c2:	f89a 3000 	ldrb.w	r3, [sl]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80a1 	beq.w	800830e <_svfiprintf_r+0x1c6>
 80081cc:	2300      	movs	r3, #0
 80081ce:	f04f 32ff 	mov.w	r2, #4294967295
 80081d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081d6:	f10a 0a01 	add.w	sl, sl, #1
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	9307      	str	r3, [sp, #28]
 80081de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081e2:	931a      	str	r3, [sp, #104]	; 0x68
 80081e4:	4654      	mov	r4, sl
 80081e6:	2205      	movs	r2, #5
 80081e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ec:	4850      	ldr	r0, [pc, #320]	; (8008330 <_svfiprintf_r+0x1e8>)
 80081ee:	f7f8 f807 	bl	8000200 <memchr>
 80081f2:	9a04      	ldr	r2, [sp, #16]
 80081f4:	b9d8      	cbnz	r0, 800822e <_svfiprintf_r+0xe6>
 80081f6:	06d0      	lsls	r0, r2, #27
 80081f8:	bf44      	itt	mi
 80081fa:	2320      	movmi	r3, #32
 80081fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008200:	0711      	lsls	r1, r2, #28
 8008202:	bf44      	itt	mi
 8008204:	232b      	movmi	r3, #43	; 0x2b
 8008206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800820a:	f89a 3000 	ldrb.w	r3, [sl]
 800820e:	2b2a      	cmp	r3, #42	; 0x2a
 8008210:	d015      	beq.n	800823e <_svfiprintf_r+0xf6>
 8008212:	9a07      	ldr	r2, [sp, #28]
 8008214:	4654      	mov	r4, sl
 8008216:	2000      	movs	r0, #0
 8008218:	f04f 0c0a 	mov.w	ip, #10
 800821c:	4621      	mov	r1, r4
 800821e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008222:	3b30      	subs	r3, #48	; 0x30
 8008224:	2b09      	cmp	r3, #9
 8008226:	d94d      	bls.n	80082c4 <_svfiprintf_r+0x17c>
 8008228:	b1b0      	cbz	r0, 8008258 <_svfiprintf_r+0x110>
 800822a:	9207      	str	r2, [sp, #28]
 800822c:	e014      	b.n	8008258 <_svfiprintf_r+0x110>
 800822e:	eba0 0308 	sub.w	r3, r0, r8
 8008232:	fa09 f303 	lsl.w	r3, r9, r3
 8008236:	4313      	orrs	r3, r2
 8008238:	9304      	str	r3, [sp, #16]
 800823a:	46a2      	mov	sl, r4
 800823c:	e7d2      	b.n	80081e4 <_svfiprintf_r+0x9c>
 800823e:	9b03      	ldr	r3, [sp, #12]
 8008240:	1d19      	adds	r1, r3, #4
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	9103      	str	r1, [sp, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	bfbb      	ittet	lt
 800824a:	425b      	neglt	r3, r3
 800824c:	f042 0202 	orrlt.w	r2, r2, #2
 8008250:	9307      	strge	r3, [sp, #28]
 8008252:	9307      	strlt	r3, [sp, #28]
 8008254:	bfb8      	it	lt
 8008256:	9204      	strlt	r2, [sp, #16]
 8008258:	7823      	ldrb	r3, [r4, #0]
 800825a:	2b2e      	cmp	r3, #46	; 0x2e
 800825c:	d10c      	bne.n	8008278 <_svfiprintf_r+0x130>
 800825e:	7863      	ldrb	r3, [r4, #1]
 8008260:	2b2a      	cmp	r3, #42	; 0x2a
 8008262:	d134      	bne.n	80082ce <_svfiprintf_r+0x186>
 8008264:	9b03      	ldr	r3, [sp, #12]
 8008266:	1d1a      	adds	r2, r3, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	9203      	str	r2, [sp, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	bfb8      	it	lt
 8008270:	f04f 33ff 	movlt.w	r3, #4294967295
 8008274:	3402      	adds	r4, #2
 8008276:	9305      	str	r3, [sp, #20]
 8008278:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008340 <_svfiprintf_r+0x1f8>
 800827c:	7821      	ldrb	r1, [r4, #0]
 800827e:	2203      	movs	r2, #3
 8008280:	4650      	mov	r0, sl
 8008282:	f7f7 ffbd 	bl	8000200 <memchr>
 8008286:	b138      	cbz	r0, 8008298 <_svfiprintf_r+0x150>
 8008288:	9b04      	ldr	r3, [sp, #16]
 800828a:	eba0 000a 	sub.w	r0, r0, sl
 800828e:	2240      	movs	r2, #64	; 0x40
 8008290:	4082      	lsls	r2, r0
 8008292:	4313      	orrs	r3, r2
 8008294:	3401      	adds	r4, #1
 8008296:	9304      	str	r3, [sp, #16]
 8008298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829c:	4825      	ldr	r0, [pc, #148]	; (8008334 <_svfiprintf_r+0x1ec>)
 800829e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082a2:	2206      	movs	r2, #6
 80082a4:	f7f7 ffac 	bl	8000200 <memchr>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d038      	beq.n	800831e <_svfiprintf_r+0x1d6>
 80082ac:	4b22      	ldr	r3, [pc, #136]	; (8008338 <_svfiprintf_r+0x1f0>)
 80082ae:	bb1b      	cbnz	r3, 80082f8 <_svfiprintf_r+0x1b0>
 80082b0:	9b03      	ldr	r3, [sp, #12]
 80082b2:	3307      	adds	r3, #7
 80082b4:	f023 0307 	bic.w	r3, r3, #7
 80082b8:	3308      	adds	r3, #8
 80082ba:	9303      	str	r3, [sp, #12]
 80082bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082be:	4433      	add	r3, r6
 80082c0:	9309      	str	r3, [sp, #36]	; 0x24
 80082c2:	e768      	b.n	8008196 <_svfiprintf_r+0x4e>
 80082c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80082c8:	460c      	mov	r4, r1
 80082ca:	2001      	movs	r0, #1
 80082cc:	e7a6      	b.n	800821c <_svfiprintf_r+0xd4>
 80082ce:	2300      	movs	r3, #0
 80082d0:	3401      	adds	r4, #1
 80082d2:	9305      	str	r3, [sp, #20]
 80082d4:	4619      	mov	r1, r3
 80082d6:	f04f 0c0a 	mov.w	ip, #10
 80082da:	4620      	mov	r0, r4
 80082dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e0:	3a30      	subs	r2, #48	; 0x30
 80082e2:	2a09      	cmp	r2, #9
 80082e4:	d903      	bls.n	80082ee <_svfiprintf_r+0x1a6>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0c6      	beq.n	8008278 <_svfiprintf_r+0x130>
 80082ea:	9105      	str	r1, [sp, #20]
 80082ec:	e7c4      	b.n	8008278 <_svfiprintf_r+0x130>
 80082ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f2:	4604      	mov	r4, r0
 80082f4:	2301      	movs	r3, #1
 80082f6:	e7f0      	b.n	80082da <_svfiprintf_r+0x192>
 80082f8:	ab03      	add	r3, sp, #12
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	462a      	mov	r2, r5
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <_svfiprintf_r+0x1f4>)
 8008300:	a904      	add	r1, sp, #16
 8008302:	4638      	mov	r0, r7
 8008304:	f3af 8000 	nop.w
 8008308:	1c42      	adds	r2, r0, #1
 800830a:	4606      	mov	r6, r0
 800830c:	d1d6      	bne.n	80082bc <_svfiprintf_r+0x174>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	065b      	lsls	r3, r3, #25
 8008312:	f53f af2d 	bmi.w	8008170 <_svfiprintf_r+0x28>
 8008316:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008318:	b01d      	add	sp, #116	; 0x74
 800831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831e:	ab03      	add	r3, sp, #12
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	462a      	mov	r2, r5
 8008324:	4b05      	ldr	r3, [pc, #20]	; (800833c <_svfiprintf_r+0x1f4>)
 8008326:	a904      	add	r1, sp, #16
 8008328:	4638      	mov	r0, r7
 800832a:	f000 f9bd 	bl	80086a8 <_printf_i>
 800832e:	e7eb      	b.n	8008308 <_svfiprintf_r+0x1c0>
 8008330:	08009154 	.word	0x08009154
 8008334:	0800915e 	.word	0x0800915e
 8008338:	00000000 	.word	0x00000000
 800833c:	08008095 	.word	0x08008095
 8008340:	0800915a 	.word	0x0800915a

08008344 <__sfputc_r>:
 8008344:	6893      	ldr	r3, [r2, #8]
 8008346:	3b01      	subs	r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	b410      	push	{r4}
 800834c:	6093      	str	r3, [r2, #8]
 800834e:	da08      	bge.n	8008362 <__sfputc_r+0x1e>
 8008350:	6994      	ldr	r4, [r2, #24]
 8008352:	42a3      	cmp	r3, r4
 8008354:	db01      	blt.n	800835a <__sfputc_r+0x16>
 8008356:	290a      	cmp	r1, #10
 8008358:	d103      	bne.n	8008362 <__sfputc_r+0x1e>
 800835a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800835e:	f000 bb73 	b.w	8008a48 <__swbuf_r>
 8008362:	6813      	ldr	r3, [r2, #0]
 8008364:	1c58      	adds	r0, r3, #1
 8008366:	6010      	str	r0, [r2, #0]
 8008368:	7019      	strb	r1, [r3, #0]
 800836a:	4608      	mov	r0, r1
 800836c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008370:	4770      	bx	lr

08008372 <__sfputs_r>:
 8008372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008374:	4606      	mov	r6, r0
 8008376:	460f      	mov	r7, r1
 8008378:	4614      	mov	r4, r2
 800837a:	18d5      	adds	r5, r2, r3
 800837c:	42ac      	cmp	r4, r5
 800837e:	d101      	bne.n	8008384 <__sfputs_r+0x12>
 8008380:	2000      	movs	r0, #0
 8008382:	e007      	b.n	8008394 <__sfputs_r+0x22>
 8008384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008388:	463a      	mov	r2, r7
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ffda 	bl	8008344 <__sfputc_r>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d1f3      	bne.n	800837c <__sfputs_r+0xa>
 8008394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008398 <_vfiprintf_r>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	460d      	mov	r5, r1
 800839e:	b09d      	sub	sp, #116	; 0x74
 80083a0:	4614      	mov	r4, r2
 80083a2:	4698      	mov	r8, r3
 80083a4:	4606      	mov	r6, r0
 80083a6:	b118      	cbz	r0, 80083b0 <_vfiprintf_r+0x18>
 80083a8:	6a03      	ldr	r3, [r0, #32]
 80083aa:	b90b      	cbnz	r3, 80083b0 <_vfiprintf_r+0x18>
 80083ac:	f7ff fc46 	bl	8007c3c <__sinit>
 80083b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083b2:	07d9      	lsls	r1, r3, #31
 80083b4:	d405      	bmi.n	80083c2 <_vfiprintf_r+0x2a>
 80083b6:	89ab      	ldrh	r3, [r5, #12]
 80083b8:	059a      	lsls	r2, r3, #22
 80083ba:	d402      	bmi.n	80083c2 <_vfiprintf_r+0x2a>
 80083bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083be:	f7ff fd61 	bl	8007e84 <__retarget_lock_acquire_recursive>
 80083c2:	89ab      	ldrh	r3, [r5, #12]
 80083c4:	071b      	lsls	r3, r3, #28
 80083c6:	d501      	bpl.n	80083cc <_vfiprintf_r+0x34>
 80083c8:	692b      	ldr	r3, [r5, #16]
 80083ca:	b99b      	cbnz	r3, 80083f4 <_vfiprintf_r+0x5c>
 80083cc:	4629      	mov	r1, r5
 80083ce:	4630      	mov	r0, r6
 80083d0:	f000 fb78 	bl	8008ac4 <__swsetup_r>
 80083d4:	b170      	cbz	r0, 80083f4 <_vfiprintf_r+0x5c>
 80083d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083d8:	07dc      	lsls	r4, r3, #31
 80083da:	d504      	bpl.n	80083e6 <_vfiprintf_r+0x4e>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	b01d      	add	sp, #116	; 0x74
 80083e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e6:	89ab      	ldrh	r3, [r5, #12]
 80083e8:	0598      	lsls	r0, r3, #22
 80083ea:	d4f7      	bmi.n	80083dc <_vfiprintf_r+0x44>
 80083ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ee:	f7ff fd4a 	bl	8007e86 <__retarget_lock_release_recursive>
 80083f2:	e7f3      	b.n	80083dc <_vfiprintf_r+0x44>
 80083f4:	2300      	movs	r3, #0
 80083f6:	9309      	str	r3, [sp, #36]	; 0x24
 80083f8:	2320      	movs	r3, #32
 80083fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008402:	2330      	movs	r3, #48	; 0x30
 8008404:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80085b8 <_vfiprintf_r+0x220>
 8008408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800840c:	f04f 0901 	mov.w	r9, #1
 8008410:	4623      	mov	r3, r4
 8008412:	469a      	mov	sl, r3
 8008414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008418:	b10a      	cbz	r2, 800841e <_vfiprintf_r+0x86>
 800841a:	2a25      	cmp	r2, #37	; 0x25
 800841c:	d1f9      	bne.n	8008412 <_vfiprintf_r+0x7a>
 800841e:	ebba 0b04 	subs.w	fp, sl, r4
 8008422:	d00b      	beq.n	800843c <_vfiprintf_r+0xa4>
 8008424:	465b      	mov	r3, fp
 8008426:	4622      	mov	r2, r4
 8008428:	4629      	mov	r1, r5
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ffa1 	bl	8008372 <__sfputs_r>
 8008430:	3001      	adds	r0, #1
 8008432:	f000 80a9 	beq.w	8008588 <_vfiprintf_r+0x1f0>
 8008436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008438:	445a      	add	r2, fp
 800843a:	9209      	str	r2, [sp, #36]	; 0x24
 800843c:	f89a 3000 	ldrb.w	r3, [sl]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80a1 	beq.w	8008588 <_vfiprintf_r+0x1f0>
 8008446:	2300      	movs	r3, #0
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008450:	f10a 0a01 	add.w	sl, sl, #1
 8008454:	9304      	str	r3, [sp, #16]
 8008456:	9307      	str	r3, [sp, #28]
 8008458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800845c:	931a      	str	r3, [sp, #104]	; 0x68
 800845e:	4654      	mov	r4, sl
 8008460:	2205      	movs	r2, #5
 8008462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008466:	4854      	ldr	r0, [pc, #336]	; (80085b8 <_vfiprintf_r+0x220>)
 8008468:	f7f7 feca 	bl	8000200 <memchr>
 800846c:	9a04      	ldr	r2, [sp, #16]
 800846e:	b9d8      	cbnz	r0, 80084a8 <_vfiprintf_r+0x110>
 8008470:	06d1      	lsls	r1, r2, #27
 8008472:	bf44      	itt	mi
 8008474:	2320      	movmi	r3, #32
 8008476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800847a:	0713      	lsls	r3, r2, #28
 800847c:	bf44      	itt	mi
 800847e:	232b      	movmi	r3, #43	; 0x2b
 8008480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008484:	f89a 3000 	ldrb.w	r3, [sl]
 8008488:	2b2a      	cmp	r3, #42	; 0x2a
 800848a:	d015      	beq.n	80084b8 <_vfiprintf_r+0x120>
 800848c:	9a07      	ldr	r2, [sp, #28]
 800848e:	4654      	mov	r4, sl
 8008490:	2000      	movs	r0, #0
 8008492:	f04f 0c0a 	mov.w	ip, #10
 8008496:	4621      	mov	r1, r4
 8008498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800849c:	3b30      	subs	r3, #48	; 0x30
 800849e:	2b09      	cmp	r3, #9
 80084a0:	d94d      	bls.n	800853e <_vfiprintf_r+0x1a6>
 80084a2:	b1b0      	cbz	r0, 80084d2 <_vfiprintf_r+0x13a>
 80084a4:	9207      	str	r2, [sp, #28]
 80084a6:	e014      	b.n	80084d2 <_vfiprintf_r+0x13a>
 80084a8:	eba0 0308 	sub.w	r3, r0, r8
 80084ac:	fa09 f303 	lsl.w	r3, r9, r3
 80084b0:	4313      	orrs	r3, r2
 80084b2:	9304      	str	r3, [sp, #16]
 80084b4:	46a2      	mov	sl, r4
 80084b6:	e7d2      	b.n	800845e <_vfiprintf_r+0xc6>
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	1d19      	adds	r1, r3, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	9103      	str	r1, [sp, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bfbb      	ittet	lt
 80084c4:	425b      	neglt	r3, r3
 80084c6:	f042 0202 	orrlt.w	r2, r2, #2
 80084ca:	9307      	strge	r3, [sp, #28]
 80084cc:	9307      	strlt	r3, [sp, #28]
 80084ce:	bfb8      	it	lt
 80084d0:	9204      	strlt	r2, [sp, #16]
 80084d2:	7823      	ldrb	r3, [r4, #0]
 80084d4:	2b2e      	cmp	r3, #46	; 0x2e
 80084d6:	d10c      	bne.n	80084f2 <_vfiprintf_r+0x15a>
 80084d8:	7863      	ldrb	r3, [r4, #1]
 80084da:	2b2a      	cmp	r3, #42	; 0x2a
 80084dc:	d134      	bne.n	8008548 <_vfiprintf_r+0x1b0>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	1d1a      	adds	r2, r3, #4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	9203      	str	r2, [sp, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bfb8      	it	lt
 80084ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80084ee:	3402      	adds	r4, #2
 80084f0:	9305      	str	r3, [sp, #20]
 80084f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80085c8 <_vfiprintf_r+0x230>
 80084f6:	7821      	ldrb	r1, [r4, #0]
 80084f8:	2203      	movs	r2, #3
 80084fa:	4650      	mov	r0, sl
 80084fc:	f7f7 fe80 	bl	8000200 <memchr>
 8008500:	b138      	cbz	r0, 8008512 <_vfiprintf_r+0x17a>
 8008502:	9b04      	ldr	r3, [sp, #16]
 8008504:	eba0 000a 	sub.w	r0, r0, sl
 8008508:	2240      	movs	r2, #64	; 0x40
 800850a:	4082      	lsls	r2, r0
 800850c:	4313      	orrs	r3, r2
 800850e:	3401      	adds	r4, #1
 8008510:	9304      	str	r3, [sp, #16]
 8008512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008516:	4829      	ldr	r0, [pc, #164]	; (80085bc <_vfiprintf_r+0x224>)
 8008518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800851c:	2206      	movs	r2, #6
 800851e:	f7f7 fe6f 	bl	8000200 <memchr>
 8008522:	2800      	cmp	r0, #0
 8008524:	d03f      	beq.n	80085a6 <_vfiprintf_r+0x20e>
 8008526:	4b26      	ldr	r3, [pc, #152]	; (80085c0 <_vfiprintf_r+0x228>)
 8008528:	bb1b      	cbnz	r3, 8008572 <_vfiprintf_r+0x1da>
 800852a:	9b03      	ldr	r3, [sp, #12]
 800852c:	3307      	adds	r3, #7
 800852e:	f023 0307 	bic.w	r3, r3, #7
 8008532:	3308      	adds	r3, #8
 8008534:	9303      	str	r3, [sp, #12]
 8008536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008538:	443b      	add	r3, r7
 800853a:	9309      	str	r3, [sp, #36]	; 0x24
 800853c:	e768      	b.n	8008410 <_vfiprintf_r+0x78>
 800853e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008542:	460c      	mov	r4, r1
 8008544:	2001      	movs	r0, #1
 8008546:	e7a6      	b.n	8008496 <_vfiprintf_r+0xfe>
 8008548:	2300      	movs	r3, #0
 800854a:	3401      	adds	r4, #1
 800854c:	9305      	str	r3, [sp, #20]
 800854e:	4619      	mov	r1, r3
 8008550:	f04f 0c0a 	mov.w	ip, #10
 8008554:	4620      	mov	r0, r4
 8008556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800855a:	3a30      	subs	r2, #48	; 0x30
 800855c:	2a09      	cmp	r2, #9
 800855e:	d903      	bls.n	8008568 <_vfiprintf_r+0x1d0>
 8008560:	2b00      	cmp	r3, #0
 8008562:	d0c6      	beq.n	80084f2 <_vfiprintf_r+0x15a>
 8008564:	9105      	str	r1, [sp, #20]
 8008566:	e7c4      	b.n	80084f2 <_vfiprintf_r+0x15a>
 8008568:	fb0c 2101 	mla	r1, ip, r1, r2
 800856c:	4604      	mov	r4, r0
 800856e:	2301      	movs	r3, #1
 8008570:	e7f0      	b.n	8008554 <_vfiprintf_r+0x1bc>
 8008572:	ab03      	add	r3, sp, #12
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	462a      	mov	r2, r5
 8008578:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <_vfiprintf_r+0x22c>)
 800857a:	a904      	add	r1, sp, #16
 800857c:	4630      	mov	r0, r6
 800857e:	f3af 8000 	nop.w
 8008582:	4607      	mov	r7, r0
 8008584:	1c78      	adds	r0, r7, #1
 8008586:	d1d6      	bne.n	8008536 <_vfiprintf_r+0x19e>
 8008588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800858a:	07d9      	lsls	r1, r3, #31
 800858c:	d405      	bmi.n	800859a <_vfiprintf_r+0x202>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	059a      	lsls	r2, r3, #22
 8008592:	d402      	bmi.n	800859a <_vfiprintf_r+0x202>
 8008594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008596:	f7ff fc76 	bl	8007e86 <__retarget_lock_release_recursive>
 800859a:	89ab      	ldrh	r3, [r5, #12]
 800859c:	065b      	lsls	r3, r3, #25
 800859e:	f53f af1d 	bmi.w	80083dc <_vfiprintf_r+0x44>
 80085a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085a4:	e71c      	b.n	80083e0 <_vfiprintf_r+0x48>
 80085a6:	ab03      	add	r3, sp, #12
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	462a      	mov	r2, r5
 80085ac:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <_vfiprintf_r+0x22c>)
 80085ae:	a904      	add	r1, sp, #16
 80085b0:	4630      	mov	r0, r6
 80085b2:	f000 f879 	bl	80086a8 <_printf_i>
 80085b6:	e7e4      	b.n	8008582 <_vfiprintf_r+0x1ea>
 80085b8:	08009154 	.word	0x08009154
 80085bc:	0800915e 	.word	0x0800915e
 80085c0:	00000000 	.word	0x00000000
 80085c4:	08008373 	.word	0x08008373
 80085c8:	0800915a 	.word	0x0800915a

080085cc <_printf_common>:
 80085cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	4616      	mov	r6, r2
 80085d2:	4699      	mov	r9, r3
 80085d4:	688a      	ldr	r2, [r1, #8]
 80085d6:	690b      	ldr	r3, [r1, #16]
 80085d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085dc:	4293      	cmp	r3, r2
 80085de:	bfb8      	it	lt
 80085e0:	4613      	movlt	r3, r2
 80085e2:	6033      	str	r3, [r6, #0]
 80085e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085e8:	4607      	mov	r7, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	b10a      	cbz	r2, 80085f2 <_printf_common+0x26>
 80085ee:	3301      	adds	r3, #1
 80085f0:	6033      	str	r3, [r6, #0]
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	0699      	lsls	r1, r3, #26
 80085f6:	bf42      	ittt	mi
 80085f8:	6833      	ldrmi	r3, [r6, #0]
 80085fa:	3302      	addmi	r3, #2
 80085fc:	6033      	strmi	r3, [r6, #0]
 80085fe:	6825      	ldr	r5, [r4, #0]
 8008600:	f015 0506 	ands.w	r5, r5, #6
 8008604:	d106      	bne.n	8008614 <_printf_common+0x48>
 8008606:	f104 0a19 	add.w	sl, r4, #25
 800860a:	68e3      	ldr	r3, [r4, #12]
 800860c:	6832      	ldr	r2, [r6, #0]
 800860e:	1a9b      	subs	r3, r3, r2
 8008610:	42ab      	cmp	r3, r5
 8008612:	dc26      	bgt.n	8008662 <_printf_common+0x96>
 8008614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008618:	1e13      	subs	r3, r2, #0
 800861a:	6822      	ldr	r2, [r4, #0]
 800861c:	bf18      	it	ne
 800861e:	2301      	movne	r3, #1
 8008620:	0692      	lsls	r2, r2, #26
 8008622:	d42b      	bmi.n	800867c <_printf_common+0xb0>
 8008624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008628:	4649      	mov	r1, r9
 800862a:	4638      	mov	r0, r7
 800862c:	47c0      	blx	r8
 800862e:	3001      	adds	r0, #1
 8008630:	d01e      	beq.n	8008670 <_printf_common+0xa4>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	6922      	ldr	r2, [r4, #16]
 8008636:	f003 0306 	and.w	r3, r3, #6
 800863a:	2b04      	cmp	r3, #4
 800863c:	bf02      	ittt	eq
 800863e:	68e5      	ldreq	r5, [r4, #12]
 8008640:	6833      	ldreq	r3, [r6, #0]
 8008642:	1aed      	subeq	r5, r5, r3
 8008644:	68a3      	ldr	r3, [r4, #8]
 8008646:	bf0c      	ite	eq
 8008648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800864c:	2500      	movne	r5, #0
 800864e:	4293      	cmp	r3, r2
 8008650:	bfc4      	itt	gt
 8008652:	1a9b      	subgt	r3, r3, r2
 8008654:	18ed      	addgt	r5, r5, r3
 8008656:	2600      	movs	r6, #0
 8008658:	341a      	adds	r4, #26
 800865a:	42b5      	cmp	r5, r6
 800865c:	d11a      	bne.n	8008694 <_printf_common+0xc8>
 800865e:	2000      	movs	r0, #0
 8008660:	e008      	b.n	8008674 <_printf_common+0xa8>
 8008662:	2301      	movs	r3, #1
 8008664:	4652      	mov	r2, sl
 8008666:	4649      	mov	r1, r9
 8008668:	4638      	mov	r0, r7
 800866a:	47c0      	blx	r8
 800866c:	3001      	adds	r0, #1
 800866e:	d103      	bne.n	8008678 <_printf_common+0xac>
 8008670:	f04f 30ff 	mov.w	r0, #4294967295
 8008674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008678:	3501      	adds	r5, #1
 800867a:	e7c6      	b.n	800860a <_printf_common+0x3e>
 800867c:	18e1      	adds	r1, r4, r3
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	2030      	movs	r0, #48	; 0x30
 8008682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008686:	4422      	add	r2, r4
 8008688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800868c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008690:	3302      	adds	r3, #2
 8008692:	e7c7      	b.n	8008624 <_printf_common+0x58>
 8008694:	2301      	movs	r3, #1
 8008696:	4622      	mov	r2, r4
 8008698:	4649      	mov	r1, r9
 800869a:	4638      	mov	r0, r7
 800869c:	47c0      	blx	r8
 800869e:	3001      	adds	r0, #1
 80086a0:	d0e6      	beq.n	8008670 <_printf_common+0xa4>
 80086a2:	3601      	adds	r6, #1
 80086a4:	e7d9      	b.n	800865a <_printf_common+0x8e>
	...

080086a8 <_printf_i>:
 80086a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086ac:	7e0f      	ldrb	r7, [r1, #24]
 80086ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086b0:	2f78      	cmp	r7, #120	; 0x78
 80086b2:	4691      	mov	r9, r2
 80086b4:	4680      	mov	r8, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	469a      	mov	sl, r3
 80086ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086be:	d807      	bhi.n	80086d0 <_printf_i+0x28>
 80086c0:	2f62      	cmp	r7, #98	; 0x62
 80086c2:	d80a      	bhi.n	80086da <_printf_i+0x32>
 80086c4:	2f00      	cmp	r7, #0
 80086c6:	f000 80d4 	beq.w	8008872 <_printf_i+0x1ca>
 80086ca:	2f58      	cmp	r7, #88	; 0x58
 80086cc:	f000 80c0 	beq.w	8008850 <_printf_i+0x1a8>
 80086d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086d8:	e03a      	b.n	8008750 <_printf_i+0xa8>
 80086da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086de:	2b15      	cmp	r3, #21
 80086e0:	d8f6      	bhi.n	80086d0 <_printf_i+0x28>
 80086e2:	a101      	add	r1, pc, #4	; (adr r1, 80086e8 <_printf_i+0x40>)
 80086e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086e8:	08008741 	.word	0x08008741
 80086ec:	08008755 	.word	0x08008755
 80086f0:	080086d1 	.word	0x080086d1
 80086f4:	080086d1 	.word	0x080086d1
 80086f8:	080086d1 	.word	0x080086d1
 80086fc:	080086d1 	.word	0x080086d1
 8008700:	08008755 	.word	0x08008755
 8008704:	080086d1 	.word	0x080086d1
 8008708:	080086d1 	.word	0x080086d1
 800870c:	080086d1 	.word	0x080086d1
 8008710:	080086d1 	.word	0x080086d1
 8008714:	08008859 	.word	0x08008859
 8008718:	08008781 	.word	0x08008781
 800871c:	08008813 	.word	0x08008813
 8008720:	080086d1 	.word	0x080086d1
 8008724:	080086d1 	.word	0x080086d1
 8008728:	0800887b 	.word	0x0800887b
 800872c:	080086d1 	.word	0x080086d1
 8008730:	08008781 	.word	0x08008781
 8008734:	080086d1 	.word	0x080086d1
 8008738:	080086d1 	.word	0x080086d1
 800873c:	0800881b 	.word	0x0800881b
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	1d1a      	adds	r2, r3, #4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	602a      	str	r2, [r5, #0]
 8008748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800874c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008750:	2301      	movs	r3, #1
 8008752:	e09f      	b.n	8008894 <_printf_i+0x1ec>
 8008754:	6820      	ldr	r0, [r4, #0]
 8008756:	682b      	ldr	r3, [r5, #0]
 8008758:	0607      	lsls	r7, r0, #24
 800875a:	f103 0104 	add.w	r1, r3, #4
 800875e:	6029      	str	r1, [r5, #0]
 8008760:	d501      	bpl.n	8008766 <_printf_i+0xbe>
 8008762:	681e      	ldr	r6, [r3, #0]
 8008764:	e003      	b.n	800876e <_printf_i+0xc6>
 8008766:	0646      	lsls	r6, r0, #25
 8008768:	d5fb      	bpl.n	8008762 <_printf_i+0xba>
 800876a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800876e:	2e00      	cmp	r6, #0
 8008770:	da03      	bge.n	800877a <_printf_i+0xd2>
 8008772:	232d      	movs	r3, #45	; 0x2d
 8008774:	4276      	negs	r6, r6
 8008776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800877a:	485a      	ldr	r0, [pc, #360]	; (80088e4 <_printf_i+0x23c>)
 800877c:	230a      	movs	r3, #10
 800877e:	e012      	b.n	80087a6 <_printf_i+0xfe>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	6820      	ldr	r0, [r4, #0]
 8008784:	1d19      	adds	r1, r3, #4
 8008786:	6029      	str	r1, [r5, #0]
 8008788:	0605      	lsls	r5, r0, #24
 800878a:	d501      	bpl.n	8008790 <_printf_i+0xe8>
 800878c:	681e      	ldr	r6, [r3, #0]
 800878e:	e002      	b.n	8008796 <_printf_i+0xee>
 8008790:	0641      	lsls	r1, r0, #25
 8008792:	d5fb      	bpl.n	800878c <_printf_i+0xe4>
 8008794:	881e      	ldrh	r6, [r3, #0]
 8008796:	4853      	ldr	r0, [pc, #332]	; (80088e4 <_printf_i+0x23c>)
 8008798:	2f6f      	cmp	r7, #111	; 0x6f
 800879a:	bf0c      	ite	eq
 800879c:	2308      	moveq	r3, #8
 800879e:	230a      	movne	r3, #10
 80087a0:	2100      	movs	r1, #0
 80087a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087a6:	6865      	ldr	r5, [r4, #4]
 80087a8:	60a5      	str	r5, [r4, #8]
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	bfa2      	ittt	ge
 80087ae:	6821      	ldrge	r1, [r4, #0]
 80087b0:	f021 0104 	bicge.w	r1, r1, #4
 80087b4:	6021      	strge	r1, [r4, #0]
 80087b6:	b90e      	cbnz	r6, 80087bc <_printf_i+0x114>
 80087b8:	2d00      	cmp	r5, #0
 80087ba:	d04b      	beq.n	8008854 <_printf_i+0x1ac>
 80087bc:	4615      	mov	r5, r2
 80087be:	fbb6 f1f3 	udiv	r1, r6, r3
 80087c2:	fb03 6711 	mls	r7, r3, r1, r6
 80087c6:	5dc7      	ldrb	r7, [r0, r7]
 80087c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087cc:	4637      	mov	r7, r6
 80087ce:	42bb      	cmp	r3, r7
 80087d0:	460e      	mov	r6, r1
 80087d2:	d9f4      	bls.n	80087be <_printf_i+0x116>
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d10b      	bne.n	80087f0 <_printf_i+0x148>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	07de      	lsls	r6, r3, #31
 80087dc:	d508      	bpl.n	80087f0 <_printf_i+0x148>
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	6861      	ldr	r1, [r4, #4]
 80087e2:	4299      	cmp	r1, r3
 80087e4:	bfde      	ittt	le
 80087e6:	2330      	movle	r3, #48	; 0x30
 80087e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087f0:	1b52      	subs	r2, r2, r5
 80087f2:	6122      	str	r2, [r4, #16]
 80087f4:	f8cd a000 	str.w	sl, [sp]
 80087f8:	464b      	mov	r3, r9
 80087fa:	aa03      	add	r2, sp, #12
 80087fc:	4621      	mov	r1, r4
 80087fe:	4640      	mov	r0, r8
 8008800:	f7ff fee4 	bl	80085cc <_printf_common>
 8008804:	3001      	adds	r0, #1
 8008806:	d14a      	bne.n	800889e <_printf_i+0x1f6>
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	b004      	add	sp, #16
 800880e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	f043 0320 	orr.w	r3, r3, #32
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	4833      	ldr	r0, [pc, #204]	; (80088e8 <_printf_i+0x240>)
 800881c:	2778      	movs	r7, #120	; 0x78
 800881e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	6829      	ldr	r1, [r5, #0]
 8008826:	061f      	lsls	r7, r3, #24
 8008828:	f851 6b04 	ldr.w	r6, [r1], #4
 800882c:	d402      	bmi.n	8008834 <_printf_i+0x18c>
 800882e:	065f      	lsls	r7, r3, #25
 8008830:	bf48      	it	mi
 8008832:	b2b6      	uxthmi	r6, r6
 8008834:	07df      	lsls	r7, r3, #31
 8008836:	bf48      	it	mi
 8008838:	f043 0320 	orrmi.w	r3, r3, #32
 800883c:	6029      	str	r1, [r5, #0]
 800883e:	bf48      	it	mi
 8008840:	6023      	strmi	r3, [r4, #0]
 8008842:	b91e      	cbnz	r6, 800884c <_printf_i+0x1a4>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	f023 0320 	bic.w	r3, r3, #32
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	2310      	movs	r3, #16
 800884e:	e7a7      	b.n	80087a0 <_printf_i+0xf8>
 8008850:	4824      	ldr	r0, [pc, #144]	; (80088e4 <_printf_i+0x23c>)
 8008852:	e7e4      	b.n	800881e <_printf_i+0x176>
 8008854:	4615      	mov	r5, r2
 8008856:	e7bd      	b.n	80087d4 <_printf_i+0x12c>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	6826      	ldr	r6, [r4, #0]
 800885c:	6961      	ldr	r1, [r4, #20]
 800885e:	1d18      	adds	r0, r3, #4
 8008860:	6028      	str	r0, [r5, #0]
 8008862:	0635      	lsls	r5, r6, #24
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	d501      	bpl.n	800886c <_printf_i+0x1c4>
 8008868:	6019      	str	r1, [r3, #0]
 800886a:	e002      	b.n	8008872 <_printf_i+0x1ca>
 800886c:	0670      	lsls	r0, r6, #25
 800886e:	d5fb      	bpl.n	8008868 <_printf_i+0x1c0>
 8008870:	8019      	strh	r1, [r3, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	6123      	str	r3, [r4, #16]
 8008876:	4615      	mov	r5, r2
 8008878:	e7bc      	b.n	80087f4 <_printf_i+0x14c>
 800887a:	682b      	ldr	r3, [r5, #0]
 800887c:	1d1a      	adds	r2, r3, #4
 800887e:	602a      	str	r2, [r5, #0]
 8008880:	681d      	ldr	r5, [r3, #0]
 8008882:	6862      	ldr	r2, [r4, #4]
 8008884:	2100      	movs	r1, #0
 8008886:	4628      	mov	r0, r5
 8008888:	f7f7 fcba 	bl	8000200 <memchr>
 800888c:	b108      	cbz	r0, 8008892 <_printf_i+0x1ea>
 800888e:	1b40      	subs	r0, r0, r5
 8008890:	6060      	str	r0, [r4, #4]
 8008892:	6863      	ldr	r3, [r4, #4]
 8008894:	6123      	str	r3, [r4, #16]
 8008896:	2300      	movs	r3, #0
 8008898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800889c:	e7aa      	b.n	80087f4 <_printf_i+0x14c>
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	462a      	mov	r2, r5
 80088a2:	4649      	mov	r1, r9
 80088a4:	4640      	mov	r0, r8
 80088a6:	47d0      	blx	sl
 80088a8:	3001      	adds	r0, #1
 80088aa:	d0ad      	beq.n	8008808 <_printf_i+0x160>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	079b      	lsls	r3, r3, #30
 80088b0:	d413      	bmi.n	80088da <_printf_i+0x232>
 80088b2:	68e0      	ldr	r0, [r4, #12]
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	4298      	cmp	r0, r3
 80088b8:	bfb8      	it	lt
 80088ba:	4618      	movlt	r0, r3
 80088bc:	e7a6      	b.n	800880c <_printf_i+0x164>
 80088be:	2301      	movs	r3, #1
 80088c0:	4632      	mov	r2, r6
 80088c2:	4649      	mov	r1, r9
 80088c4:	4640      	mov	r0, r8
 80088c6:	47d0      	blx	sl
 80088c8:	3001      	adds	r0, #1
 80088ca:	d09d      	beq.n	8008808 <_printf_i+0x160>
 80088cc:	3501      	adds	r5, #1
 80088ce:	68e3      	ldr	r3, [r4, #12]
 80088d0:	9903      	ldr	r1, [sp, #12]
 80088d2:	1a5b      	subs	r3, r3, r1
 80088d4:	42ab      	cmp	r3, r5
 80088d6:	dcf2      	bgt.n	80088be <_printf_i+0x216>
 80088d8:	e7eb      	b.n	80088b2 <_printf_i+0x20a>
 80088da:	2500      	movs	r5, #0
 80088dc:	f104 0619 	add.w	r6, r4, #25
 80088e0:	e7f5      	b.n	80088ce <_printf_i+0x226>
 80088e2:	bf00      	nop
 80088e4:	08009165 	.word	0x08009165
 80088e8:	08009176 	.word	0x08009176

080088ec <__sflush_r>:
 80088ec:	898a      	ldrh	r2, [r1, #12]
 80088ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f2:	4605      	mov	r5, r0
 80088f4:	0710      	lsls	r0, r2, #28
 80088f6:	460c      	mov	r4, r1
 80088f8:	d458      	bmi.n	80089ac <__sflush_r+0xc0>
 80088fa:	684b      	ldr	r3, [r1, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dc05      	bgt.n	800890c <__sflush_r+0x20>
 8008900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	dc02      	bgt.n	800890c <__sflush_r+0x20>
 8008906:	2000      	movs	r0, #0
 8008908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800890c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800890e:	2e00      	cmp	r6, #0
 8008910:	d0f9      	beq.n	8008906 <__sflush_r+0x1a>
 8008912:	2300      	movs	r3, #0
 8008914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008918:	682f      	ldr	r7, [r5, #0]
 800891a:	6a21      	ldr	r1, [r4, #32]
 800891c:	602b      	str	r3, [r5, #0]
 800891e:	d032      	beq.n	8008986 <__sflush_r+0x9a>
 8008920:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	075a      	lsls	r2, r3, #29
 8008926:	d505      	bpl.n	8008934 <__sflush_r+0x48>
 8008928:	6863      	ldr	r3, [r4, #4]
 800892a:	1ac0      	subs	r0, r0, r3
 800892c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800892e:	b10b      	cbz	r3, 8008934 <__sflush_r+0x48>
 8008930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008932:	1ac0      	subs	r0, r0, r3
 8008934:	2300      	movs	r3, #0
 8008936:	4602      	mov	r2, r0
 8008938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800893a:	6a21      	ldr	r1, [r4, #32]
 800893c:	4628      	mov	r0, r5
 800893e:	47b0      	blx	r6
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	d106      	bne.n	8008954 <__sflush_r+0x68>
 8008946:	6829      	ldr	r1, [r5, #0]
 8008948:	291d      	cmp	r1, #29
 800894a:	d82b      	bhi.n	80089a4 <__sflush_r+0xb8>
 800894c:	4a29      	ldr	r2, [pc, #164]	; (80089f4 <__sflush_r+0x108>)
 800894e:	410a      	asrs	r2, r1
 8008950:	07d6      	lsls	r6, r2, #31
 8008952:	d427      	bmi.n	80089a4 <__sflush_r+0xb8>
 8008954:	2200      	movs	r2, #0
 8008956:	6062      	str	r2, [r4, #4]
 8008958:	04d9      	lsls	r1, r3, #19
 800895a:	6922      	ldr	r2, [r4, #16]
 800895c:	6022      	str	r2, [r4, #0]
 800895e:	d504      	bpl.n	800896a <__sflush_r+0x7e>
 8008960:	1c42      	adds	r2, r0, #1
 8008962:	d101      	bne.n	8008968 <__sflush_r+0x7c>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	b903      	cbnz	r3, 800896a <__sflush_r+0x7e>
 8008968:	6560      	str	r0, [r4, #84]	; 0x54
 800896a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800896c:	602f      	str	r7, [r5, #0]
 800896e:	2900      	cmp	r1, #0
 8008970:	d0c9      	beq.n	8008906 <__sflush_r+0x1a>
 8008972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008976:	4299      	cmp	r1, r3
 8008978:	d002      	beq.n	8008980 <__sflush_r+0x94>
 800897a:	4628      	mov	r0, r5
 800897c:	f7ff fa92 	bl	8007ea4 <_free_r>
 8008980:	2000      	movs	r0, #0
 8008982:	6360      	str	r0, [r4, #52]	; 0x34
 8008984:	e7c0      	b.n	8008908 <__sflush_r+0x1c>
 8008986:	2301      	movs	r3, #1
 8008988:	4628      	mov	r0, r5
 800898a:	47b0      	blx	r6
 800898c:	1c41      	adds	r1, r0, #1
 800898e:	d1c8      	bne.n	8008922 <__sflush_r+0x36>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0c5      	beq.n	8008922 <__sflush_r+0x36>
 8008996:	2b1d      	cmp	r3, #29
 8008998:	d001      	beq.n	800899e <__sflush_r+0xb2>
 800899a:	2b16      	cmp	r3, #22
 800899c:	d101      	bne.n	80089a2 <__sflush_r+0xb6>
 800899e:	602f      	str	r7, [r5, #0]
 80089a0:	e7b1      	b.n	8008906 <__sflush_r+0x1a>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	e7ad      	b.n	8008908 <__sflush_r+0x1c>
 80089ac:	690f      	ldr	r7, [r1, #16]
 80089ae:	2f00      	cmp	r7, #0
 80089b0:	d0a9      	beq.n	8008906 <__sflush_r+0x1a>
 80089b2:	0793      	lsls	r3, r2, #30
 80089b4:	680e      	ldr	r6, [r1, #0]
 80089b6:	bf08      	it	eq
 80089b8:	694b      	ldreq	r3, [r1, #20]
 80089ba:	600f      	str	r7, [r1, #0]
 80089bc:	bf18      	it	ne
 80089be:	2300      	movne	r3, #0
 80089c0:	eba6 0807 	sub.w	r8, r6, r7
 80089c4:	608b      	str	r3, [r1, #8]
 80089c6:	f1b8 0f00 	cmp.w	r8, #0
 80089ca:	dd9c      	ble.n	8008906 <__sflush_r+0x1a>
 80089cc:	6a21      	ldr	r1, [r4, #32]
 80089ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089d0:	4643      	mov	r3, r8
 80089d2:	463a      	mov	r2, r7
 80089d4:	4628      	mov	r0, r5
 80089d6:	47b0      	blx	r6
 80089d8:	2800      	cmp	r0, #0
 80089da:	dc06      	bgt.n	80089ea <__sflush_r+0xfe>
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e2:	81a3      	strh	r3, [r4, #12]
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	e78e      	b.n	8008908 <__sflush_r+0x1c>
 80089ea:	4407      	add	r7, r0
 80089ec:	eba8 0800 	sub.w	r8, r8, r0
 80089f0:	e7e9      	b.n	80089c6 <__sflush_r+0xda>
 80089f2:	bf00      	nop
 80089f4:	dfbffffe 	.word	0xdfbffffe

080089f8 <_fflush_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	690b      	ldr	r3, [r1, #16]
 80089fc:	4605      	mov	r5, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	b913      	cbnz	r3, 8008a08 <_fflush_r+0x10>
 8008a02:	2500      	movs	r5, #0
 8008a04:	4628      	mov	r0, r5
 8008a06:	bd38      	pop	{r3, r4, r5, pc}
 8008a08:	b118      	cbz	r0, 8008a12 <_fflush_r+0x1a>
 8008a0a:	6a03      	ldr	r3, [r0, #32]
 8008a0c:	b90b      	cbnz	r3, 8008a12 <_fflush_r+0x1a>
 8008a0e:	f7ff f915 	bl	8007c3c <__sinit>
 8008a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0f3      	beq.n	8008a02 <_fflush_r+0xa>
 8008a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a1c:	07d0      	lsls	r0, r2, #31
 8008a1e:	d404      	bmi.n	8008a2a <_fflush_r+0x32>
 8008a20:	0599      	lsls	r1, r3, #22
 8008a22:	d402      	bmi.n	8008a2a <_fflush_r+0x32>
 8008a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a26:	f7ff fa2d 	bl	8007e84 <__retarget_lock_acquire_recursive>
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	f7ff ff5d 	bl	80088ec <__sflush_r>
 8008a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a34:	07da      	lsls	r2, r3, #31
 8008a36:	4605      	mov	r5, r0
 8008a38:	d4e4      	bmi.n	8008a04 <_fflush_r+0xc>
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	059b      	lsls	r3, r3, #22
 8008a3e:	d4e1      	bmi.n	8008a04 <_fflush_r+0xc>
 8008a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a42:	f7ff fa20 	bl	8007e86 <__retarget_lock_release_recursive>
 8008a46:	e7dd      	b.n	8008a04 <_fflush_r+0xc>

08008a48 <__swbuf_r>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	460e      	mov	r6, r1
 8008a4c:	4614      	mov	r4, r2
 8008a4e:	4605      	mov	r5, r0
 8008a50:	b118      	cbz	r0, 8008a5a <__swbuf_r+0x12>
 8008a52:	6a03      	ldr	r3, [r0, #32]
 8008a54:	b90b      	cbnz	r3, 8008a5a <__swbuf_r+0x12>
 8008a56:	f7ff f8f1 	bl	8007c3c <__sinit>
 8008a5a:	69a3      	ldr	r3, [r4, #24]
 8008a5c:	60a3      	str	r3, [r4, #8]
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	071a      	lsls	r2, r3, #28
 8008a62:	d525      	bpl.n	8008ab0 <__swbuf_r+0x68>
 8008a64:	6923      	ldr	r3, [r4, #16]
 8008a66:	b31b      	cbz	r3, 8008ab0 <__swbuf_r+0x68>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	6922      	ldr	r2, [r4, #16]
 8008a6c:	1a98      	subs	r0, r3, r2
 8008a6e:	6963      	ldr	r3, [r4, #20]
 8008a70:	b2f6      	uxtb	r6, r6
 8008a72:	4283      	cmp	r3, r0
 8008a74:	4637      	mov	r7, r6
 8008a76:	dc04      	bgt.n	8008a82 <__swbuf_r+0x3a>
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f7ff ffbc 	bl	80089f8 <_fflush_r>
 8008a80:	b9e0      	cbnz	r0, 8008abc <__swbuf_r+0x74>
 8008a82:	68a3      	ldr	r3, [r4, #8]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	60a3      	str	r3, [r4, #8]
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	6022      	str	r2, [r4, #0]
 8008a8e:	701e      	strb	r6, [r3, #0]
 8008a90:	6962      	ldr	r2, [r4, #20]
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d004      	beq.n	8008aa2 <__swbuf_r+0x5a>
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	07db      	lsls	r3, r3, #31
 8008a9c:	d506      	bpl.n	8008aac <__swbuf_r+0x64>
 8008a9e:	2e0a      	cmp	r6, #10
 8008aa0:	d104      	bne.n	8008aac <__swbuf_r+0x64>
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f7ff ffa7 	bl	80089f8 <_fflush_r>
 8008aaa:	b938      	cbnz	r0, 8008abc <__swbuf_r+0x74>
 8008aac:	4638      	mov	r0, r7
 8008aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f000 f806 	bl	8008ac4 <__swsetup_r>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d0d5      	beq.n	8008a68 <__swbuf_r+0x20>
 8008abc:	f04f 37ff 	mov.w	r7, #4294967295
 8008ac0:	e7f4      	b.n	8008aac <__swbuf_r+0x64>
	...

08008ac4 <__swsetup_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4b2a      	ldr	r3, [pc, #168]	; (8008b70 <__swsetup_r+0xac>)
 8008ac8:	4605      	mov	r5, r0
 8008aca:	6818      	ldr	r0, [r3, #0]
 8008acc:	460c      	mov	r4, r1
 8008ace:	b118      	cbz	r0, 8008ad8 <__swsetup_r+0x14>
 8008ad0:	6a03      	ldr	r3, [r0, #32]
 8008ad2:	b90b      	cbnz	r3, 8008ad8 <__swsetup_r+0x14>
 8008ad4:	f7ff f8b2 	bl	8007c3c <__sinit>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ade:	0718      	lsls	r0, r3, #28
 8008ae0:	d422      	bmi.n	8008b28 <__swsetup_r+0x64>
 8008ae2:	06d9      	lsls	r1, r3, #27
 8008ae4:	d407      	bmi.n	8008af6 <__swsetup_r+0x32>
 8008ae6:	2309      	movs	r3, #9
 8008ae8:	602b      	str	r3, [r5, #0]
 8008aea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	f04f 30ff 	mov.w	r0, #4294967295
 8008af4:	e034      	b.n	8008b60 <__swsetup_r+0x9c>
 8008af6:	0758      	lsls	r0, r3, #29
 8008af8:	d512      	bpl.n	8008b20 <__swsetup_r+0x5c>
 8008afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008afc:	b141      	cbz	r1, 8008b10 <__swsetup_r+0x4c>
 8008afe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b02:	4299      	cmp	r1, r3
 8008b04:	d002      	beq.n	8008b0c <__swsetup_r+0x48>
 8008b06:	4628      	mov	r0, r5
 8008b08:	f7ff f9cc 	bl	8007ea4 <_free_r>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	6363      	str	r3, [r4, #52]	; 0x34
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b16:	81a3      	strh	r3, [r4, #12]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	6063      	str	r3, [r4, #4]
 8008b1c:	6923      	ldr	r3, [r4, #16]
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	f043 0308 	orr.w	r3, r3, #8
 8008b26:	81a3      	strh	r3, [r4, #12]
 8008b28:	6923      	ldr	r3, [r4, #16]
 8008b2a:	b94b      	cbnz	r3, 8008b40 <__swsetup_r+0x7c>
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b36:	d003      	beq.n	8008b40 <__swsetup_r+0x7c>
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f000 f899 	bl	8008c72 <__smakebuf_r>
 8008b40:	89a0      	ldrh	r0, [r4, #12]
 8008b42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b46:	f010 0301 	ands.w	r3, r0, #1
 8008b4a:	d00a      	beq.n	8008b62 <__swsetup_r+0x9e>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60a3      	str	r3, [r4, #8]
 8008b50:	6963      	ldr	r3, [r4, #20]
 8008b52:	425b      	negs	r3, r3
 8008b54:	61a3      	str	r3, [r4, #24]
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	b943      	cbnz	r3, 8008b6c <__swsetup_r+0xa8>
 8008b5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b5e:	d1c4      	bne.n	8008aea <__swsetup_r+0x26>
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	0781      	lsls	r1, r0, #30
 8008b64:	bf58      	it	pl
 8008b66:	6963      	ldrpl	r3, [r4, #20]
 8008b68:	60a3      	str	r3, [r4, #8]
 8008b6a:	e7f4      	b.n	8008b56 <__swsetup_r+0x92>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e7f7      	b.n	8008b60 <__swsetup_r+0x9c>
 8008b70:	20000080 	.word	0x20000080

08008b74 <memmove>:
 8008b74:	4288      	cmp	r0, r1
 8008b76:	b510      	push	{r4, lr}
 8008b78:	eb01 0402 	add.w	r4, r1, r2
 8008b7c:	d902      	bls.n	8008b84 <memmove+0x10>
 8008b7e:	4284      	cmp	r4, r0
 8008b80:	4623      	mov	r3, r4
 8008b82:	d807      	bhi.n	8008b94 <memmove+0x20>
 8008b84:	1e43      	subs	r3, r0, #1
 8008b86:	42a1      	cmp	r1, r4
 8008b88:	d008      	beq.n	8008b9c <memmove+0x28>
 8008b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b92:	e7f8      	b.n	8008b86 <memmove+0x12>
 8008b94:	4402      	add	r2, r0
 8008b96:	4601      	mov	r1, r0
 8008b98:	428a      	cmp	r2, r1
 8008b9a:	d100      	bne.n	8008b9e <memmove+0x2a>
 8008b9c:	bd10      	pop	{r4, pc}
 8008b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ba6:	e7f7      	b.n	8008b98 <memmove+0x24>

08008ba8 <_sbrk_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d06      	ldr	r5, [pc, #24]	; (8008bc4 <_sbrk_r+0x1c>)
 8008bac:	2300      	movs	r3, #0
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	602b      	str	r3, [r5, #0]
 8008bb4:	f7f8 fce4 	bl	8001580 <_sbrk>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_sbrk_r+0x1a>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_sbrk_r+0x1a>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	200194c8 	.word	0x200194c8

08008bc8 <_realloc_r>:
 8008bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bcc:	4680      	mov	r8, r0
 8008bce:	4614      	mov	r4, r2
 8008bd0:	460e      	mov	r6, r1
 8008bd2:	b921      	cbnz	r1, 8008bde <_realloc_r+0x16>
 8008bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd8:	4611      	mov	r1, r2
 8008bda:	f7ff b9cf 	b.w	8007f7c <_malloc_r>
 8008bde:	b92a      	cbnz	r2, 8008bec <_realloc_r+0x24>
 8008be0:	f7ff f960 	bl	8007ea4 <_free_r>
 8008be4:	4625      	mov	r5, r4
 8008be6:	4628      	mov	r0, r5
 8008be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bec:	f000 f8a0 	bl	8008d30 <_malloc_usable_size_r>
 8008bf0:	4284      	cmp	r4, r0
 8008bf2:	4607      	mov	r7, r0
 8008bf4:	d802      	bhi.n	8008bfc <_realloc_r+0x34>
 8008bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bfa:	d812      	bhi.n	8008c22 <_realloc_r+0x5a>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4640      	mov	r0, r8
 8008c00:	f7ff f9bc 	bl	8007f7c <_malloc_r>
 8008c04:	4605      	mov	r5, r0
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d0ed      	beq.n	8008be6 <_realloc_r+0x1e>
 8008c0a:	42bc      	cmp	r4, r7
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	4631      	mov	r1, r6
 8008c10:	bf28      	it	cs
 8008c12:	463a      	movcs	r2, r7
 8008c14:	f7ff f938 	bl	8007e88 <memcpy>
 8008c18:	4631      	mov	r1, r6
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	f7ff f942 	bl	8007ea4 <_free_r>
 8008c20:	e7e1      	b.n	8008be6 <_realloc_r+0x1e>
 8008c22:	4635      	mov	r5, r6
 8008c24:	e7df      	b.n	8008be6 <_realloc_r+0x1e>

08008c26 <__swhatbuf_r>:
 8008c26:	b570      	push	{r4, r5, r6, lr}
 8008c28:	460c      	mov	r4, r1
 8008c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2e:	2900      	cmp	r1, #0
 8008c30:	b096      	sub	sp, #88	; 0x58
 8008c32:	4615      	mov	r5, r2
 8008c34:	461e      	mov	r6, r3
 8008c36:	da0d      	bge.n	8008c54 <__swhatbuf_r+0x2e>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c3e:	f04f 0100 	mov.w	r1, #0
 8008c42:	bf0c      	ite	eq
 8008c44:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c48:	2340      	movne	r3, #64	; 0x40
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	6031      	str	r1, [r6, #0]
 8008c4e:	602b      	str	r3, [r5, #0]
 8008c50:	b016      	add	sp, #88	; 0x58
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	466a      	mov	r2, sp
 8008c56:	f000 f849 	bl	8008cec <_fstat_r>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	dbec      	blt.n	8008c38 <__swhatbuf_r+0x12>
 8008c5e:	9901      	ldr	r1, [sp, #4]
 8008c60:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c64:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c68:	4259      	negs	r1, r3
 8008c6a:	4159      	adcs	r1, r3
 8008c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c70:	e7eb      	b.n	8008c4a <__swhatbuf_r+0x24>

08008c72 <__smakebuf_r>:
 8008c72:	898b      	ldrh	r3, [r1, #12]
 8008c74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c76:	079d      	lsls	r5, r3, #30
 8008c78:	4606      	mov	r6, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	d507      	bpl.n	8008c8e <__smakebuf_r+0x1c>
 8008c7e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c82:	6023      	str	r3, [r4, #0]
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	2301      	movs	r3, #1
 8008c88:	6163      	str	r3, [r4, #20]
 8008c8a:	b002      	add	sp, #8
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
 8008c8e:	ab01      	add	r3, sp, #4
 8008c90:	466a      	mov	r2, sp
 8008c92:	f7ff ffc8 	bl	8008c26 <__swhatbuf_r>
 8008c96:	9900      	ldr	r1, [sp, #0]
 8008c98:	4605      	mov	r5, r0
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7ff f96e 	bl	8007f7c <_malloc_r>
 8008ca0:	b948      	cbnz	r0, 8008cb6 <__smakebuf_r+0x44>
 8008ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca6:	059a      	lsls	r2, r3, #22
 8008ca8:	d4ef      	bmi.n	8008c8a <__smakebuf_r+0x18>
 8008caa:	f023 0303 	bic.w	r3, r3, #3
 8008cae:	f043 0302 	orr.w	r3, r3, #2
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	e7e3      	b.n	8008c7e <__smakebuf_r+0xc>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	6020      	str	r0, [r4, #0]
 8008cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	9b00      	ldr	r3, [sp, #0]
 8008cc2:	6163      	str	r3, [r4, #20]
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	6120      	str	r0, [r4, #16]
 8008cc8:	b15b      	cbz	r3, 8008ce2 <__smakebuf_r+0x70>
 8008cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f000 f81e 	bl	8008d10 <_isatty_r>
 8008cd4:	b128      	cbz	r0, 8008ce2 <__smakebuf_r+0x70>
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	f023 0303 	bic.w	r3, r3, #3
 8008cdc:	f043 0301 	orr.w	r3, r3, #1
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	431d      	orrs	r5, r3
 8008ce6:	81a5      	strh	r5, [r4, #12]
 8008ce8:	e7cf      	b.n	8008c8a <__smakebuf_r+0x18>
	...

08008cec <_fstat_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d07      	ldr	r5, [pc, #28]	; (8008d0c <_fstat_r+0x20>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	f7f8 fc18 	bl	800152e <_fstat>
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	d102      	bne.n	8008d08 <_fstat_r+0x1c>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	b103      	cbz	r3, 8008d08 <_fstat_r+0x1c>
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	bd38      	pop	{r3, r4, r5, pc}
 8008d0a:	bf00      	nop
 8008d0c:	200194c8 	.word	0x200194c8

08008d10 <_isatty_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d06      	ldr	r5, [pc, #24]	; (8008d2c <_isatty_r+0x1c>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	602b      	str	r3, [r5, #0]
 8008d1c:	f7f8 fc17 	bl	800154e <_isatty>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_isatty_r+0x1a>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_isatty_r+0x1a>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	200194c8 	.word	0x200194c8

08008d30 <_malloc_usable_size_r>:
 8008d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d34:	1f18      	subs	r0, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	bfbc      	itt	lt
 8008d3a:	580b      	ldrlt	r3, [r1, r0]
 8008d3c:	18c0      	addlt	r0, r0, r3
 8008d3e:	4770      	bx	lr

08008d40 <_init>:
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d42:	bf00      	nop
 8008d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d46:	bc08      	pop	{r3}
 8008d48:	469e      	mov	lr, r3
 8008d4a:	4770      	bx	lr

08008d4c <_fini>:
 8008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4e:	bf00      	nop
 8008d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d52:	bc08      	pop	{r3}
 8008d54:	469e      	mov	lr, r3
 8008d56:	4770      	bx	lr
