
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f5c  08004f5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f64  08004f64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00012ef4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f64  20012f64  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cc16  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022fd  00000000  00000000  0002ccf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d88  00000000  00000000  0002eff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a6d  00000000  00000000  0002fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000236eb  00000000  00000000  000307ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f665  00000000  00000000  00053ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d84b1  00000000  00000000  0006353d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ee0  00000000  00000000  0013b9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0013f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e34 	.word	0x08004e34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004e34 	.word	0x08004e34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000572:	f000 fceb 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f88f 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f8f7 	bl	800076c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

//  SEGGER_UART_init(500000);

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 800057e:	4b38      	ldr	r3, [pc, #224]	; (8000660 <main+0xf4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a37      	ldr	r2, [pc, #220]	; (8000660 <main+0xf4>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

//  SEGGER_SYSVIEW_Conf();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 800058a:	4b36      	ldr	r3, [pc, #216]	; (8000664 <main+0xf8>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2303      	movs	r3, #3
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	; 0xc8
 8000596:	4934      	ldr	r1, [pc, #208]	; (8000668 <main+0xfc>)
 8000598:	4834      	ldr	r0, [pc, #208]	; (800066c <main+0x100>)
 800059a:	f002 f837 	bl	800260c <xTaskCreate>
 800059e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00a      	beq.n	80005bc <main+0x50>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005b8:	bf00      	nop
 80005ba:	e7fe      	b.n	80005ba <main+0x4e>

  next_task_handle = ledg_task_handle;
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <main+0xf8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a2b      	ldr	r2, [pc, #172]	; (8000670 <main+0x104>)
 80005c2:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <main+0x108>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	22c8      	movs	r2, #200	; 0xc8
 80005d0:	4929      	ldr	r1, [pc, #164]	; (8000678 <main+0x10c>)
 80005d2:	482a      	ldr	r0, [pc, #168]	; (800067c <main+0x110>)
 80005d4:	f002 f81a 	bl	800260c <xTaskCreate>
 80005d8:	6178      	str	r0, [r7, #20]

   configASSERT(status == pdPASS);
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d00a      	beq.n	80005f6 <main+0x8a>
    __asm volatile
 80005e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e4:	f383 8811 	msr	BASEPRI, r3
 80005e8:	f3bf 8f6f 	isb	sy
 80005ec:	f3bf 8f4f 	dsb	sy
 80005f0:	60fb      	str	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	e7fe      	b.n	80005f4 <main+0x88>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 1, &ledr_task_handle);
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <main+0x114>)
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	22c8      	movs	r2, #200	; 0xc8
 8000602:	4920      	ldr	r1, [pc, #128]	; (8000684 <main+0x118>)
 8000604:	4820      	ldr	r0, [pc, #128]	; (8000688 <main+0x11c>)
 8000606:	f002 f801 	bl	800260c <xTaskCreate>
 800060a:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00a      	beq.n	8000628 <main+0xbc>
    __asm volatile
 8000612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000616:	f383 8811 	msr	BASEPRI, r3
 800061a:	f3bf 8f6f 	isb	sy
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	60bb      	str	r3, [r7, #8]
}
 8000624:	bf00      	nop
 8000626:	e7fe      	b.n	8000626 <main+0xba>

  status = xTaskCreate(button_handler, "Button Task", 200, NULL, 4, &btn_task_handle);
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <main+0x120>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2304      	movs	r3, #4
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	22c8      	movs	r2, #200	; 0xc8
 8000634:	4916      	ldr	r1, [pc, #88]	; (8000690 <main+0x124>)
 8000636:	4817      	ldr	r0, [pc, #92]	; (8000694 <main+0x128>)
 8000638:	f001 ffe8 	bl	800260c <xTaskCreate>
 800063c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d00a      	beq.n	800065a <main+0xee>
    __asm volatile
 8000644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000648:	f383 8811 	msr	BASEPRI, r3
 800064c:	f3bf 8f6f 	isb	sy
 8000650:	f3bf 8f4f 	dsb	sy
 8000654:	607b      	str	r3, [r7, #4]
}
 8000656:	bf00      	nop
 8000658:	e7fe      	b.n	8000658 <main+0xec>



  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800065a:	f002 fa41 	bl	8002ae0 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0xf2>
 8000660:	e0001000 	.word	0xe0001000
 8000664:	2000008c 	.word	0x2000008c
 8000668:	08004e4c 	.word	0x08004e4c
 800066c:	08000a29 	.word	0x08000a29
 8000670:	2000009c 	.word	0x2000009c
 8000674:	20000090 	.word	0x20000090
 8000678:	08004e5c 	.word	0x08004e5c
 800067c:	08000a99 	.word	0x08000a99
 8000680:	20000094 	.word	0x20000094
 8000684:	08004e6c 	.word	0x08004e6c
 8000688:	08000b09 	.word	0x08000b09
 800068c:	20000098 	.word	0x20000098
 8000690:	08004e7c 	.word	0x08004e7c
 8000694:	08000b81 	.word	0x08000b81

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fda5 	bl	80041f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	; 0xa8
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 ff21 	bl	8001564 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 fa64 	bl	8000bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f982 	bl	8001a54 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 fa4d 	bl	8000bf4 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4ba2      	ldr	r3, [pc, #648]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4aa1      	ldr	r2, [pc, #644]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b9f      	ldr	r3, [pc, #636]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b9b      	ldr	r3, [pc, #620]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a9a      	ldr	r2, [pc, #616]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b98      	ldr	r3, [pc, #608]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b94      	ldr	r3, [pc, #592]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a93      	ldr	r2, [pc, #588]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b91      	ldr	r3, [pc, #580]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b8d      	ldr	r3, [pc, #564]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a8c      	ldr	r2, [pc, #560]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b8a      	ldr	r3, [pc, #552]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a85      	ldr	r2, [pc, #532]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b83      	ldr	r3, [pc, #524]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b7f      	ldr	r3, [pc, #508]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a7e      	ldr	r2, [pc, #504]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b7c      	ldr	r3, [pc, #496]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4879      	ldr	r0, [pc, #484]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000830:	f000 fe64 	bl	80014fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4877      	ldr	r0, [pc, #476]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fe5f 	bl	80014fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000844:	4875      	ldr	r0, [pc, #468]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 8000846:	f000 fe59 	bl	80014fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	486c      	ldr	r0, [pc, #432]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000862:	f000 fc97 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4866      	ldr	r0, [pc, #408]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800087e:	f000 fc89 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	485e      	ldr	r0, [pc, #376]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fc79 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	485a      	ldr	r0, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008b8:	f000 fc6c 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008bc:	2310      	movs	r3, #16
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008cc:	2306      	movs	r3, #6
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4852      	ldr	r0, [pc, #328]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008d8:	f000 fc5c 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008dc:	23e0      	movs	r3, #224	; 0xe0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ec:	2305      	movs	r3, #5
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	484a      	ldr	r0, [pc, #296]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 fc4c 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008fc:	2304      	movs	r3, #4
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4845      	ldr	r0, [pc, #276]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 8000910:	f000 fc40 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 8000932:	f000 fc2f 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000936:	f24f 0310 	movw	r3, #61456	; 0xf010
 800093a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4833      	ldr	r0, [pc, #204]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 8000950:	f000 fc20 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000954:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000966:	2306      	movs	r3, #6
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4829      	ldr	r0, [pc, #164]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 8000972:	f000 fc0f 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 800098c:	f000 fc02 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000990:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009a2:	230a      	movs	r3, #10
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481c      	ldr	r0, [pc, #112]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80009ae:	f000 fbf1 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 80009c6:	f000 fbe5 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d0:	2312      	movs	r3, #18
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009dc:	2304      	movs	r3, #4
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 80009e8:	f000 fbd4 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000a02:	f000 fbc7 	bl	8001194 <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <led_green_handler>:

/* USER CODE BEGIN 4 */


static void led_green_handler(void* parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		printf("Toggling green LED");
 8000a30:	4814      	ldr	r0, [pc, #80]	; (8000a84 <led_green_handler+0x5c>)
 8000a32:	f003 fb8b 	bl	800414c <iprintf>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	4813      	ldr	r0, [pc, #76]	; (8000a88 <led_green_handler+0x60>)
 8000a3c:	f000 fd77 	bl	800152e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f002 fbc1 	bl	80031d4 <xTaskGenericNotifyWait>
 8000a52:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1ea      	bne.n	8000a30 <led_green_handler+0x8>
			vTaskSuspendAll();
 8000a5a:	f002 f87f 	bl	8002b5c <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <led_green_handler+0x64>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <led_green_handler+0x68>)
 8000a64:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a66:	f002 f887 	bl	8002b78 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN,GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <led_green_handler+0x60>)
 8000a72:	f000 fd43 	bl	80014fc <HAL_GPIO_WritePin>
			printf("Delete green LED task");
 8000a76:	4807      	ldr	r0, [pc, #28]	; (8000a94 <led_green_handler+0x6c>)
 8000a78:	f003 fb68 	bl	800414c <iprintf>
			vTaskDelete(NULL);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f001 ff0f 	bl	80028a0 <vTaskDelete>
	{
 8000a82:	e7d5      	b.n	8000a30 <led_green_handler+0x8>
 8000a84:	08004e88 	.word	0x08004e88
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	20000090 	.word	0x20000090
 8000a90:	2000009c 	.word	0x2000009c
 8000a94:	08004e9c 	.word	0x08004e9c

08000a98 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		printf("Toggling orange LED");
 8000aa0:	4814      	ldr	r0, [pc, #80]	; (8000af4 <led_orange_handler+0x5c>)
 8000aa2:	f003 fb53 	bl	800414c <iprintf>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN );
 8000aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aaa:	4813      	ldr	r0, [pc, #76]	; (8000af8 <led_orange_handler+0x60>)
 8000aac:	f000 fd3f 	bl	800152e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000ab0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f002 fb89 	bl	80031d4 <xTaskGenericNotifyWait>
 8000ac2:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d1ea      	bne.n	8000aa0 <led_orange_handler+0x8>
			vTaskSuspendAll();
 8000aca:	f002 f847 	bl	8002b5c <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <led_orange_handler+0x64>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <led_orange_handler+0x68>)
 8000ad4:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ad6:	f002 f84f 	bl	8002b78 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN,GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <led_orange_handler+0x60>)
 8000ae2:	f000 fd0b 	bl	80014fc <HAL_GPIO_WritePin>
			printf("Delete orange LED task");
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <led_orange_handler+0x6c>)
 8000ae8:	f003 fb30 	bl	800414c <iprintf>
			vTaskDelete(NULL);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f001 fed7 	bl	80028a0 <vTaskDelete>
	{
 8000af2:	e7d5      	b.n	8000aa0 <led_orange_handler+0x8>
 8000af4:	08004eb4 	.word	0x08004eb4
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	20000094 	.word	0x20000094
 8000b00:	2000009c 	.word	0x2000009c
 8000b04:	08004ec8 	.word	0x08004ec8

08000b08 <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		printf("Toggling red LED");
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <led_red_handler+0x64>)
 8000b12:	f003 fb1b 	bl	800414c <iprintf>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1a:	4815      	ldr	r0, [pc, #84]	; (8000b70 <led_red_handler+0x68>)
 8000b1c:	f000 fd07 	bl	800152e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000b20:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f002 fb51 	bl	80031d4 <xTaskGenericNotifyWait>
 8000b32:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d1ea      	bne.n	8000b10 <led_red_handler+0x8>
			vTaskSuspendAll();
 8000b3a:	f002 f80f 	bl	8002b5c <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <led_red_handler+0x6c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b44:	f002 f818 	bl	8002b78 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN,GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <led_red_handler+0x68>)
 8000b50:	f000 fcd4 	bl	80014fc <HAL_GPIO_WritePin>
			printf("Delete red LED task");
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <led_red_handler+0x70>)
 8000b56:	f003 faf9 	bl	800414c <iprintf>
			vTaskDelete(btn_task_handle);
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <led_red_handler+0x74>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fe9e 	bl	80028a0 <vTaskDelete>
			vTaskDelete(NULL);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f001 fe9b 	bl	80028a0 <vTaskDelete>
	{
 8000b6a:	e7d1      	b.n	8000b10 <led_red_handler+0x8>
 8000b6c:	08004ee0 	.word	0x08004ee0
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	08004ef4 	.word	0x08004ef4
 8000b7c:	20000098 	.word	0x20000098

08000b80 <button_handler>:

}


static void button_handler(void* parameters)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]

	while(1){

		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b90:	2101      	movs	r1, #1
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <button_handler+0x48>)
 8000b94:	f000 fc9a 	bl	80014cc <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00b      	beq.n	8000bba <button_handler+0x3a>
		{
			if(! prev_read)
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d108      	bne.n	8000bba <button_handler+0x3a>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <button_handler+0x4c>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	2300      	movs	r3, #0
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f002 fb9f 	bl	80032f8 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000bba:	7bbb      	ldrb	r3, [r7, #14]
 8000bbc:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000bbe:	200a      	movs	r0, #10
 8000bc0:	f001 ff10 	bl	80029e4 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bc4:	e7e4      	b.n	8000b90 <button_handler+0x10>
 8000bc6:	bf00      	nop
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	2000009c 	.word	0x2000009c

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f000 f9d5 	bl	8000f90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40001000 	.word	0x40001000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <HAL_InitTick+0xe4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a32      	ldr	r2, [pc, #200]	; (8000d38 <HAL_InitTick+0xe4>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <HAL_InitTick+0xe4>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c80:	f107 0210 	add.w	r2, r7, #16
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 f8ee 	bl	8001e6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c90:	6a3b      	ldr	r3, [r7, #32]
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c9a:	f001 f8d3 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 8000c9e:	6378      	str	r0, [r7, #52]	; 0x34
 8000ca0:	e004      	b.n	8000cac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ca2:	f001 f8cf 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cae:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <HAL_InitTick+0xe8>)
 8000cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb4:	0c9b      	lsrs	r3, r3, #18
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_InitTick+0xec>)
 8000cbc:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <HAL_InitTick+0xf0>)
 8000cbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <HAL_InitTick+0xec>)
 8000cc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <HAL_InitTick+0xec>)
 8000cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ccc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_InitTick+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_InitTick+0xec>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_InitTick+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ce0:	4817      	ldr	r0, [pc, #92]	; (8000d40 <HAL_InitTick+0xec>)
 8000ce2:	f001 f8f5 	bl	8001ed0 <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d11b      	bne.n	8000d2c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cf4:	4812      	ldr	r0, [pc, #72]	; (8000d40 <HAL_InitTick+0xec>)
 8000cf6:	f001 f945 	bl	8001f84 <HAL_TIM_Base_Start_IT>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d111      	bne.n	8000d2c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d08:	2036      	movs	r0, #54	; 0x36
 8000d0a:	f000 fa35 	bl	8001178 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d808      	bhi.n	8000d26 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	2036      	movs	r0, #54	; 0x36
 8000d1a:	f000 fa11 	bl	8001140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_InitTick+0xf4>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e002      	b.n	8000d2c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3738      	adds	r7, #56	; 0x38
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	431bde83 	.word	0x431bde83
 8000d40:	200000a0 	.word	0x200000a0
 8000d44:	40001000 	.word	0x40001000
 8000d48:	20000004 	.word	0x20000004

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <NMI_Handler+0x4>

08000d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <MemManage_Handler+0x4>

08000d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM6_DAC_IRQHandler+0x10>)
 8000d7e:	f001 f971 	bl	8002064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000a0 	.word	0x200000a0

08000d8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e00a      	b.n	8000db4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d9e:	f3af 8000 	nop.w
 8000da2:	4601      	mov	r1, r0
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	60ba      	str	r2, [r7, #8]
 8000daa:	b2ca      	uxtb	r2, r1
 8000dac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf0      	blt.n	8000d9e <_read+0x12>
  }

  return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e009      	b.n	8000dec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf1      	blt.n	8000dd8 <_write+0x12>
  }
  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_close>:

int _close(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e26:	605a      	str	r2, [r3, #4]
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_isatty>:

int _isatty(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f003 f9fc 	bl	8004294 <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20020000 	.word	0x20020000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	200000e8 	.word	0x200000e8
 8000ed0:	20012f68 	.word	0x20012f68

08000ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efe:	490e      	ldr	r1, [pc, #56]	; (8000f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f14:	4c0b      	ldr	r4, [pc, #44]	; (8000f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f22:	f7ff ffd7 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f003 f9bb 	bl	80042a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fb1f 	bl	800056c <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f3c:	08004f6c 	.word	0x08004f6c
  ldr r2, =_sbss
 8000f40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f44:	20012f64 	.word	0x20012f64

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_Init+0x40>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_Init+0x40>)
 8000f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_Init+0x40>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f8d8 	bl	800112a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fe6a 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fe40 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	200000ec 	.word	0x200000ec

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200000ec 	.word	0x200000ec

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff4c 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001152:	f7ff ff61 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001156:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	6978      	ldr	r0, [r7, #20]
 800115e:	f7ff ffb1 	bl	80010c4 <NVIC_EncodePriority>
 8001162:	4602      	mov	r2, r0
 8001164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff80 	bl	8001070 <__NVIC_SetPriority>
}
 8001170:	bf00      	nop
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff54 	bl	8001034 <__NVIC_EnableIRQ>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e16b      	b.n	8001488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 815a 	bne.w	8001482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b03      	cmp	r3, #3
 8001252:	d017      	beq.n	8001284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d123      	bne.n	80012d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80b4 	beq.w	8001482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a5f      	ldr	r2, [pc, #380]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001336:	4a5b      	ldr	r2, [pc, #364]	; (80014a4 <HAL_GPIO_Init+0x310>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_GPIO_Init+0x314>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d02b      	beq.n	80013ba <HAL_GPIO_Init+0x226>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a51      	ldr	r2, [pc, #324]	; (80014ac <HAL_GPIO_Init+0x318>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d025      	beq.n	80013b6 <HAL_GPIO_Init+0x222>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a50      	ldr	r2, [pc, #320]	; (80014b0 <HAL_GPIO_Init+0x31c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01f      	beq.n	80013b2 <HAL_GPIO_Init+0x21e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d019      	beq.n	80013ae <HAL_GPIO_Init+0x21a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <HAL_GPIO_Init+0x324>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x216>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4d      	ldr	r2, [pc, #308]	; (80014bc <HAL_GPIO_Init+0x328>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x212>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4c      	ldr	r2, [pc, #304]	; (80014c0 <HAL_GPIO_Init+0x32c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <HAL_GPIO_Init+0x330>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x20a>
 800139a:	2307      	movs	r3, #7
 800139c:	e00e      	b.n	80013bc <HAL_GPIO_Init+0x228>
 800139e:	2308      	movs	r3, #8
 80013a0:	e00c      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e00a      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	; (80014a4 <HAL_GPIO_Init+0x310>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <HAL_GPIO_Init+0x334>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a32      	ldr	r2, [pc, #200]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a27      	ldr	r2, [pc, #156]	; (80014c8 <HAL_GPIO_Init+0x334>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001452:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_GPIO_Init+0x334>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <HAL_GPIO_Init+0x334>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f ae90 	bls.w	80011b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021c00 	.word	0x40021c00
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e001      	b.n	80014ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001518:	e003      	b.n	8001522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	041a      	lsls	r2, r3, #16
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	619a      	str	r2, [r3, #24]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001540:	887a      	ldrh	r2, [r7, #2]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	041a      	lsls	r2, r3, #16
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43d9      	mvns	r1, r3
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	400b      	ands	r3, r1
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e267      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d075      	beq.n	800166e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001582:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d00c      	beq.n	80015a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158e:	4b85      	ldr	r3, [pc, #532]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001596:	2b08      	cmp	r3, #8
 8001598:	d112      	bne.n	80015c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159a:	4b82      	ldr	r3, [pc, #520]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015a6:	d10b      	bne.n	80015c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	4b7e      	ldr	r3, [pc, #504]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d05b      	beq.n	800166c <HAL_RCC_OscConfig+0x108>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d157      	bne.n	800166c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e242      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c8:	d106      	bne.n	80015d8 <HAL_RCC_OscConfig+0x74>
 80015ca:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a75      	ldr	r2, [pc, #468]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e01d      	b.n	8001614 <HAL_RCC_OscConfig+0xb0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x98>
 80015e2:	4b70      	ldr	r3, [pc, #448]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a6f      	ldr	r2, [pc, #444]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b6d      	ldr	r3, [pc, #436]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6c      	ldr	r2, [pc, #432]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xb0>
 80015fc:	4b69      	ldr	r3, [pc, #420]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a68      	ldr	r2, [pc, #416]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a65      	ldr	r2, [pc, #404]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fccc 	bl	8000fb8 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fcc8 	bl	8000fb8 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e207      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b5b      	ldr	r3, [pc, #364]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0xc0>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fcb8 	bl	8000fb8 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fcb4 	bl	8000fb8 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1f3      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	4b51      	ldr	r3, [pc, #324]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0xe8>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d063      	beq.n	8001742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001686:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800168e:	2b08      	cmp	r3, #8
 8001690:	d11c      	bne.n	80016cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d116      	bne.n	80016cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x152>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e1c7      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4937      	ldr	r1, [pc, #220]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	e03a      	b.n	8001742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d4:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <HAL_RCC_OscConfig+0x244>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016da:	f7ff fc6d 	bl	8000fb8 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff fc69 	bl	8000fb8 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1a8      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4925      	ldr	r1, [pc, #148]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_RCC_OscConfig+0x244>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fc4c 	bl	8000fb8 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fc48 	bl	8000fb8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e187      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d036      	beq.n	80017bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d016      	beq.n	8001784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_RCC_OscConfig+0x248>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fc2c 	bl	8000fb8 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fc28 	bl	8000fb8 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e167      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_OscConfig+0x240>)
 8001778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x200>
 8001782:	e01b      	b.n	80017bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_OscConfig+0x248>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fc15 	bl	8000fb8 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	e00e      	b.n	80017b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001792:	f7ff fc11 	bl	8000fb8 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d907      	bls.n	80017b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e150      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
 80017a4:	40023800 	.word	0x40023800
 80017a8:	42470000 	.word	0x42470000
 80017ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ea      	bne.n	8001792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8097 	beq.w	80018f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ce:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10f      	bne.n	80017fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	4b7d      	ldr	r3, [pc, #500]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a7c      	ldr	r2, [pc, #496]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b7a      	ldr	r3, [pc, #488]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f6:	2301      	movs	r3, #1
 80017f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fa:	4b77      	ldr	r3, [pc, #476]	; (80019d8 <HAL_RCC_OscConfig+0x474>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001806:	4b74      	ldr	r3, [pc, #464]	; (80019d8 <HAL_RCC_OscConfig+0x474>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a73      	ldr	r2, [pc, #460]	; (80019d8 <HAL_RCC_OscConfig+0x474>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001812:	f7ff fbd1 	bl	8000fb8 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff fbcd 	bl	8000fb8 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e10c      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	4b6a      	ldr	r3, [pc, #424]	; (80019d8 <HAL_RCC_OscConfig+0x474>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x2ea>
 8001840:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001844:	4a63      	ldr	r2, [pc, #396]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6713      	str	r3, [r2, #112]	; 0x70
 800184c:	e01c      	b.n	8001888 <HAL_RCC_OscConfig+0x324>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x30c>
 8001856:	4b5f      	ldr	r3, [pc, #380]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	4a5e      	ldr	r2, [pc, #376]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6713      	str	r3, [r2, #112]	; 0x70
 8001862:	4b5c      	ldr	r3, [pc, #368]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a5b      	ldr	r2, [pc, #364]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0x324>
 8001870:	4b58      	ldr	r3, [pc, #352]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001874:	4a57      	ldr	r2, [pc, #348]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	6713      	str	r3, [r2, #112]	; 0x70
 800187c:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a54      	ldr	r2, [pc, #336]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001882:	f023 0304 	bic.w	r3, r3, #4
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d015      	beq.n	80018bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff fb92 	bl	8000fb8 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff fb8e 	bl	8000fb8 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0cb      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ae:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0ee      	beq.n	8001898 <HAL_RCC_OscConfig+0x334>
 80018ba:	e014      	b.n	80018e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff fb7c 	bl	8000fb8 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c2:	e00a      	b.n	80018da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff fb78 	bl	8000fb8 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0b5      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018da:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ee      	bne.n	80018c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	4a38      	ldr	r2, [pc, #224]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80a1 	beq.w	8001a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b08      	cmp	r3, #8
 800190c:	d05c      	beq.n	80019c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d141      	bne.n	800199a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_RCC_OscConfig+0x478>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fb4c 	bl	8000fb8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff fb48 	bl	8000fb8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e087      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69da      	ldr	r2, [r3, #28]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	019b      	lsls	r3, r3, #6
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	3b01      	subs	r3, #1
 800195c:	041b      	lsls	r3, r3, #16
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	491b      	ldr	r1, [pc, #108]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_RCC_OscConfig+0x478>)
 800196e:	2201      	movs	r2, #1
 8001970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7ff fb21 	bl	8000fb8 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff fb1d 	bl	8000fb8 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e05c      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x416>
 8001998:	e054      	b.n	8001a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_RCC_OscConfig+0x478>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff fb0a 	bl	8000fb8 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff fb06 	bl	8000fb8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e045      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_RCC_OscConfig+0x470>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x444>
 80019c6:	e03d      	b.n	8001a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e038      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40007000 	.word	0x40007000
 80019dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x4ec>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d028      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d121      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d11a      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d111      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0cc      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d90c      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b65      	ldr	r3, [pc, #404]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0b8      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa8:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac0:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a52      	ldr	r2, [pc, #328]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	494d      	ldr	r1, [pc, #308]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d044      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d119      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b12:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e06f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e067      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f023 0203 	bic.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4934      	ldr	r1, [pc, #208]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b44:	f7ff fa38 	bl	8000fb8 <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7ff fa34 	bl	8000fb8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e04f      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 020c 	and.w	r2, r3, #12
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1eb      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d20c      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e032      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4916      	ldr	r1, [pc, #88]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	490e      	ldr	r1, [pc, #56]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bda:	f000 f821 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	490a      	ldr	r1, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	5ccb      	ldrb	r3, [r1, r3]
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f82a 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08004f10 	.word	0x08004f10
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c24:	b094      	sub	sp, #80	; 0x50
 8001c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c30:	2300      	movs	r3, #0
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c38:	4b79      	ldr	r3, [pc, #484]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d00d      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x40>
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	f200 80e1 	bhi.w	8001e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x34>
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d003      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c52:	e0db      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c54:	4b73      	ldr	r3, [pc, #460]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c58:	e0db      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c5a:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c5e:	e0d8      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c60:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c76:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	099b      	lsrs	r3, r3, #6
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c92:	4622      	mov	r2, r4
 8001c94:	462b      	mov	r3, r5
 8001c96:	f04f 0000 	mov.w	r0, #0
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	0159      	lsls	r1, r3, #5
 8001ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca4:	0150      	lsls	r0, r2, #5
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4621      	mov	r1, r4
 8001cac:	1a51      	subs	r1, r2, r1
 8001cae:	6139      	str	r1, [r7, #16]
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cc4:	4659      	mov	r1, fp
 8001cc6:	018b      	lsls	r3, r1, #6
 8001cc8:	4651      	mov	r1, sl
 8001cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cce:	4651      	mov	r1, sl
 8001cd0:	018a      	lsls	r2, r1, #6
 8001cd2:	4651      	mov	r1, sl
 8001cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8001cd8:	4659      	mov	r1, fp
 8001cda:	eb63 0901 	sbc.w	r9, r3, r1
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cf2:	4690      	mov	r8, r2
 8001cf4:	4699      	mov	r9, r3
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	eb18 0303 	adds.w	r3, r8, r3
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	462b      	mov	r3, r5
 8001d00:	eb49 0303 	adc.w	r3, r9, r3
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d12:	4629      	mov	r1, r5
 8001d14:	024b      	lsls	r3, r1, #9
 8001d16:	4621      	mov	r1, r4
 8001d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	024a      	lsls	r2, r1, #9
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	2200      	movs	r2, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d30:	f7fe fa9e 	bl	8000270 <__aeabi_uldivmod>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d3c:	e058      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	099b      	lsrs	r3, r3, #6
 8001d44:	2200      	movs	r2, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	4611      	mov	r1, r2
 8001d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
 8001d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d58:	4642      	mov	r2, r8
 8001d5a:	464b      	mov	r3, r9
 8001d5c:	f04f 0000 	mov.w	r0, #0
 8001d60:	f04f 0100 	mov.w	r1, #0
 8001d64:	0159      	lsls	r1, r3, #5
 8001d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6a:	0150      	lsls	r0, r2, #5
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4641      	mov	r1, r8
 8001d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d76:	4649      	mov	r1, r9
 8001d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d90:	ebb2 040a 	subs.w	r4, r2, sl
 8001d94:	eb63 050b 	sbc.w	r5, r3, fp
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	00eb      	lsls	r3, r5, #3
 8001da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001da6:	00e2      	lsls	r2, r4, #3
 8001da8:	4614      	mov	r4, r2
 8001daa:	461d      	mov	r5, r3
 8001dac:	4643      	mov	r3, r8
 8001dae:	18e3      	adds	r3, r4, r3
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	464b      	mov	r3, r9
 8001db4:	eb45 0303 	adc.w	r3, r5, r3
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	028b      	lsls	r3, r1, #10
 8001dca:	4621      	mov	r1, r4
 8001dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	028a      	lsls	r2, r1, #10
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	61fa      	str	r2, [r7, #28]
 8001de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de4:	f7fe fa44 	bl	8000270 <__aeabi_uldivmod>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4613      	mov	r3, r2
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3750      	adds	r7, #80	; 0x50
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	00f42400 	.word	0x00f42400
 8001e28:	007a1200 	.word	0x007a1200

08001e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000000 	.word	0x20000000

08001e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e48:	f7ff fff0 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0a9b      	lsrs	r3, r3, #10
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	08004f20 	.word	0x08004f20

08001e6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	220f      	movs	r2, #15
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <HAL_RCC_GetClockConfig+0x60>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0207 	and.w	r2, r3, #7
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40023c00 	.word	0x40023c00

08001ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e041      	b.n	8001f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f839 	bl	8001f6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	f000 f9d8 	bl	80022c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d001      	beq.n	8001f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e04e      	b.n	800203a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a23      	ldr	r2, [pc, #140]	; (8002048 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d022      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc6:	d01d      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	; (800204c <HAL_TIM_Base_Start_IT+0xc8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d018      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00e      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d009      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_TIM_Base_Start_IT+0xdc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d111      	bne.n	8002028 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b06      	cmp	r3, #6
 8002014:	d010      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002026:	e007      	b.n	8002038 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40010400 	.word	0x40010400
 800205c:	40014000 	.word	0x40014000
 8002060:	40001800 	.word	0x40001800

08002064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d122      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b02      	cmp	r3, #2
 8002086:	d11b      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0202 	mvn.w	r2, #2
 8002090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8ee 	bl	8002288 <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8e0 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f8f1 	bl	800229c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d122      	bne.n	8002114 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d11b      	bne.n	8002114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0204 	mvn.w	r2, #4
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8c4 	bl	8002288 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8b6 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8c7 	bl	800229c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b08      	cmp	r3, #8
 8002120:	d122      	bne.n	8002168 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b08      	cmp	r3, #8
 800212e:	d11b      	bne.n	8002168 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0208 	mvn.w	r2, #8
 8002138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2204      	movs	r2, #4
 800213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f89a 	bl	8002288 <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f88c 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f89d 	bl	800229c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b10      	cmp	r3, #16
 8002174:	d122      	bne.n	80021bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b10      	cmp	r3, #16
 8002182:	d11b      	bne.n	80021bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0210 	mvn.w	r2, #16
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2208      	movs	r2, #8
 8002192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f870 	bl	8002288 <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f862 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f873 	bl	800229c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d10e      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0201 	mvn.w	r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fcf4 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b80      	cmp	r3, #128	; 0x80
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d107      	bne.n	8002214 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f902 	bl	8002418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d10e      	bne.n	8002240 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	2b40      	cmp	r3, #64	; 0x40
 800222e:	d107      	bne.n	8002240 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f838 	bl	80022b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b20      	cmp	r3, #32
 800224c:	d10e      	bne.n	800226c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b20      	cmp	r3, #32
 800225a:	d107      	bne.n	800226c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0220 	mvn.w	r2, #32
 8002264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f8cc 	bl	8002404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a40      	ldr	r2, [pc, #256]	; (80023d8 <TIM_Base_SetConfig+0x114>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d013      	beq.n	8002304 <TIM_Base_SetConfig+0x40>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d00f      	beq.n	8002304 <TIM_Base_SetConfig+0x40>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a3d      	ldr	r2, [pc, #244]	; (80023dc <TIM_Base_SetConfig+0x118>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00b      	beq.n	8002304 <TIM_Base_SetConfig+0x40>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a3c      	ldr	r2, [pc, #240]	; (80023e0 <TIM_Base_SetConfig+0x11c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d007      	beq.n	8002304 <TIM_Base_SetConfig+0x40>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3b      	ldr	r2, [pc, #236]	; (80023e4 <TIM_Base_SetConfig+0x120>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <TIM_Base_SetConfig+0x40>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <TIM_Base_SetConfig+0x124>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d108      	bne.n	8002316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a2f      	ldr	r2, [pc, #188]	; (80023d8 <TIM_Base_SetConfig+0x114>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02b      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002324:	d027      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a2c      	ldr	r2, [pc, #176]	; (80023dc <TIM_Base_SetConfig+0x118>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d023      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a2b      	ldr	r2, [pc, #172]	; (80023e0 <TIM_Base_SetConfig+0x11c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01f      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a2a      	ldr	r2, [pc, #168]	; (80023e4 <TIM_Base_SetConfig+0x120>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01b      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a29      	ldr	r2, [pc, #164]	; (80023e8 <TIM_Base_SetConfig+0x124>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d017      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a28      	ldr	r2, [pc, #160]	; (80023ec <TIM_Base_SetConfig+0x128>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a27      	ldr	r2, [pc, #156]	; (80023f0 <TIM_Base_SetConfig+0x12c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00f      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <TIM_Base_SetConfig+0x130>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00b      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a25      	ldr	r2, [pc, #148]	; (80023f8 <TIM_Base_SetConfig+0x134>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a24      	ldr	r2, [pc, #144]	; (80023fc <TIM_Base_SetConfig+0x138>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d003      	beq.n	8002376 <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a23      	ldr	r2, [pc, #140]	; (8002400 <TIM_Base_SetConfig+0x13c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800237c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <TIM_Base_SetConfig+0x114>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d003      	beq.n	80023bc <TIM_Base_SetConfig+0xf8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <TIM_Base_SetConfig+0x124>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d103      	bne.n	80023c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	615a      	str	r2, [r3, #20]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40010000 	.word	0x40010000
 80023dc:	40000400 	.word	0x40000400
 80023e0:	40000800 	.word	0x40000800
 80023e4:	40000c00 	.word	0x40000c00
 80023e8:	40010400 	.word	0x40010400
 80023ec:	40014000 	.word	0x40014000
 80023f0:	40014400 	.word	0x40014400
 80023f4:	40014800 	.word	0x40014800
 80023f8:	40001800 	.word	0x40001800
 80023fc:	40001c00 	.word	0x40001c00
 8002400:	40002000 	.word	0x40002000

08002404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f103 0208 	add.w	r2, r3, #8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f103 0208 	add.w	r2, r3, #8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f103 0208 	add.w	r2, r3, #8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d103      	bne.n	80024ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e00c      	b.n	8002508 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3308      	adds	r3, #8
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e002      	b.n	80024fc <vListInsert+0x2e>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	429a      	cmp	r2, r3
 8002506:	d2f6      	bcs.n	80024f6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6892      	ldr	r2, [r2, #8]
 8002556:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6852      	ldr	r2, [r2, #4]
 8002560:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	d103      	bne.n	8002574 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af04      	add	r7, sp, #16
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 faa8 	bl	8003afc <pvPortMalloc>
 80025ac:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80025b4:	2058      	movs	r0, #88	; 0x58
 80025b6:	f001 faa1 	bl	8003afc <pvPortMalloc>
 80025ba:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80025c2:	2258      	movs	r2, #88	; 0x58
 80025c4:	2100      	movs	r1, #0
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f001 fe15 	bl	80041f6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30
 80025d2:	e005      	b.n	80025e0 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80025d4:	6938      	ldr	r0, [r7, #16]
 80025d6:	f001 fbbd 	bl	8003d54 <vPortFree>
 80025da:	e001      	b.n	80025e0 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025e6:	2300      	movs	r3, #0
 80025e8:	9303      	str	r3, [sp, #12]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	9302      	str	r3, [sp, #8]
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f828 	bl	8002652 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002602:	697b      	ldr	r3, [r7, #20]
    }
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7ff ffb3 	bl	8002594 <prvCreateTask>
 800262e:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002636:	6938      	ldr	r0, [r7, #16]
 8002638:	f000 f89a 	bl	8002770 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800263c:	2301      	movs	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e002      	b.n	8002648 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8002648:	697b      	ldr	r3, [r7, #20]
    }
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b088      	sub	sp, #32
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	461a      	mov	r2, r3
 800266a:	21a5      	movs	r1, #165	; 0xa5
 800266c:	f001 fdc3 	bl	80041f6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800267a:	3b01      	subs	r3, #1
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f023 0307 	bic.w	r3, r3, #7
 8002688:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <prvInitialiseNewTask+0x58>
    __asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	617b      	str	r3, [r7, #20]
}
 80026a6:	bf00      	nop
 80026a8:	e7fe      	b.n	80026a8 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01e      	beq.n	80026ee <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	e012      	b.n	80026dc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4413      	add	r3, r2
 80026bc:	7819      	ldrb	r1, [r3, #0]
 80026be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	3334      	adds	r3, #52	; 0x34
 80026c6:	460a      	mov	r2, r1
 80026c8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3301      	adds	r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b09      	cmp	r3, #9
 80026e0:	d9e9      	bls.n	80026b6 <prvInitialiseNewTask+0x64>
 80026e2:	e000      	b.n	80026e6 <prvInitialiseNewTask+0x94>
            {
                break;
 80026e4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d90a      	bls.n	800270a <prvInitialiseNewTask+0xb8>
    __asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	613b      	str	r3, [r7, #16]
}
 8002706:	bf00      	nop
 8002708:	e7fe      	b.n	8002708 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	2b04      	cmp	r3, #4
 800270e:	d901      	bls.n	8002714 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002710:	2304      	movs	r3, #4
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800271e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	3304      	adds	r3, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fea1 	bl	800246c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	3318      	adds	r3, #24
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fe9c 	bl	800246c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002738:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	f1c3 0205 	rsb	r2, r3, #5
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	69b8      	ldr	r0, [r7, #24]
 8002750:	f000 ff78 	bl	8003644 <pxPortInitialiseStack>
 8002754:	4602      	mov	r2, r0
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002764:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002766:	bf00      	nop
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002778:	f001 f8de 	bl	8003938 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800277c:	4b41      	ldr	r3, [pc, #260]	; (8002884 <prvAddNewTaskToReadyList+0x114>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	4a40      	ldr	r2, [pc, #256]	; (8002884 <prvAddNewTaskToReadyList+0x114>)
 8002784:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002786:	4b40      	ldr	r3, [pc, #256]	; (8002888 <prvAddNewTaskToReadyList+0x118>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800278e:	4a3e      	ldr	r2, [pc, #248]	; (8002888 <prvAddNewTaskToReadyList+0x118>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002794:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <prvAddNewTaskToReadyList+0x114>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d110      	bne.n	80027be <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800279c:	f000 fc80 	bl	80030a0 <prvInitialiseTaskLists>
 80027a0:	e00d      	b.n	80027be <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80027a2:	4b3a      	ldr	r3, [pc, #232]	; (800288c <prvAddNewTaskToReadyList+0x11c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027aa:	4b37      	ldr	r3, [pc, #220]	; (8002888 <prvAddNewTaskToReadyList+0x118>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d802      	bhi.n	80027be <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80027b8:	4a33      	ldr	r2, [pc, #204]	; (8002888 <prvAddNewTaskToReadyList+0x118>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80027be:	4b34      	ldr	r3, [pc, #208]	; (8002890 <prvAddNewTaskToReadyList+0x120>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3301      	adds	r3, #1
 80027c4:	4a32      	ldr	r2, [pc, #200]	; (8002890 <prvAddNewTaskToReadyList+0x120>)
 80027c6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027c8:	4b31      	ldr	r3, [pc, #196]	; (8002890 <prvAddNewTaskToReadyList+0x120>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	2201      	movs	r2, #1
 80027d6:	409a      	lsls	r2, r3
 80027d8:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <prvAddNewTaskToReadyList+0x124>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4313      	orrs	r3, r2
 80027de:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <prvAddNewTaskToReadyList+0x124>)
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e6:	492c      	ldr	r1, [pc, #176]	; (8002898 <prvAddNewTaskToReadyList+0x128>)
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	3304      	adds	r3, #4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	3204      	adds	r2, #4
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	1d1a      	adds	r2, r3, #4
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <prvAddNewTaskToReadyList+0x128>)
 8002826:	441a      	add	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	615a      	str	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002830:	4919      	ldr	r1, [pc, #100]	; (8002898 <prvAddNewTaskToReadyList+0x128>)
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002842:	1c59      	adds	r1, r3, #1
 8002844:	4814      	ldr	r0, [pc, #80]	; (8002898 <prvAddNewTaskToReadyList+0x128>)
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4403      	add	r3, r0
 8002850:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002852:	f001 f8a1 	bl	8003998 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <prvAddNewTaskToReadyList+0x11c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00e      	beq.n	800287c <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <prvAddNewTaskToReadyList+0x118>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	429a      	cmp	r2, r3
 800286a:	d207      	bcs.n	800287c <prvAddNewTaskToReadyList+0x10c>
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <prvAddNewTaskToReadyList+0x12c>)
 800286e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200001c8 	.word	0x200001c8
 8002888:	200000f0 	.word	0x200000f0
 800288c:	200001d4 	.word	0x200001d4
 8002890:	200001e4 	.word	0x200001e4
 8002894:	200001d0 	.word	0x200001d0
 8002898:	200000f4 	.word	0x200000f4
 800289c:	e000ed04 	.word	0xe000ed04

080028a0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 80028ac:	f001 f844 	bl	8003938 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <vTaskDelete+0x1c>
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <vTaskDelete+0x11c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e000      	b.n	80028be <vTaskDelete+0x1e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fe3b 	bl	8002540 <uxListRemove>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d115      	bne.n	80028fc <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	493a      	ldr	r1, [pc, #232]	; (80029c0 <vTaskDelete+0x120>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <vTaskDelete+0x5c>
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	2201      	movs	r2, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <vTaskDelete+0x124>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4013      	ands	r3, r2
 80028f8:	4a32      	ldr	r2, [pc, #200]	; (80029c4 <vTaskDelete+0x124>)
 80028fa:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	3318      	adds	r3, #24
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fe19 	bl	8002540 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <vTaskDelete+0x128>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	4a2c      	ldr	r2, [pc, #176]	; (80029c8 <vTaskDelete+0x128>)
 8002916:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8002918:	4b28      	ldr	r3, [pc, #160]	; (80029bc <vTaskDelete+0x11c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	429a      	cmp	r2, r3
 8002920:	d101      	bne.n	8002926 <vTaskDelete+0x86>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <vTaskDelete+0x88>
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 800292a:	4b28      	ldr	r3, [pc, #160]	; (80029cc <vTaskDelete+0x12c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d010      	beq.n	8002954 <vTaskDelete+0xb4>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00d      	beq.n	8002954 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	3304      	adds	r3, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4824      	ldr	r0, [pc, #144]	; (80029d0 <vTaskDelete+0x130>)
 8002940:	f7ff fda1 	bl	8002486 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <vTaskDelete+0x134>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <vTaskDelete+0x134>)
 800294c:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 800294e:	2301      	movs	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e006      	b.n	8002962 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <vTaskDelete+0x138>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3b01      	subs	r3, #1
 800295a:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <vTaskDelete+0x138>)
 800295c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800295e:	f000 fc1d 	bl	800319c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002962:	f001 f819 	bl	8003998 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d002      	beq.n	8002972 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 800296c:	6938      	ldr	r0, [r7, #16]
 800296e:	f000 fc05 	bl	800317c <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <vTaskDelete+0x12c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01b      	beq.n	80029b2 <vTaskDelete+0x112>
            {
                if( pxTCB == pxCurrentTCB )
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <vTaskDelete+0x11c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d116      	bne.n	80029b2 <vTaskDelete+0x112>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <vTaskDelete+0x13c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <vTaskDelete+0x102>
    __asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	60bb      	str	r3, [r7, #8]
}
 800299e:	bf00      	nop
 80029a0:	e7fe      	b.n	80029a0 <vTaskDelete+0x100>
                    taskYIELD_WITHIN_API();
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <vTaskDelete+0x140>)
 80029a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200000f0 	.word	0x200000f0
 80029c0:	200000f4 	.word	0x200000f4
 80029c4:	200001d0 	.word	0x200001d0
 80029c8:	200001e4 	.word	0x200001e4
 80029cc:	200001d4 	.word	0x200001d4
 80029d0:	2000019c 	.word	0x2000019c
 80029d4:	200001b0 	.word	0x200001b0
 80029d8:	200001c8 	.word	0x200001c8
 80029dc:	200001f0 	.word	0x200001f0
 80029e0:	e000ed04 	.word	0xe000ed04

080029e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d017      	beq.n	8002a26 <vTaskDelay+0x42>
        {
            vTaskSuspendAll();
 80029f6:	f000 f8b1 	bl	8002b5c <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <vTaskDelay+0x60>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d00a      	beq.n	8002a18 <vTaskDelay+0x34>
    __asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	60bb      	str	r3, [r7, #8]
}
 8002a14:	bf00      	nop
 8002a16:	e7fe      	b.n	8002a16 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a18:	2100      	movs	r1, #0
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fd90 	bl	8003540 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a20:	f000 f8aa 	bl	8002b78 <xTaskResumeAll>
 8002a24:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d107      	bne.n	8002a3c <vTaskDelay+0x58>
        {
            taskYIELD_WITHIN_API();
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <vTaskDelay+0x64>)
 8002a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	200001f0 	.word	0x200001f0
 8002a48:	e000ed04 	.word	0xe000ed04

08002a4c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e011      	b.n	8002a84 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002a60:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <prvCreateIdleTasks+0x88>)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	4413      	add	r3, r2
 8002a66:	7819      	ldrb	r1, [r3, #0]
 8002a68:	1d3a      	adds	r2, r7, #4
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	460a      	mov	r2, r1
 8002a70:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002a72:	1d3a      	adds	r2, r7, #4
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b09      	cmp	r3, #9
 8002a88:	ddea      	ble.n	8002a60 <prvCreateIdleTasks+0x14>
 8002a8a:	e000      	b.n	8002a8e <prvCreateIdleTasks+0x42>
        {
            break;
 8002a8c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e015      	b.n	8002ac0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <prvCreateIdleTasks+0x8c>)
 8002a96:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <prvCreateIdleTasks+0x90>)
 8002a9e:	4413      	add	r3, r2
 8002aa0:	1d39      	adds	r1, r7, #4
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2282      	movs	r2, #130	; 0x82
 8002aac:	6938      	ldr	r0, [r7, #16]
 8002aae:	f7ff fdad 	bl	800260c <xTaskCreate>
 8002ab2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d006      	beq.n	8002ac8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	3301      	adds	r3, #1
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	dde6      	ble.n	8002a94 <prvCreateIdleTasks+0x48>
 8002ac6:	e000      	b.n	8002aca <prvCreateIdleTasks+0x7e>
        {
            break;
 8002ac8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002aca:	69fb      	ldr	r3, [r7, #28]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	08004f08 	.word	0x08004f08
 8002ad8:	08003071 	.word	0x08003071
 8002adc:	200001ec 	.word	0x200001ec

08002ae0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002ae6:	f7ff ffb1 	bl	8002a4c <prvCreateIdleTasks>
 8002aea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d116      	bne.n	8002b20 <vTaskStartScheduler+0x40>
    __asm volatile
 8002af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af6:	f383 8811 	msr	BASEPRI, r3
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	60bb      	str	r3, [r7, #8]
}
 8002b04:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <vTaskStartScheduler+0x6c>)
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <vTaskStartScheduler+0x70>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <vTaskStartScheduler+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002b1a:	f000 fe23 	bl	8003764 <xPortStartScheduler>
 8002b1e:	e00e      	b.n	8002b3e <vTaskStartScheduler+0x5e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b26:	d10a      	bne.n	8002b3e <vTaskStartScheduler+0x5e>
    __asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	607b      	str	r3, [r7, #4]
}
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <vTaskStartScheduler+0x5c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <vTaskStartScheduler+0x78>)
 8002b40:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200001e8 	.word	0x200001e8
 8002b50:	200001d4 	.word	0x200001d4
 8002b54:	200001cc 	.word	0x200001cc
 8002b58:	2000000c 	.word	0x2000000c

08002b5c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <vTaskSuspendAll+0x18>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	4a03      	ldr	r2, [pc, #12]	; (8002b74 <vTaskSuspendAll+0x18>)
 8002b68:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	200001f0 	.word	0x200001f0

08002b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002b86:	f000 fed7 	bl	8003938 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002b8e:	4b75      	ldr	r3, [pc, #468]	; (8002d64 <xTaskResumeAll+0x1ec>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <xTaskResumeAll+0x34>
    __asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	603b      	str	r3, [r7, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	e7fe      	b.n	8002baa <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002bac:	4b6d      	ldr	r3, [pc, #436]	; (8002d64 <xTaskResumeAll+0x1ec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	4a6c      	ldr	r2, [pc, #432]	; (8002d64 <xTaskResumeAll+0x1ec>)
 8002bb4:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002bb6:	4b6b      	ldr	r3, [pc, #428]	; (8002d64 <xTaskResumeAll+0x1ec>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 80ca 	bne.w	8002d54 <xTaskResumeAll+0x1dc>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bc0:	4b69      	ldr	r3, [pc, #420]	; (8002d68 <xTaskResumeAll+0x1f0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80c5 	beq.w	8002d54 <xTaskResumeAll+0x1dc>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bca:	e08e      	b.n	8002cea <xTaskResumeAll+0x172>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002bcc:	4b67      	ldr	r3, [pc, #412]	; (8002d6c <xTaskResumeAll+0x1f4>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	6a12      	ldr	r2, [r2, #32]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	69d2      	ldr	r2, [r2, #28]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d103      	bne.n	8002c02 <xTaskResumeAll+0x8a>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	6a1a      	ldr	r2, [r3, #32]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2200      	movs	r2, #0
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	68d2      	ldr	r2, [r2, #12]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	6892      	ldr	r2, [r2, #8]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3304      	adds	r3, #4
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d103      	bne.n	8002c40 <xTaskResumeAll+0xc8>
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2200      	movs	r2, #0
 8002c44:	615a      	str	r2, [r3, #20]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	1e5a      	subs	r2, r3, #1
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	2201      	movs	r2, #1
 8002c56:	409a      	lsls	r2, r3
 8002c58:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <xTaskResumeAll+0x1f8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	4a44      	ldr	r2, [pc, #272]	; (8002d70 <xTaskResumeAll+0x1f8>)
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	4943      	ldr	r1, [pc, #268]	; (8002d74 <xTaskResumeAll+0x1fc>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3304      	adds	r3, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	3204      	adds	r2, #4
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	1d1a      	adds	r2, r3, #4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4a33      	ldr	r2, [pc, #204]	; (8002d74 <xTaskResumeAll+0x1fc>)
 8002ca6:	441a      	add	r2, r3
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	615a      	str	r2, [r3, #20]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4930      	ldr	r1, [pc, #192]	; (8002d74 <xTaskResumeAll+0x1fc>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cc2:	1c59      	adds	r1, r3, #1
 8002cc4:	482b      	ldr	r0, [pc, #172]	; (8002d74 <xTaskResumeAll+0x1fc>)
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4403      	add	r3, r0
 8002cd0:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <xTaskResumeAll+0x200>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d904      	bls.n	8002cea <xTaskResumeAll+0x172>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002ce0:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <xTaskResumeAll+0x204>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <xTaskResumeAll+0x1f4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f47f af6c 	bne.w	8002bcc <xTaskResumeAll+0x54>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <xTaskResumeAll+0x186>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002cfa:	f000 fa4f 	bl	800319c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <xTaskResumeAll+0x208>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d012      	beq.n	8002d30 <xTaskResumeAll+0x1b8>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002d0a:	f000 f83d 	bl	8002d88 <xTaskIncrementTick>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <xTaskResumeAll+0x1a6>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <xTaskResumeAll+0x204>)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ef      	bne.n	8002d0a <xTaskResumeAll+0x192>

                            xPendedTicks = 0;
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <xTaskResumeAll+0x208>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002d30:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <xTaskResumeAll+0x204>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <xTaskResumeAll+0x1dc>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <xTaskResumeAll+0x200>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <xTaskResumeAll+0x20c>)
 8002d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d54:	f000 fe20 	bl	8003998 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8002d58:	69bb      	ldr	r3, [r7, #24]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200001f0 	.word	0x200001f0
 8002d68:	200001c8 	.word	0x200001c8
 8002d6c:	20000188 	.word	0x20000188
 8002d70:	200001d0 	.word	0x200001d0
 8002d74:	200000f4 	.word	0x200000f4
 8002d78:	200000f0 	.word	0x200000f0
 8002d7c:	200001dc 	.word	0x200001dc
 8002d80:	200001d8 	.word	0x200001d8
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002d92:	4b7e      	ldr	r3, [pc, #504]	; (8002f8c <xTaskIncrementTick+0x204>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 80ee 	bne.w	8002f78 <xTaskIncrementTick+0x1f0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d9c:	4b7c      	ldr	r3, [pc, #496]	; (8002f90 <xTaskIncrementTick+0x208>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3301      	adds	r3, #1
 8002da2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002da4:	4a7a      	ldr	r2, [pc, #488]	; (8002f90 <xTaskIncrementTick+0x208>)
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d120      	bne.n	8002df2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002db0:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <xTaskIncrementTick+0x20c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <xTaskIncrementTick+0x48>
    __asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	607b      	str	r3, [r7, #4]
}
 8002dcc:	bf00      	nop
 8002dce:	e7fe      	b.n	8002dce <xTaskIncrementTick+0x46>
 8002dd0:	4b70      	ldr	r3, [pc, #448]	; (8002f94 <xTaskIncrementTick+0x20c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <xTaskIncrementTick+0x210>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6e      	ldr	r2, [pc, #440]	; (8002f94 <xTaskIncrementTick+0x20c>)
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4a6e      	ldr	r2, [pc, #440]	; (8002f98 <xTaskIncrementTick+0x210>)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	4b6d      	ldr	r3, [pc, #436]	; (8002f9c <xTaskIncrementTick+0x214>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	4a6c      	ldr	r2, [pc, #432]	; (8002f9c <xTaskIncrementTick+0x214>)
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	f000 f9d5 	bl	800319c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002df2:	4b6b      	ldr	r3, [pc, #428]	; (8002fa0 <xTaskIncrementTick+0x218>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a3a      	ldr	r2, [r7, #32]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	f0c0 80a8 	bcc.w	8002f4e <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <xTaskIncrementTick+0x20c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002e08:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <xTaskIncrementTick+0x218>)
 8002e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0e:	601a      	str	r2, [r3, #0]
                    break;
 8002e10:	e09d      	b.n	8002f4e <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e12:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <xTaskIncrementTick+0x20c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002e22:	6a3a      	ldr	r2, [r7, #32]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d203      	bcs.n	8002e32 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e2a:	4a5d      	ldr	r2, [pc, #372]	; (8002fa0 <xTaskIncrementTick+0x218>)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	6013      	str	r3, [r2, #0]
                        break;
 8002e30:	e08d      	b.n	8002f4e <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	68d2      	ldr	r2, [r2, #12]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	6892      	ldr	r2, [r2, #8]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	3304      	adds	r3, #4
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d103      	bne.n	8002e60 <xTaskIncrementTick+0xd8>
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01e      	beq.n	8002eb6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	6a12      	ldr	r2, [r2, #32]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	69d2      	ldr	r2, [r2, #28]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	3318      	adds	r3, #24
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d103      	bne.n	8002ea6 <xTaskIncrementTick+0x11e>
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <xTaskIncrementTick+0x21c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	4a37      	ldr	r2, [pc, #220]	; (8002fa4 <xTaskIncrementTick+0x21c>)
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	4936      	ldr	r1, [pc, #216]	; (8002fa8 <xTaskIncrementTick+0x220>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3304      	adds	r3, #4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	3204      	adds	r2, #4
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	1d1a      	adds	r2, r3, #4
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <xTaskIncrementTick+0x220>)
 8002f0c:	441a      	add	r2, r3
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	615a      	str	r2, [r3, #20]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f16:	4924      	ldr	r1, [pc, #144]	; (8002fa8 <xTaskIncrementTick+0x220>)
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f28:	1c59      	adds	r1, r3, #1
 8002f2a:	481f      	ldr	r0, [pc, #124]	; (8002fa8 <xTaskIncrementTick+0x220>)
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4403      	add	r3, r0
 8002f36:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <xTaskIncrementTick+0x224>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	429a      	cmp	r2, r3
 8002f44:	f67f af5b 	bls.w	8002dfe <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f4c:	e757      	b.n	8002dfe <xTaskIncrementTick+0x76>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <xTaskIncrementTick+0x224>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f54:	4914      	ldr	r1, [pc, #80]	; (8002fa8 <xTaskIncrementTick+0x220>)
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d901      	bls.n	8002f6a <xTaskIncrementTick+0x1e2>
                {
                    xSwitchRequired = pdTRUE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <xTaskIncrementTick+0x228>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <xTaskIncrementTick+0x1fa>
                {
                    xSwitchRequired = pdTRUE;
 8002f72:	2301      	movs	r3, #1
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	e004      	b.n	8002f82 <xTaskIncrementTick+0x1fa>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <xTaskIncrementTick+0x22c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <xTaskIncrementTick+0x22c>)
 8002f80:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3728      	adds	r7, #40	; 0x28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200001f0 	.word	0x200001f0
 8002f90:	200001cc 	.word	0x200001cc
 8002f94:	20000180 	.word	0x20000180
 8002f98:	20000184 	.word	0x20000184
 8002f9c:	200001e0 	.word	0x200001e0
 8002fa0:	200001e8 	.word	0x200001e8
 8002fa4:	200001d0 	.word	0x200001d0
 8002fa8:	200000f4 	.word	0x200000f4
 8002fac:	200000f0 	.word	0x200000f0
 8002fb0:	200001dc 	.word	0x200001dc
 8002fb4:	200001d8 	.word	0x200001d8

08002fb8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002fbe:	4b27      	ldr	r3, [pc, #156]	; (800305c <vTaskSwitchContext+0xa4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <vTaskSwitchContext+0xa8>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002fcc:	e040      	b.n	8003050 <vTaskSwitchContext+0x98>
            xYieldPendings[ 0 ] = pdFALSE;
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <vTaskSwitchContext+0xa8>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002fd4:	4b23      	ldr	r3, [pc, #140]	; (8003064 <vTaskSwitchContext+0xac>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	fab3 f383 	clz	r3, r3
 8002fe0:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	f1c3 031f 	rsb	r3, r3, #31
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	491f      	ldr	r1, [pc, #124]	; (8003068 <vTaskSwitchContext+0xb0>)
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10a      	bne.n	8003014 <vTaskSwitchContext+0x5c>
    __asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	607b      	str	r3, [r7, #4]
}
 8003010:	bf00      	nop
 8003012:	e7fe      	b.n	8003012 <vTaskSwitchContext+0x5a>
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4a12      	ldr	r2, [pc, #72]	; (8003068 <vTaskSwitchContext+0xb0>)
 8003020:	4413      	add	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	3308      	adds	r3, #8
 8003036:	429a      	cmp	r2, r3
 8003038:	d103      	bne.n	8003042 <vTaskSwitchContext+0x8a>
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a08      	ldr	r2, [pc, #32]	; (800306c <vTaskSwitchContext+0xb4>)
 800304a:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800304c:	4b07      	ldr	r3, [pc, #28]	; (800306c <vTaskSwitchContext+0xb4>)
 800304e:	681b      	ldr	r3, [r3, #0]
    }
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	200001f0 	.word	0x200001f0
 8003060:	200001dc 	.word	0x200001dc
 8003064:	200001d0 	.word	0x200001d0
 8003068:	200000f4 	.word	0x200000f4
 800306c:	200000f0 	.word	0x200000f0

08003070 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003078:	f000 f852 	bl	8003120 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <prvIdleTask+0x28>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d9f9      	bls.n	8003078 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <prvIdleTask+0x2c>)
 8003086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003094:	e7f0      	b.n	8003078 <prvIdleTask+0x8>
 8003096:	bf00      	nop
 8003098:	200000f4 	.word	0x200000f4
 800309c:	e000ed04 	.word	0xe000ed04

080030a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	e00c      	b.n	80030c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4a12      	ldr	r2, [pc, #72]	; (8003100 <prvInitialiseTaskLists+0x60>)
 80030b8:	4413      	add	r3, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f9b6 	bl	800242c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3301      	adds	r3, #1
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d9ef      	bls.n	80030ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80030cc:	480d      	ldr	r0, [pc, #52]	; (8003104 <prvInitialiseTaskLists+0x64>)
 80030ce:	f7ff f9ad 	bl	800242c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80030d2:	480d      	ldr	r0, [pc, #52]	; (8003108 <prvInitialiseTaskLists+0x68>)
 80030d4:	f7ff f9aa 	bl	800242c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80030d8:	480c      	ldr	r0, [pc, #48]	; (800310c <prvInitialiseTaskLists+0x6c>)
 80030da:	f7ff f9a7 	bl	800242c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80030de:	480c      	ldr	r0, [pc, #48]	; (8003110 <prvInitialiseTaskLists+0x70>)
 80030e0:	f7ff f9a4 	bl	800242c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80030e4:	480b      	ldr	r0, [pc, #44]	; (8003114 <prvInitialiseTaskLists+0x74>)
 80030e6:	f7ff f9a1 	bl	800242c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <prvInitialiseTaskLists+0x78>)
 80030ec:	4a05      	ldr	r2, [pc, #20]	; (8003104 <prvInitialiseTaskLists+0x64>)
 80030ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <prvInitialiseTaskLists+0x7c>)
 80030f2:	4a05      	ldr	r2, [pc, #20]	; (8003108 <prvInitialiseTaskLists+0x68>)
 80030f4:	601a      	str	r2, [r3, #0]
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200000f4 	.word	0x200000f4
 8003104:	20000158 	.word	0x20000158
 8003108:	2000016c 	.word	0x2000016c
 800310c:	20000188 	.word	0x20000188
 8003110:	2000019c 	.word	0x2000019c
 8003114:	200001b4 	.word	0x200001b4
 8003118:	20000180 	.word	0x20000180
 800311c:	20000184 	.word	0x20000184

08003120 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003126:	e019      	b.n	800315c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003128:	f000 fc06 	bl	8003938 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800312c:	4b10      	ldr	r3, [pc, #64]	; (8003170 <prvCheckTasksWaitingTermination+0x50>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3304      	adds	r3, #4
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fa01 	bl	8002540 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <prvCheckTasksWaitingTermination+0x54>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3b01      	subs	r3, #1
 8003144:	4a0b      	ldr	r2, [pc, #44]	; (8003174 <prvCheckTasksWaitingTermination+0x54>)
 8003146:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <prvCheckTasksWaitingTermination+0x58>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <prvCheckTasksWaitingTermination+0x58>)
 8003150:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003152:	f000 fc21 	bl	8003998 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f810 	bl	800317c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <prvCheckTasksWaitingTermination+0x58>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e1      	bne.n	8003128 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	2000019c 	.word	0x2000019c
 8003174:	200001c8 	.word	0x200001c8
 8003178:	200001b0 	.word	0x200001b0

0800317c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fde3 	bl	8003d54 <vPortFree>
            vPortFree( pxTCB );
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fde0 	bl	8003d54 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <prvResetNextTaskUnblockTime+0x30>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <prvResetNextTaskUnblockTime+0x34>)
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031b2:	e005      	b.n	80031c0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <prvResetNextTaskUnblockTime+0x30>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <prvResetNextTaskUnblockTime+0x34>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000180 	.word	0x20000180
 80031d0:	200001e8 	.word	0x200001e8

080031d4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <xTaskGenericNotifyWait+0x2e>
    __asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	613b      	str	r3, [r7, #16]
}
 80031fe:	bf00      	nop
 8003200:	e7fe      	b.n	8003200 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8003202:	f7ff fcab 	bl	8002b5c <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8003206:	f000 fb97 	bl	8003938 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800320a:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <xTaskGenericNotifyWait+0x11c>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4413      	add	r3, r2
 8003212:	3354      	adds	r3, #84	; 0x54
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d018      	beq.n	800324e <xTaskGenericNotifyWait+0x7a>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 800321c:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <xTaskGenericNotifyWait+0x11c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	3214      	adds	r2, #20
 8003224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	43d2      	mvns	r2, r2
 800322c:	4011      	ands	r1, r2
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	3214      	adds	r2, #20
 8003232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8003236:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <xTaskGenericNotifyWait+0x11c>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	3354      	adds	r3, #84	; 0x54
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <xTaskGenericNotifyWait+0x7a>
                    {
                        xShouldBlock = pdTRUE;
 800324a:	2301      	movs	r3, #1
 800324c:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800324e:	f000 fba3 	bl	8003998 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d103      	bne.n	8003260 <xTaskGenericNotifyWait+0x8c>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003258:	2101      	movs	r1, #1
 800325a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800325c:	f000 f970 	bl	8003540 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003260:	f7ff fc8a 	bl	8002b78 <xTaskResumeAll>
 8003264:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d10a      	bne.n	8003282 <xTaskGenericNotifyWait+0xae>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <xTaskGenericNotifyWait+0xae>
        {
            taskYIELD_WITHIN_API();
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <xTaskGenericNotifyWait+0x120>)
 8003274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8003282:	f000 fb59 	bl	8003938 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <xTaskGenericNotifyWait+0xc8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <xTaskGenericNotifyWait+0x11c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	3214      	adds	r2, #20
 8003294:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <xTaskGenericNotifyWait+0x11c>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	3354      	adds	r3, #84	; 0x54
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d002      	beq.n	80032b4 <xTaskGenericNotifyWait+0xe0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e00e      	b.n	80032d2 <xTaskGenericNotifyWait+0xfe>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <xTaskGenericNotifyWait+0x11c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	3214      	adds	r2, #20
 80032bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	43d2      	mvns	r2, r2
 80032c4:	4011      	ands	r1, r2
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	3214      	adds	r2, #20
 80032ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80032d2:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <xTaskGenericNotifyWait+0x11c>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4413      	add	r3, r2
 80032da:	3354      	adds	r3, #84	; 0x54
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80032e0:	f000 fb5a 	bl	8003998 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 80032e4:	69fb      	ldr	r3, [r7, #28]
    }
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200000f0 	.word	0x200000f0
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003306:	2301      	movs	r3, #1
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <xTaskGenericNotify+0x2e>
    __asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	623b      	str	r3, [r7, #32]
}
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <xTaskGenericNotify+0x4a>
    __asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	61fb      	str	r3, [r7, #28]
}
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003346:	f000 faf7 	bl	8003938 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800334a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	3214      	adds	r2, #20
 8003356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800335a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800335e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4413      	add	r3, r2
 8003364:	3354      	adds	r3, #84	; 0x54
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800336c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4413      	add	r3, r2
 8003372:	3354      	adds	r3, #84	; 0x54
 8003374:	2202      	movs	r2, #2
 8003376:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	2b04      	cmp	r3, #4
 800337c:	d83b      	bhi.n	80033f6 <xTaskGenericNotify+0xfe>
 800337e:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <xTaskGenericNotify+0x8c>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	08003415 	.word	0x08003415
 8003388:	08003399 	.word	0x08003399
 800338c:	080033b5 	.word	0x080033b5
 8003390:	080033cd 	.word	0x080033cd
 8003394:	080033db 	.word	0x080033db
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	3214      	adds	r2, #20
 800339e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	ea42 0103 	orr.w	r1, r2, r3
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	3214      	adds	r2, #20
 80033ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033b2:	e032      	b.n	800341a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	3214      	adds	r2, #20
 80033ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033be:	1c59      	adds	r1, r3, #1
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	3214      	adds	r2, #20
 80033c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033ca:	e026      	b.n	800341a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	3214      	adds	r2, #20
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033d8:	e01f      	b.n	800341a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80033da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d006      	beq.n	80033f0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	3214      	adds	r2, #20
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80033ee:	e014      	b.n	800341a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80033f4:	e011      	b.n	800341a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80033f6:	4b4d      	ldr	r3, [pc, #308]	; (800352c <xTaskGenericNotify+0x234>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00c      	beq.n	8003418 <xTaskGenericNotify+0x120>
    __asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	61bb      	str	r3, [r7, #24]
}
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <xTaskGenericNotify+0x11a>
                    break;
 8003414:	bf00      	nop
 8003416:	e000      	b.n	800341a <xTaskGenericNotify+0x122>

                    break;
 8003418:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800341a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800341e:	2b01      	cmp	r3, #1
 8003420:	d17d      	bne.n	800351e <xTaskGenericNotify+0x226>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342e:	68d2      	ldr	r2, [r2, #12]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003438:	6892      	ldr	r2, [r2, #8]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	3304      	adds	r3, #4
 8003444:	429a      	cmp	r2, r3
 8003446:	d103      	bne.n	8003450 <xTaskGenericNotify+0x158>
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	2200      	movs	r2, #0
 8003454:	615a      	str	r2, [r3, #20]
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	1e5a      	subs	r2, r3, #1
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	2201      	movs	r2, #1
 8003466:	409a      	lsls	r2, r3
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <xTaskGenericNotify+0x238>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	4a30      	ldr	r2, [pc, #192]	; (8003530 <xTaskGenericNotify+0x238>)
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003476:	492f      	ldr	r1, [pc, #188]	; (8003534 <xTaskGenericNotify+0x23c>)
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3304      	adds	r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349c:	3204      	adds	r2, #4
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	1d1a      	adds	r2, r3, #4
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <xTaskGenericNotify+0x23c>)
 80034b6:	441a      	add	r2, r3
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	615a      	str	r2, [r3, #20]
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	491c      	ldr	r1, [pc, #112]	; (8003534 <xTaskGenericNotify+0x23c>)
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034d2:	1c59      	adds	r1, r3, #1
 80034d4:	4817      	ldr	r0, [pc, #92]	; (8003534 <xTaskGenericNotify+0x23c>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4403      	add	r3, r0
 80034e0:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <xTaskGenericNotify+0x208>
    __asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	617b      	str	r3, [r7, #20]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <xTaskGenericNotify+0x206>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <xTaskGenericNotify+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	429a      	cmp	r2, r3
 800350c:	d207      	bcs.n	800351e <xTaskGenericNotify+0x226>
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <xTaskGenericNotify+0x244>)
 8003510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800351e:	f000 fa3b 	bl	8003998 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003524:	4618      	mov	r0, r3
 8003526:	3738      	adds	r7, #56	; 0x38
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200001cc 	.word	0x200001cc
 8003530:	200001d0 	.word	0x200001d0
 8003534:	200000f4 	.word	0x200000f4
 8003538:	200000f0 	.word	0x200000f0
 800353c:	e000ed04 	.word	0xe000ed04

08003540 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800354a:	4b37      	ldr	r3, [pc, #220]	; (8003628 <prvAddCurrentTaskToDelayedList+0xe8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003550:	4b36      	ldr	r3, [pc, #216]	; (800362c <prvAddCurrentTaskToDelayedList+0xec>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003556:	4b36      	ldr	r3, [pc, #216]	; (8003630 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <prvAddCurrentTaskToDelayedList+0xf4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3304      	adds	r3, #4
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe ffec 	bl	8002540 <uxListRemove>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800356e:	4b31      	ldr	r3, [pc, #196]	; (8003634 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	2201      	movs	r2, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <prvAddCurrentTaskToDelayedList+0xf8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4013      	ands	r3, r2
 8003582:	4a2d      	ldr	r2, [pc, #180]	; (8003638 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003584:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358c:	d124      	bne.n	80035d8 <prvAddCurrentTaskToDelayedList+0x98>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d021      	beq.n	80035d8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <prvAddCurrentTaskToDelayedList+0xf4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	6892      	ldr	r2, [r2, #8]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	4b21      	ldr	r3, [pc, #132]	; (8003634 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	3204      	adds	r2, #4
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	1d1a      	adds	r2, r3, #4
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1d      	ldr	r2, [pc, #116]	; (800363c <prvAddCurrentTaskToDelayedList+0xfc>)
 80035c8:	615a      	str	r2, [r3, #20]
 80035ca:	4b1c      	ldr	r3, [pc, #112]	; (800363c <prvAddCurrentTaskToDelayedList+0xfc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3301      	adds	r3, #1
 80035d0:	4a1a      	ldr	r2, [pc, #104]	; (800363c <prvAddCurrentTaskToDelayedList+0xfc>)
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80035d6:	e022      	b.n	800361e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d207      	bcs.n	8003600 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80035f0:	4b10      	ldr	r3, [pc, #64]	; (8003634 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	6978      	ldr	r0, [r7, #20]
 80035fa:	f7fe ff68 	bl	80024ce <vListInsert>
}
 80035fe:	e00e      	b.n	800361e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3304      	adds	r3, #4
 8003606:	4619      	mov	r1, r3
 8003608:	69b8      	ldr	r0, [r7, #24]
 800360a:	f7fe ff60 	bl	80024ce <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <prvAddCurrentTaskToDelayedList+0x100>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	429a      	cmp	r2, r3
 8003616:	d202      	bcs.n	800361e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8003618:	4a09      	ldr	r2, [pc, #36]	; (8003640 <prvAddCurrentTaskToDelayedList+0x100>)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6013      	str	r3, [r2, #0]
}
 800361e:	bf00      	nop
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	200001cc 	.word	0x200001cc
 800362c:	20000180 	.word	0x20000180
 8003630:	20000184 	.word	0x20000184
 8003634:	200000f0 	.word	0x200000f0
 8003638:	200001d0 	.word	0x200001d0
 800363c:	200001b4 	.word	0x200001b4
 8003640:	200001e8 	.word	0x200001e8

08003644 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3b04      	subs	r3, #4
 8003654:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800365c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3b04      	subs	r3, #4
 8003662:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f023 0201 	bic.w	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3b04      	subs	r3, #4
 8003672:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003674:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <pxPortInitialiseStack+0x64>)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3b14      	subs	r3, #20
 800367e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3b04      	subs	r3, #4
 800368a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f06f 0202 	mvn.w	r2, #2
 8003692:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3b20      	subs	r3, #32
 8003698:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	080036ad 	.word	0x080036ad

080036ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80036b6:	4b12      	ldr	r3, [pc, #72]	; (8003700 <prvTaskExitError+0x54>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d00a      	beq.n	80036d6 <prvTaskExitError+0x2a>
    __asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	60fb      	str	r3, [r7, #12]
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <prvTaskExitError+0x28>
    __asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60bb      	str	r3, [r7, #8]
}
 80036e8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80036ea:	bf00      	nop
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0fc      	beq.n	80036ec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80036f2:	bf00      	nop
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	20000010 	.word	0x20000010
	...

08003710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <pxCurrentTCBConst2>)
 8003712:	6819      	ldr	r1, [r3, #0]
 8003714:	6808      	ldr	r0, [r1, #0]
 8003716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371a:	f380 8809 	msr	PSP, r0
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f04f 0000 	mov.w	r0, #0
 8003726:	f380 8811 	msr	BASEPRI, r0
 800372a:	4770      	bx	lr
 800372c:	f3af 8000 	nop.w

08003730 <pxCurrentTCBConst2>:
 8003730:	200000f0 	.word	0x200000f0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop

08003738 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003738:	4808      	ldr	r0, [pc, #32]	; (800375c <prvPortStartFirstTask+0x24>)
 800373a:	6800      	ldr	r0, [r0, #0]
 800373c:	6800      	ldr	r0, [r0, #0]
 800373e:	f380 8808 	msr	MSP, r0
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f380 8814 	msr	CONTROL, r0
 800374a:	b662      	cpsie	i
 800374c:	b661      	cpsie	f
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	df00      	svc	0
 8003758:	bf00      	nop
 800375a:	0000      	.short	0x0000
 800375c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop

08003764 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	; 0x30
 8003768:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800376a:	4b66      	ldr	r3, [pc, #408]	; (8003904 <xPortStartScheduler+0x1a0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a66      	ldr	r2, [pc, #408]	; (8003908 <xPortStartScheduler+0x1a4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d10a      	bne.n	800378a <xPortStartScheduler+0x26>
    __asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003786:	bf00      	nop
 8003788:	e7fe      	b.n	8003788 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800378a:	4b5e      	ldr	r3, [pc, #376]	; (8003904 <xPortStartScheduler+0x1a0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a5f      	ldr	r2, [pc, #380]	; (800390c <xPortStartScheduler+0x1a8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10a      	bne.n	80037aa <xPortStartScheduler+0x46>
    __asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	623b      	str	r3, [r7, #32]
}
 80037a6:	bf00      	nop
 80037a8:	e7fe      	b.n	80037a8 <xPortStartScheduler+0x44>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80037aa:	4b59      	ldr	r3, [pc, #356]	; (8003910 <xPortStartScheduler+0x1ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	332c      	adds	r3, #44	; 0x2c
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a57      	ldr	r2, [pc, #348]	; (8003914 <xPortStartScheduler+0x1b0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00a      	beq.n	80037d2 <xPortStartScheduler+0x6e>
    __asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	61fb      	str	r3, [r7, #28]
}
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <xPortStartScheduler+0x6c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	3338      	adds	r3, #56	; 0x38
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a4f      	ldr	r2, [pc, #316]	; (8003918 <xPortStartScheduler+0x1b4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00a      	beq.n	80037f4 <xPortStartScheduler+0x90>
    __asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	61bb      	str	r3, [r7, #24]
}
 80037f0:	bf00      	nop
 80037f2:	e7fe      	b.n	80037f2 <xPortStartScheduler+0x8e>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80037f8:	4b48      	ldr	r3, [pc, #288]	; (800391c <xPortStartScheduler+0x1b8>)
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	22ff      	movs	r2, #255	; 0xff
 8003808:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800381a:	b2da      	uxtb	r2, r3
 800381c:	4b40      	ldr	r3, [pc, #256]	; (8003920 <xPortStartScheduler+0x1bc>)
 800381e:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003820:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <xPortStartScheduler+0x1bc>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xPortStartScheduler+0xda>
    __asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	617b      	str	r3, [r7, #20]
}
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xPortStartScheduler+0xd8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003848:	2b00      	cmp	r3, #0
 800384a:	d012      	beq.n	8003872 <xPortStartScheduler+0x10e>
    __asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	613b      	str	r3, [r7, #16]
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xPortStartScheduler+0xfc>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3301      	adds	r3, #1
 8003866:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d0f1      	beq.n	8003862 <xPortStartScheduler+0xfe>
        }

        if( ulImplementedPrioBits == 8 )
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d103      	bne.n	800388c <xPortStartScheduler+0x128>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003884:	4b27      	ldr	r3, [pc, #156]	; (8003924 <xPortStartScheduler+0x1c0>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e004      	b.n	8003896 <xPortStartScheduler+0x132>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	4a24      	ldr	r2, [pc, #144]	; (8003924 <xPortStartScheduler+0x1c0>)
 8003894:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <xPortStartScheduler+0x1c0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	4a21      	ldr	r2, [pc, #132]	; (8003924 <xPortStartScheduler+0x1c0>)
 800389e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038a0:	4b20      	ldr	r3, [pc, #128]	; (8003924 <xPortStartScheduler+0x1c0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038a8:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <xPortStartScheduler+0x1c0>)
 80038aa:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80038b4:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <xPortStartScheduler+0x1c4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <xPortStartScheduler+0x1c4>)
 80038ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038be:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <xPortStartScheduler+0x1c4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a18      	ldr	r2, [pc, #96]	; (8003928 <xPortStartScheduler+0x1c4>)
 80038c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <xPortStartScheduler+0x1c8>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80038d2:	f000 f8e3 	bl	8003a9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <xPortStartScheduler+0x1cc>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80038dc:	f000 f902 	bl	8003ae4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <xPortStartScheduler+0x1d0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <xPortStartScheduler+0x1d0>)
 80038e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80038ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80038ec:	f7ff ff24 	bl	8003738 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80038f0:	f7ff fb62 	bl	8002fb8 <vTaskSwitchContext>
    prvTaskExitError();
 80038f4:	f7ff feda 	bl	80036ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3730      	adds	r7, #48	; 0x30
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	e000ed00 	.word	0xe000ed00
 8003908:	410fc271 	.word	0x410fc271
 800390c:	410fc270 	.word	0x410fc270
 8003910:	e000ed08 	.word	0xe000ed08
 8003914:	08003711 	.word	0x08003711
 8003918:	080039f1 	.word	0x080039f1
 800391c:	e000e400 	.word	0xe000e400
 8003920:	200001f4 	.word	0x200001f4
 8003924:	200001f8 	.word	0x200001f8
 8003928:	e000ed20 	.word	0xe000ed20
 800392c:	e000ed1c 	.word	0xe000ed1c
 8003930:	20000010 	.word	0x20000010
 8003934:	e000ef34 	.word	0xe000ef34

08003938 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
    __asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	607b      	str	r3, [r7, #4]
}
 8003950:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003952:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <vPortEnterCritical+0x58>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a0d      	ldr	r2, [pc, #52]	; (8003990 <vPortEnterCritical+0x58>)
 800395a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <vPortEnterCritical+0x58>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d10f      	bne.n	8003984 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <vPortEnterCritical+0x5c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <vPortEnterCritical+0x4c>
    __asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	603b      	str	r3, [r7, #0]
}
 8003980:	bf00      	nop
 8003982:	e7fe      	b.n	8003982 <vPortEnterCritical+0x4a>
    }
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	20000010 	.word	0x20000010
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <vPortExitCritical+0x50>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <vPortExitCritical+0x24>
    __asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	607b      	str	r3, [r7, #4]
}
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <vPortExitCritical+0x50>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <vPortExitCritical+0x50>)
 80039c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <vPortExitCritical+0x50>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <vPortExitCritical+0x42>
 80039ce:	2300      	movs	r3, #0
 80039d0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80039d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000010 	.word	0x20000010
 80039ec:	00000000 	.word	0x00000000

080039f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80039f0:	f3ef 8009 	mrs	r0, PSP
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <pxCurrentTCBConst>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	f01e 0f10 	tst.w	lr, #16
 8003a00:	bf08      	it	eq
 8003a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0a:	6010      	str	r0, [r2, #0]
 8003a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a14:	f380 8811 	msr	BASEPRI, r0
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f7ff faca 	bl	8002fb8 <vTaskSwitchContext>
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f380 8811 	msr	BASEPRI, r0
 8003a2c:	bc09      	pop	{r0, r3}
 8003a2e:	6819      	ldr	r1, [r3, #0]
 8003a30:	6808      	ldr	r0, [r1, #0]
 8003a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a36:	f01e 0f10 	tst.w	lr, #16
 8003a3a:	bf08      	it	eq
 8003a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a40:	f380 8809 	msr	PSP, r0
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	f3af 8000 	nop.w

08003a50 <pxCurrentTCBConst>:
 8003a50:	200000f0 	.word	0x200000f0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop

08003a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
    __asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	607b      	str	r3, [r7, #4]
}
 8003a70:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003a72:	f7ff f989 	bl	8002d88 <xTaskIncrementTick>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <SysTick_Handler+0x40>)
 8003a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f383 8811 	msr	BASEPRI, r3
}
 8003a8e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <vPortSetupTimerInterrupt+0x34>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <vPortSetupTimerInterrupt+0x38>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <vPortSetupTimerInterrupt+0x3c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <vPortSetupTimerInterrupt+0x40>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <vPortSetupTimerInterrupt+0x44>)
 8003aba:	3b01      	subs	r3, #1
 8003abc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003abe:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <vPortSetupTimerInterrupt+0x34>)
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	601a      	str	r2, [r3, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000e010 	.word	0xe000e010
 8003ad4:	e000e018 	.word	0xe000e018
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	10624dd3 	.word	0x10624dd3
 8003ae0:	e000e014 	.word	0xe000e014

08003ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003af4 <vPortEnableVFP+0x10>
 8003ae8:	6801      	ldr	r1, [r0, #0]
 8003aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003aee:	6001      	str	r1, [r0, #0]
 8003af0:	4770      	bx	lr
 8003af2:	0000      	.short	0x0000
 8003af4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop

08003afc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	; 0x38
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d022      	beq.n	8003b54 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003b0e:	2308      	movs	r3, #8
 8003b10:	43db      	mvns	r3, r3
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d81b      	bhi.n	8003b50 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003b18:	2208      	movs	r2, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d014      	beq.n	8003b54 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	f1c3 0308 	rsb	r3, r3, #8
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d804      	bhi.n	8003b4a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	4413      	add	r3, r2
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	e004      	b.n	8003b54 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	e001      	b.n	8003b54 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003b54:	f7ff f802 	bl	8002b5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003b58:	4b77      	ldr	r3, [pc, #476]	; (8003d38 <pvPortMalloc+0x23c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003b60:	f000 f970 	bl	8003e44 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f2c0 80ce 	blt.w	8003d08 <pvPortMalloc+0x20c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80ca 	beq.w	8003d08 <pvPortMalloc+0x20c>
 8003b74:	4b71      	ldr	r3, [pc, #452]	; (8003d3c <pvPortMalloc+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	f200 80c4 	bhi.w	8003d08 <pvPortMalloc+0x20c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003b80:	4b6f      	ldr	r3, [pc, #444]	; (8003d40 <pvPortMalloc+0x244>)
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003b84:	4b6e      	ldr	r3, [pc, #440]	; (8003d40 <pvPortMalloc+0x244>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8c:	4a6d      	ldr	r2, [pc, #436]	; (8003d44 <pvPortMalloc+0x248>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d305      	bcc.n	8003b9e <pvPortMalloc+0xa2>
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	4a6c      	ldr	r2, [pc, #432]	; (8003d48 <pvPortMalloc+0x24c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d801      	bhi.n	8003b9e <pvPortMalloc+0xa2>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <pvPortMalloc+0xa4>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d127      	bne.n	8003bf4 <pvPortMalloc+0xf8>
    __asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	623b      	str	r3, [r7, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	4a5f      	ldr	r2, [pc, #380]	; (8003d44 <pvPortMalloc+0x248>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d305      	bcc.n	8003bd8 <pvPortMalloc+0xdc>
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	4a5e      	ldr	r2, [pc, #376]	; (8003d48 <pvPortMalloc+0x24c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d801      	bhi.n	8003bd8 <pvPortMalloc+0xdc>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <pvPortMalloc+0xde>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <pvPortMalloc+0xf8>
    __asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	61fb      	str	r3, [r7, #28]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <pvPortMalloc+0xf6>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d903      	bls.n	8003c06 <pvPortMalloc+0x10a>
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1d9      	bne.n	8003bba <pvPortMalloc+0xbe>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003c06:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <pvPortMalloc+0x23c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d07b      	beq.n	8003d08 <pvPortMalloc+0x20c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2208      	movs	r2, #8
 8003c16:	4413      	add	r3, r2
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	4a49      	ldr	r2, [pc, #292]	; (8003d44 <pvPortMalloc+0x248>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d305      	bcc.n	8003c2e <pvPortMalloc+0x132>
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	4a48      	ldr	r2, [pc, #288]	; (8003d48 <pvPortMalloc+0x24c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d801      	bhi.n	8003c2e <pvPortMalloc+0x132>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <pvPortMalloc+0x134>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <pvPortMalloc+0x14e>
    __asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	61bb      	str	r3, [r7, #24]
}
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <pvPortMalloc+0x14c>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d90a      	bls.n	8003c72 <pvPortMalloc+0x176>
    __asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	617b      	str	r3, [r7, #20]
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <pvPortMalloc+0x174>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	1ad2      	subs	r2, r2, r3
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d923      	bls.n	8003cca <pvPortMalloc+0x1ce>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4413      	add	r3, r2
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <pvPortMalloc+0x1ae>
    __asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	613b      	str	r3, [r7, #16]
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <pvPortMalloc+0x1ac>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	1ad2      	subs	r2, r2, r3
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cca:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <pvPortMalloc+0x240>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	4a19      	ldr	r2, [pc, #100]	; (8003d3c <pvPortMalloc+0x240>)
 8003cd6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cd8:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <pvPortMalloc+0x240>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <pvPortMalloc+0x250>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d203      	bcs.n	8003cec <pvPortMalloc+0x1f0>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ce4:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <pvPortMalloc+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <pvPortMalloc+0x250>)
 8003cea:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <pvPortMalloc+0x254>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3301      	adds	r3, #1
 8003d04:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <pvPortMalloc+0x254>)
 8003d06:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003d08:	f7fe ff36 	bl	8002b78 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <pvPortMalloc+0x230>
    __asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	60fb      	str	r3, [r7, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <pvPortMalloc+0x22e>
    return pvReturn;
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3738      	adds	r7, #56	; 0x38
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20012e04 	.word	0x20012e04
 8003d3c:	20012e08 	.word	0x20012e08
 8003d40:	20012dfc 	.word	0x20012dfc
 8003d44:	200001fc 	.word	0x200001fc
 8003d48:	20012dfb 	.word	0x20012dfb
 8003d4c:	20012e0c 	.word	0x20012e0c
 8003d50:	20012e10 	.word	0x20012e10

08003d54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d061      	beq.n	8003e2a <vPortFree+0xd6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003d66:	2308      	movs	r3, #8
 8003d68:	425b      	negs	r3, r3
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4a2f      	ldr	r2, [pc, #188]	; (8003e34 <vPortFree+0xe0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d305      	bcc.n	8003d88 <vPortFree+0x34>
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	4a2e      	ldr	r2, [pc, #184]	; (8003e38 <vPortFree+0xe4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d801      	bhi.n	8003d88 <vPortFree+0x34>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <vPortFree+0x36>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <vPortFree+0x50>
    __asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	617b      	str	r3, [r7, #20]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	db0a      	blt.n	8003dc2 <vPortFree+0x6e>
    __asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	613b      	str	r3, [r7, #16]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <vPortFree+0x6c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <vPortFree+0x8c>
    __asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60fb      	str	r3, [r7, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <vPortFree+0x8a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	0fdb      	lsrs	r3, r3, #31
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01c      	beq.n	8003e2a <vPortFree+0xd6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d118      	bne.n	8003e2a <vPortFree+0xd6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003e04:	f7fe feaa 	bl	8002b5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <vPortFree+0xe8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <vPortFree+0xe8>)
 8003e14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e16:	69b8      	ldr	r0, [r7, #24]
 8003e18:	f000 f86e 	bl	8003ef8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <vPortFree+0xec>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	4a07      	ldr	r2, [pc, #28]	; (8003e40 <vPortFree+0xec>)
 8003e24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003e26:	f7fe fea7 	bl	8002b78 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003e2a:	bf00      	nop
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200001fc 	.word	0x200001fc
 8003e38:	20012dfb 	.word	0x20012dfb
 8003e3c:	20012e08 	.word	0x20012e08
 8003e40:	20012e14 	.word	0x20012e14

08003e44 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e4a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003e4e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003e50:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <prvHeapInit+0xa0>)
 8003e52:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00c      	beq.n	8003e78 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3307      	adds	r3, #7
 8003e62:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0307 	bic.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <prvHeapInit+0xa0>)
 8003e74:	4413      	add	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <prvHeapInit+0xa4>)
 8003e7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <prvHeapInit+0xa4>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4413      	add	r3, r2
 8003e8a:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f023 0307 	bic.w	r3, r3, #7
 8003e9a:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a13      	ldr	r2, [pc, #76]	; (8003eec <prvHeapInit+0xa8>)
 8003ea0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ea2:	4b12      	ldr	r3, [pc, #72]	; (8003eec <prvHeapInit+0xa8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003eaa:	4b10      	ldr	r3, [pc, #64]	; (8003eec <prvHeapInit+0xa8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	1ad2      	subs	r2, r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <prvHeapInit+0xa8>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <prvHeapInit+0xac>)
 8003ece:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a07      	ldr	r2, [pc, #28]	; (8003ef4 <prvHeapInit+0xb0>)
 8003ed6:	6013      	str	r3, [r2, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	200001fc 	.word	0x200001fc
 8003ee8:	20012dfc 	.word	0x20012dfc
 8003eec:	20012e04 	.word	0x20012e04
 8003ef0:	20012e0c 	.word	0x20012e0c
 8003ef4:	20012e08 	.word	0x20012e08

08003ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003f00:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <prvInsertBlockIntoFreeList+0xe4>)
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	e002      	b.n	8003f0c <prvInsertBlockIntoFreeList+0x14>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d8f7      	bhi.n	8003f06 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	4a30      	ldr	r2, [pc, #192]	; (8003fdc <prvInsertBlockIntoFreeList+0xe4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d017      	beq.n	8003f4e <prvInsertBlockIntoFreeList+0x56>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	4a2f      	ldr	r2, [pc, #188]	; (8003fe0 <prvInsertBlockIntoFreeList+0xe8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d305      	bcc.n	8003f32 <prvInsertBlockIntoFreeList+0x3a>
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	4a2e      	ldr	r2, [pc, #184]	; (8003fe4 <prvInsertBlockIntoFreeList+0xec>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d801      	bhi.n	8003f32 <prvInsertBlockIntoFreeList+0x3a>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <prvInsertBlockIntoFreeList+0x3c>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <prvInsertBlockIntoFreeList+0x56>
    __asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	60fb      	str	r3, [r7, #12]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4413      	add	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d108      	bne.n	8003f72 <prvInsertBlockIntoFreeList+0x7a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	441a      	add	r2, r3
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	441a      	add	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d118      	bne.n	8003fb8 <prvInsertBlockIntoFreeList+0xc0>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b17      	ldr	r3, [pc, #92]	; (8003fe8 <prvInsertBlockIntoFreeList+0xf0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d00d      	beq.n	8003fae <prvInsertBlockIntoFreeList+0xb6>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e008      	b.n	8003fc0 <prvInsertBlockIntoFreeList+0xc8>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003fae:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <prvInsertBlockIntoFreeList+0xf0>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e003      	b.n	8003fc0 <prvInsertBlockIntoFreeList+0xc8>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d002      	beq.n	8003fce <prvInsertBlockIntoFreeList+0xd6>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20012dfc 	.word	0x20012dfc
 8003fe0:	200001fc 	.word	0x200001fc
 8003fe4:	20012dfb 	.word	0x20012dfb
 8003fe8:	20012e04 	.word	0x20012e04

08003fec <std>:
 8003fec:	2300      	movs	r3, #0
 8003fee:	b510      	push	{r4, lr}
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ffa:	6083      	str	r3, [r0, #8]
 8003ffc:	8181      	strh	r1, [r0, #12]
 8003ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8004000:	81c2      	strh	r2, [r0, #14]
 8004002:	6183      	str	r3, [r0, #24]
 8004004:	4619      	mov	r1, r3
 8004006:	2208      	movs	r2, #8
 8004008:	305c      	adds	r0, #92	; 0x5c
 800400a:	f000 f8f4 	bl	80041f6 <memset>
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <std+0x38>)
 8004010:	6263      	str	r3, [r4, #36]	; 0x24
 8004012:	4b05      	ldr	r3, [pc, #20]	; (8004028 <std+0x3c>)
 8004014:	62a3      	str	r3, [r4, #40]	; 0x28
 8004016:	4b05      	ldr	r3, [pc, #20]	; (800402c <std+0x40>)
 8004018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <std+0x44>)
 800401c:	6224      	str	r4, [r4, #32]
 800401e:	6323      	str	r3, [r4, #48]	; 0x30
 8004020:	bd10      	pop	{r4, pc}
 8004022:	bf00      	nop
 8004024:	08004171 	.word	0x08004171
 8004028:	08004193 	.word	0x08004193
 800402c:	080041cb 	.word	0x080041cb
 8004030:	080041ef 	.word	0x080041ef

08004034 <stdio_exit_handler>:
 8004034:	4a02      	ldr	r2, [pc, #8]	; (8004040 <stdio_exit_handler+0xc>)
 8004036:	4903      	ldr	r1, [pc, #12]	; (8004044 <stdio_exit_handler+0x10>)
 8004038:	4803      	ldr	r0, [pc, #12]	; (8004048 <stdio_exit_handler+0x14>)
 800403a:	f000 b869 	b.w	8004110 <_fwalk_sglue>
 800403e:	bf00      	nop
 8004040:	20000014 	.word	0x20000014
 8004044:	08004b91 	.word	0x08004b91
 8004048:	20000020 	.word	0x20000020

0800404c <cleanup_stdio>:
 800404c:	6841      	ldr	r1, [r0, #4]
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <cleanup_stdio+0x34>)
 8004050:	4299      	cmp	r1, r3
 8004052:	b510      	push	{r4, lr}
 8004054:	4604      	mov	r4, r0
 8004056:	d001      	beq.n	800405c <cleanup_stdio+0x10>
 8004058:	f000 fd9a 	bl	8004b90 <_fflush_r>
 800405c:	68a1      	ldr	r1, [r4, #8]
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <cleanup_stdio+0x38>)
 8004060:	4299      	cmp	r1, r3
 8004062:	d002      	beq.n	800406a <cleanup_stdio+0x1e>
 8004064:	4620      	mov	r0, r4
 8004066:	f000 fd93 	bl	8004b90 <_fflush_r>
 800406a:	68e1      	ldr	r1, [r4, #12]
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <cleanup_stdio+0x3c>)
 800406e:	4299      	cmp	r1, r3
 8004070:	d004      	beq.n	800407c <cleanup_stdio+0x30>
 8004072:	4620      	mov	r0, r4
 8004074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004078:	f000 bd8a 	b.w	8004b90 <_fflush_r>
 800407c:	bd10      	pop	{r4, pc}
 800407e:	bf00      	nop
 8004080:	20012e18 	.word	0x20012e18
 8004084:	20012e80 	.word	0x20012e80
 8004088:	20012ee8 	.word	0x20012ee8

0800408c <global_stdio_init.part.0>:
 800408c:	b510      	push	{r4, lr}
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <global_stdio_init.part.0+0x30>)
 8004090:	4c0b      	ldr	r4, [pc, #44]	; (80040c0 <global_stdio_init.part.0+0x34>)
 8004092:	4a0c      	ldr	r2, [pc, #48]	; (80040c4 <global_stdio_init.part.0+0x38>)
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	4620      	mov	r0, r4
 8004098:	2200      	movs	r2, #0
 800409a:	2104      	movs	r1, #4
 800409c:	f7ff ffa6 	bl	8003fec <std>
 80040a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80040a4:	2201      	movs	r2, #1
 80040a6:	2109      	movs	r1, #9
 80040a8:	f7ff ffa0 	bl	8003fec <std>
 80040ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80040b0:	2202      	movs	r2, #2
 80040b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040b6:	2112      	movs	r1, #18
 80040b8:	f7ff bf98 	b.w	8003fec <std>
 80040bc:	20012f50 	.word	0x20012f50
 80040c0:	20012e18 	.word	0x20012e18
 80040c4:	08004035 	.word	0x08004035

080040c8 <__sfp_lock_acquire>:
 80040c8:	4801      	ldr	r0, [pc, #4]	; (80040d0 <__sfp_lock_acquire+0x8>)
 80040ca:	f000 b90d 	b.w	80042e8 <__retarget_lock_acquire_recursive>
 80040ce:	bf00      	nop
 80040d0:	20012f59 	.word	0x20012f59

080040d4 <__sfp_lock_release>:
 80040d4:	4801      	ldr	r0, [pc, #4]	; (80040dc <__sfp_lock_release+0x8>)
 80040d6:	f000 b908 	b.w	80042ea <__retarget_lock_release_recursive>
 80040da:	bf00      	nop
 80040dc:	20012f59 	.word	0x20012f59

080040e0 <__sinit>:
 80040e0:	b510      	push	{r4, lr}
 80040e2:	4604      	mov	r4, r0
 80040e4:	f7ff fff0 	bl	80040c8 <__sfp_lock_acquire>
 80040e8:	6a23      	ldr	r3, [r4, #32]
 80040ea:	b11b      	cbz	r3, 80040f4 <__sinit+0x14>
 80040ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040f0:	f7ff bff0 	b.w	80040d4 <__sfp_lock_release>
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <__sinit+0x28>)
 80040f6:	6223      	str	r3, [r4, #32]
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <__sinit+0x2c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f5      	bne.n	80040ec <__sinit+0xc>
 8004100:	f7ff ffc4 	bl	800408c <global_stdio_init.part.0>
 8004104:	e7f2      	b.n	80040ec <__sinit+0xc>
 8004106:	bf00      	nop
 8004108:	0800404d 	.word	0x0800404d
 800410c:	20012f50 	.word	0x20012f50

08004110 <_fwalk_sglue>:
 8004110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004114:	4607      	mov	r7, r0
 8004116:	4688      	mov	r8, r1
 8004118:	4614      	mov	r4, r2
 800411a:	2600      	movs	r6, #0
 800411c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004120:	f1b9 0901 	subs.w	r9, r9, #1
 8004124:	d505      	bpl.n	8004132 <_fwalk_sglue+0x22>
 8004126:	6824      	ldr	r4, [r4, #0]
 8004128:	2c00      	cmp	r4, #0
 800412a:	d1f7      	bne.n	800411c <_fwalk_sglue+0xc>
 800412c:	4630      	mov	r0, r6
 800412e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004132:	89ab      	ldrh	r3, [r5, #12]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d907      	bls.n	8004148 <_fwalk_sglue+0x38>
 8004138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800413c:	3301      	adds	r3, #1
 800413e:	d003      	beq.n	8004148 <_fwalk_sglue+0x38>
 8004140:	4629      	mov	r1, r5
 8004142:	4638      	mov	r0, r7
 8004144:	47c0      	blx	r8
 8004146:	4306      	orrs	r6, r0
 8004148:	3568      	adds	r5, #104	; 0x68
 800414a:	e7e9      	b.n	8004120 <_fwalk_sglue+0x10>

0800414c <iprintf>:
 800414c:	b40f      	push	{r0, r1, r2, r3}
 800414e:	b507      	push	{r0, r1, r2, lr}
 8004150:	4906      	ldr	r1, [pc, #24]	; (800416c <iprintf+0x20>)
 8004152:	ab04      	add	r3, sp, #16
 8004154:	6808      	ldr	r0, [r1, #0]
 8004156:	f853 2b04 	ldr.w	r2, [r3], #4
 800415a:	6881      	ldr	r1, [r0, #8]
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	f000 f9e7 	bl	8004530 <_vfiprintf_r>
 8004162:	b003      	add	sp, #12
 8004164:	f85d eb04 	ldr.w	lr, [sp], #4
 8004168:	b004      	add	sp, #16
 800416a:	4770      	bx	lr
 800416c:	2000006c 	.word	0x2000006c

08004170 <__sread>:
 8004170:	b510      	push	{r4, lr}
 8004172:	460c      	mov	r4, r1
 8004174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004178:	f000 f868 	bl	800424c <_read_r>
 800417c:	2800      	cmp	r0, #0
 800417e:	bfab      	itete	ge
 8004180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004182:	89a3      	ldrhlt	r3, [r4, #12]
 8004184:	181b      	addge	r3, r3, r0
 8004186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800418a:	bfac      	ite	ge
 800418c:	6563      	strge	r3, [r4, #84]	; 0x54
 800418e:	81a3      	strhlt	r3, [r4, #12]
 8004190:	bd10      	pop	{r4, pc}

08004192 <__swrite>:
 8004192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004196:	461f      	mov	r7, r3
 8004198:	898b      	ldrh	r3, [r1, #12]
 800419a:	05db      	lsls	r3, r3, #23
 800419c:	4605      	mov	r5, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	4616      	mov	r6, r2
 80041a2:	d505      	bpl.n	80041b0 <__swrite+0x1e>
 80041a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a8:	2302      	movs	r3, #2
 80041aa:	2200      	movs	r2, #0
 80041ac:	f000 f83c 	bl	8004228 <_lseek_r>
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	4632      	mov	r2, r6
 80041be:	463b      	mov	r3, r7
 80041c0:	4628      	mov	r0, r5
 80041c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041c6:	f000 b853 	b.w	8004270 <_write_r>

080041ca <__sseek>:
 80041ca:	b510      	push	{r4, lr}
 80041cc:	460c      	mov	r4, r1
 80041ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d2:	f000 f829 	bl	8004228 <_lseek_r>
 80041d6:	1c43      	adds	r3, r0, #1
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	bf15      	itete	ne
 80041dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80041de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041e6:	81a3      	strheq	r3, [r4, #12]
 80041e8:	bf18      	it	ne
 80041ea:	81a3      	strhne	r3, [r4, #12]
 80041ec:	bd10      	pop	{r4, pc}

080041ee <__sclose>:
 80041ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f2:	f000 b809 	b.w	8004208 <_close_r>

080041f6 <memset>:
 80041f6:	4402      	add	r2, r0
 80041f8:	4603      	mov	r3, r0
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d100      	bne.n	8004200 <memset+0xa>
 80041fe:	4770      	bx	lr
 8004200:	f803 1b01 	strb.w	r1, [r3], #1
 8004204:	e7f9      	b.n	80041fa <memset+0x4>
	...

08004208 <_close_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4d06      	ldr	r5, [pc, #24]	; (8004224 <_close_r+0x1c>)
 800420c:	2300      	movs	r3, #0
 800420e:	4604      	mov	r4, r0
 8004210:	4608      	mov	r0, r1
 8004212:	602b      	str	r3, [r5, #0]
 8004214:	f7fc fdf3 	bl	8000dfe <_close>
 8004218:	1c43      	adds	r3, r0, #1
 800421a:	d102      	bne.n	8004222 <_close_r+0x1a>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	b103      	cbz	r3, 8004222 <_close_r+0x1a>
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	bd38      	pop	{r3, r4, r5, pc}
 8004224:	20012f54 	.word	0x20012f54

08004228 <_lseek_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	4d07      	ldr	r5, [pc, #28]	; (8004248 <_lseek_r+0x20>)
 800422c:	4604      	mov	r4, r0
 800422e:	4608      	mov	r0, r1
 8004230:	4611      	mov	r1, r2
 8004232:	2200      	movs	r2, #0
 8004234:	602a      	str	r2, [r5, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	f7fc fe08 	bl	8000e4c <_lseek>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d102      	bne.n	8004246 <_lseek_r+0x1e>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	b103      	cbz	r3, 8004246 <_lseek_r+0x1e>
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	bd38      	pop	{r3, r4, r5, pc}
 8004248:	20012f54 	.word	0x20012f54

0800424c <_read_r>:
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	4d07      	ldr	r5, [pc, #28]	; (800426c <_read_r+0x20>)
 8004250:	4604      	mov	r4, r0
 8004252:	4608      	mov	r0, r1
 8004254:	4611      	mov	r1, r2
 8004256:	2200      	movs	r2, #0
 8004258:	602a      	str	r2, [r5, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	f7fc fd96 	bl	8000d8c <_read>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d102      	bne.n	800426a <_read_r+0x1e>
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	b103      	cbz	r3, 800426a <_read_r+0x1e>
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	20012f54 	.word	0x20012f54

08004270 <_write_r>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4d07      	ldr	r5, [pc, #28]	; (8004290 <_write_r+0x20>)
 8004274:	4604      	mov	r4, r0
 8004276:	4608      	mov	r0, r1
 8004278:	4611      	mov	r1, r2
 800427a:	2200      	movs	r2, #0
 800427c:	602a      	str	r2, [r5, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	f7fc fda1 	bl	8000dc6 <_write>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d102      	bne.n	800428e <_write_r+0x1e>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	b103      	cbz	r3, 800428e <_write_r+0x1e>
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20012f54 	.word	0x20012f54

08004294 <__errno>:
 8004294:	4b01      	ldr	r3, [pc, #4]	; (800429c <__errno+0x8>)
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	2000006c 	.word	0x2000006c

080042a0 <__libc_init_array>:
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	4d0d      	ldr	r5, [pc, #52]	; (80042d8 <__libc_init_array+0x38>)
 80042a4:	4c0d      	ldr	r4, [pc, #52]	; (80042dc <__libc_init_array+0x3c>)
 80042a6:	1b64      	subs	r4, r4, r5
 80042a8:	10a4      	asrs	r4, r4, #2
 80042aa:	2600      	movs	r6, #0
 80042ac:	42a6      	cmp	r6, r4
 80042ae:	d109      	bne.n	80042c4 <__libc_init_array+0x24>
 80042b0:	4d0b      	ldr	r5, [pc, #44]	; (80042e0 <__libc_init_array+0x40>)
 80042b2:	4c0c      	ldr	r4, [pc, #48]	; (80042e4 <__libc_init_array+0x44>)
 80042b4:	f000 fdbe 	bl	8004e34 <_init>
 80042b8:	1b64      	subs	r4, r4, r5
 80042ba:	10a4      	asrs	r4, r4, #2
 80042bc:	2600      	movs	r6, #0
 80042be:	42a6      	cmp	r6, r4
 80042c0:	d105      	bne.n	80042ce <__libc_init_array+0x2e>
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
 80042c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c8:	4798      	blx	r3
 80042ca:	3601      	adds	r6, #1
 80042cc:	e7ee      	b.n	80042ac <__libc_init_array+0xc>
 80042ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d2:	4798      	blx	r3
 80042d4:	3601      	adds	r6, #1
 80042d6:	e7f2      	b.n	80042be <__libc_init_array+0x1e>
 80042d8:	08004f64 	.word	0x08004f64
 80042dc:	08004f64 	.word	0x08004f64
 80042e0:	08004f64 	.word	0x08004f64
 80042e4:	08004f68 	.word	0x08004f68

080042e8 <__retarget_lock_acquire_recursive>:
 80042e8:	4770      	bx	lr

080042ea <__retarget_lock_release_recursive>:
 80042ea:	4770      	bx	lr

080042ec <_free_r>:
 80042ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042ee:	2900      	cmp	r1, #0
 80042f0:	d044      	beq.n	800437c <_free_r+0x90>
 80042f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042f6:	9001      	str	r0, [sp, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f1a1 0404 	sub.w	r4, r1, #4
 80042fe:	bfb8      	it	lt
 8004300:	18e4      	addlt	r4, r4, r3
 8004302:	f000 f8df 	bl	80044c4 <__malloc_lock>
 8004306:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <_free_r+0x94>)
 8004308:	9801      	ldr	r0, [sp, #4]
 800430a:	6813      	ldr	r3, [r2, #0]
 800430c:	b933      	cbnz	r3, 800431c <_free_r+0x30>
 800430e:	6063      	str	r3, [r4, #4]
 8004310:	6014      	str	r4, [r2, #0]
 8004312:	b003      	add	sp, #12
 8004314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004318:	f000 b8da 	b.w	80044d0 <__malloc_unlock>
 800431c:	42a3      	cmp	r3, r4
 800431e:	d908      	bls.n	8004332 <_free_r+0x46>
 8004320:	6825      	ldr	r5, [r4, #0]
 8004322:	1961      	adds	r1, r4, r5
 8004324:	428b      	cmp	r3, r1
 8004326:	bf01      	itttt	eq
 8004328:	6819      	ldreq	r1, [r3, #0]
 800432a:	685b      	ldreq	r3, [r3, #4]
 800432c:	1949      	addeq	r1, r1, r5
 800432e:	6021      	streq	r1, [r4, #0]
 8004330:	e7ed      	b.n	800430e <_free_r+0x22>
 8004332:	461a      	mov	r2, r3
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b10b      	cbz	r3, 800433c <_free_r+0x50>
 8004338:	42a3      	cmp	r3, r4
 800433a:	d9fa      	bls.n	8004332 <_free_r+0x46>
 800433c:	6811      	ldr	r1, [r2, #0]
 800433e:	1855      	adds	r5, r2, r1
 8004340:	42a5      	cmp	r5, r4
 8004342:	d10b      	bne.n	800435c <_free_r+0x70>
 8004344:	6824      	ldr	r4, [r4, #0]
 8004346:	4421      	add	r1, r4
 8004348:	1854      	adds	r4, r2, r1
 800434a:	42a3      	cmp	r3, r4
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	d1e0      	bne.n	8004312 <_free_r+0x26>
 8004350:	681c      	ldr	r4, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	6053      	str	r3, [r2, #4]
 8004356:	440c      	add	r4, r1
 8004358:	6014      	str	r4, [r2, #0]
 800435a:	e7da      	b.n	8004312 <_free_r+0x26>
 800435c:	d902      	bls.n	8004364 <_free_r+0x78>
 800435e:	230c      	movs	r3, #12
 8004360:	6003      	str	r3, [r0, #0]
 8004362:	e7d6      	b.n	8004312 <_free_r+0x26>
 8004364:	6825      	ldr	r5, [r4, #0]
 8004366:	1961      	adds	r1, r4, r5
 8004368:	428b      	cmp	r3, r1
 800436a:	bf04      	itt	eq
 800436c:	6819      	ldreq	r1, [r3, #0]
 800436e:	685b      	ldreq	r3, [r3, #4]
 8004370:	6063      	str	r3, [r4, #4]
 8004372:	bf04      	itt	eq
 8004374:	1949      	addeq	r1, r1, r5
 8004376:	6021      	streq	r1, [r4, #0]
 8004378:	6054      	str	r4, [r2, #4]
 800437a:	e7ca      	b.n	8004312 <_free_r+0x26>
 800437c:	b003      	add	sp, #12
 800437e:	bd30      	pop	{r4, r5, pc}
 8004380:	20012f5c 	.word	0x20012f5c

08004384 <sbrk_aligned>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	4e0e      	ldr	r6, [pc, #56]	; (80043c0 <sbrk_aligned+0x3c>)
 8004388:	460c      	mov	r4, r1
 800438a:	6831      	ldr	r1, [r6, #0]
 800438c:	4605      	mov	r5, r0
 800438e:	b911      	cbnz	r1, 8004396 <sbrk_aligned+0x12>
 8004390:	f000 fcbc 	bl	8004d0c <_sbrk_r>
 8004394:	6030      	str	r0, [r6, #0]
 8004396:	4621      	mov	r1, r4
 8004398:	4628      	mov	r0, r5
 800439a:	f000 fcb7 	bl	8004d0c <_sbrk_r>
 800439e:	1c43      	adds	r3, r0, #1
 80043a0:	d00a      	beq.n	80043b8 <sbrk_aligned+0x34>
 80043a2:	1cc4      	adds	r4, r0, #3
 80043a4:	f024 0403 	bic.w	r4, r4, #3
 80043a8:	42a0      	cmp	r0, r4
 80043aa:	d007      	beq.n	80043bc <sbrk_aligned+0x38>
 80043ac:	1a21      	subs	r1, r4, r0
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 fcac 	bl	8004d0c <_sbrk_r>
 80043b4:	3001      	adds	r0, #1
 80043b6:	d101      	bne.n	80043bc <sbrk_aligned+0x38>
 80043b8:	f04f 34ff 	mov.w	r4, #4294967295
 80043bc:	4620      	mov	r0, r4
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	20012f60 	.word	0x20012f60

080043c4 <_malloc_r>:
 80043c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043c8:	1ccd      	adds	r5, r1, #3
 80043ca:	f025 0503 	bic.w	r5, r5, #3
 80043ce:	3508      	adds	r5, #8
 80043d0:	2d0c      	cmp	r5, #12
 80043d2:	bf38      	it	cc
 80043d4:	250c      	movcc	r5, #12
 80043d6:	2d00      	cmp	r5, #0
 80043d8:	4607      	mov	r7, r0
 80043da:	db01      	blt.n	80043e0 <_malloc_r+0x1c>
 80043dc:	42a9      	cmp	r1, r5
 80043de:	d905      	bls.n	80043ec <_malloc_r+0x28>
 80043e0:	230c      	movs	r3, #12
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	2600      	movs	r6, #0
 80043e6:	4630      	mov	r0, r6
 80043e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044c0 <_malloc_r+0xfc>
 80043f0:	f000 f868 	bl	80044c4 <__malloc_lock>
 80043f4:	f8d8 3000 	ldr.w	r3, [r8]
 80043f8:	461c      	mov	r4, r3
 80043fa:	bb5c      	cbnz	r4, 8004454 <_malloc_r+0x90>
 80043fc:	4629      	mov	r1, r5
 80043fe:	4638      	mov	r0, r7
 8004400:	f7ff ffc0 	bl	8004384 <sbrk_aligned>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	4604      	mov	r4, r0
 8004408:	d155      	bne.n	80044b6 <_malloc_r+0xf2>
 800440a:	f8d8 4000 	ldr.w	r4, [r8]
 800440e:	4626      	mov	r6, r4
 8004410:	2e00      	cmp	r6, #0
 8004412:	d145      	bne.n	80044a0 <_malloc_r+0xdc>
 8004414:	2c00      	cmp	r4, #0
 8004416:	d048      	beq.n	80044aa <_malloc_r+0xe6>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	4631      	mov	r1, r6
 800441c:	4638      	mov	r0, r7
 800441e:	eb04 0903 	add.w	r9, r4, r3
 8004422:	f000 fc73 	bl	8004d0c <_sbrk_r>
 8004426:	4581      	cmp	r9, r0
 8004428:	d13f      	bne.n	80044aa <_malloc_r+0xe6>
 800442a:	6821      	ldr	r1, [r4, #0]
 800442c:	1a6d      	subs	r5, r5, r1
 800442e:	4629      	mov	r1, r5
 8004430:	4638      	mov	r0, r7
 8004432:	f7ff ffa7 	bl	8004384 <sbrk_aligned>
 8004436:	3001      	adds	r0, #1
 8004438:	d037      	beq.n	80044aa <_malloc_r+0xe6>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	442b      	add	r3, r5
 800443e:	6023      	str	r3, [r4, #0]
 8004440:	f8d8 3000 	ldr.w	r3, [r8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d038      	beq.n	80044ba <_malloc_r+0xf6>
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	42a2      	cmp	r2, r4
 800444c:	d12b      	bne.n	80044a6 <_malloc_r+0xe2>
 800444e:	2200      	movs	r2, #0
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	e00f      	b.n	8004474 <_malloc_r+0xb0>
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	1b52      	subs	r2, r2, r5
 8004458:	d41f      	bmi.n	800449a <_malloc_r+0xd6>
 800445a:	2a0b      	cmp	r2, #11
 800445c:	d917      	bls.n	800448e <_malloc_r+0xca>
 800445e:	1961      	adds	r1, r4, r5
 8004460:	42a3      	cmp	r3, r4
 8004462:	6025      	str	r5, [r4, #0]
 8004464:	bf18      	it	ne
 8004466:	6059      	strne	r1, [r3, #4]
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	bf08      	it	eq
 800446c:	f8c8 1000 	streq.w	r1, [r8]
 8004470:	5162      	str	r2, [r4, r5]
 8004472:	604b      	str	r3, [r1, #4]
 8004474:	4638      	mov	r0, r7
 8004476:	f104 060b 	add.w	r6, r4, #11
 800447a:	f000 f829 	bl	80044d0 <__malloc_unlock>
 800447e:	f026 0607 	bic.w	r6, r6, #7
 8004482:	1d23      	adds	r3, r4, #4
 8004484:	1af2      	subs	r2, r6, r3
 8004486:	d0ae      	beq.n	80043e6 <_malloc_r+0x22>
 8004488:	1b9b      	subs	r3, r3, r6
 800448a:	50a3      	str	r3, [r4, r2]
 800448c:	e7ab      	b.n	80043e6 <_malloc_r+0x22>
 800448e:	42a3      	cmp	r3, r4
 8004490:	6862      	ldr	r2, [r4, #4]
 8004492:	d1dd      	bne.n	8004450 <_malloc_r+0x8c>
 8004494:	f8c8 2000 	str.w	r2, [r8]
 8004498:	e7ec      	b.n	8004474 <_malloc_r+0xb0>
 800449a:	4623      	mov	r3, r4
 800449c:	6864      	ldr	r4, [r4, #4]
 800449e:	e7ac      	b.n	80043fa <_malloc_r+0x36>
 80044a0:	4634      	mov	r4, r6
 80044a2:	6876      	ldr	r6, [r6, #4]
 80044a4:	e7b4      	b.n	8004410 <_malloc_r+0x4c>
 80044a6:	4613      	mov	r3, r2
 80044a8:	e7cc      	b.n	8004444 <_malloc_r+0x80>
 80044aa:	230c      	movs	r3, #12
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	4638      	mov	r0, r7
 80044b0:	f000 f80e 	bl	80044d0 <__malloc_unlock>
 80044b4:	e797      	b.n	80043e6 <_malloc_r+0x22>
 80044b6:	6025      	str	r5, [r4, #0]
 80044b8:	e7dc      	b.n	8004474 <_malloc_r+0xb0>
 80044ba:	605b      	str	r3, [r3, #4]
 80044bc:	deff      	udf	#255	; 0xff
 80044be:	bf00      	nop
 80044c0:	20012f5c 	.word	0x20012f5c

080044c4 <__malloc_lock>:
 80044c4:	4801      	ldr	r0, [pc, #4]	; (80044cc <__malloc_lock+0x8>)
 80044c6:	f7ff bf0f 	b.w	80042e8 <__retarget_lock_acquire_recursive>
 80044ca:	bf00      	nop
 80044cc:	20012f58 	.word	0x20012f58

080044d0 <__malloc_unlock>:
 80044d0:	4801      	ldr	r0, [pc, #4]	; (80044d8 <__malloc_unlock+0x8>)
 80044d2:	f7ff bf0a 	b.w	80042ea <__retarget_lock_release_recursive>
 80044d6:	bf00      	nop
 80044d8:	20012f58 	.word	0x20012f58

080044dc <__sfputc_r>:
 80044dc:	6893      	ldr	r3, [r2, #8]
 80044de:	3b01      	subs	r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	b410      	push	{r4}
 80044e4:	6093      	str	r3, [r2, #8]
 80044e6:	da08      	bge.n	80044fa <__sfputc_r+0x1e>
 80044e8:	6994      	ldr	r4, [r2, #24]
 80044ea:	42a3      	cmp	r3, r4
 80044ec:	db01      	blt.n	80044f2 <__sfputc_r+0x16>
 80044ee:	290a      	cmp	r1, #10
 80044f0:	d103      	bne.n	80044fa <__sfputc_r+0x1e>
 80044f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044f6:	f000 bb73 	b.w	8004be0 <__swbuf_r>
 80044fa:	6813      	ldr	r3, [r2, #0]
 80044fc:	1c58      	adds	r0, r3, #1
 80044fe:	6010      	str	r0, [r2, #0]
 8004500:	7019      	strb	r1, [r3, #0]
 8004502:	4608      	mov	r0, r1
 8004504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004508:	4770      	bx	lr

0800450a <__sfputs_r>:
 800450a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450c:	4606      	mov	r6, r0
 800450e:	460f      	mov	r7, r1
 8004510:	4614      	mov	r4, r2
 8004512:	18d5      	adds	r5, r2, r3
 8004514:	42ac      	cmp	r4, r5
 8004516:	d101      	bne.n	800451c <__sfputs_r+0x12>
 8004518:	2000      	movs	r0, #0
 800451a:	e007      	b.n	800452c <__sfputs_r+0x22>
 800451c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004520:	463a      	mov	r2, r7
 8004522:	4630      	mov	r0, r6
 8004524:	f7ff ffda 	bl	80044dc <__sfputc_r>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d1f3      	bne.n	8004514 <__sfputs_r+0xa>
 800452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004530 <_vfiprintf_r>:
 8004530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004534:	460d      	mov	r5, r1
 8004536:	b09d      	sub	sp, #116	; 0x74
 8004538:	4614      	mov	r4, r2
 800453a:	4698      	mov	r8, r3
 800453c:	4606      	mov	r6, r0
 800453e:	b118      	cbz	r0, 8004548 <_vfiprintf_r+0x18>
 8004540:	6a03      	ldr	r3, [r0, #32]
 8004542:	b90b      	cbnz	r3, 8004548 <_vfiprintf_r+0x18>
 8004544:	f7ff fdcc 	bl	80040e0 <__sinit>
 8004548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800454a:	07d9      	lsls	r1, r3, #31
 800454c:	d405      	bmi.n	800455a <_vfiprintf_r+0x2a>
 800454e:	89ab      	ldrh	r3, [r5, #12]
 8004550:	059a      	lsls	r2, r3, #22
 8004552:	d402      	bmi.n	800455a <_vfiprintf_r+0x2a>
 8004554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004556:	f7ff fec7 	bl	80042e8 <__retarget_lock_acquire_recursive>
 800455a:	89ab      	ldrh	r3, [r5, #12]
 800455c:	071b      	lsls	r3, r3, #28
 800455e:	d501      	bpl.n	8004564 <_vfiprintf_r+0x34>
 8004560:	692b      	ldr	r3, [r5, #16]
 8004562:	b99b      	cbnz	r3, 800458c <_vfiprintf_r+0x5c>
 8004564:	4629      	mov	r1, r5
 8004566:	4630      	mov	r0, r6
 8004568:	f000 fb78 	bl	8004c5c <__swsetup_r>
 800456c:	b170      	cbz	r0, 800458c <_vfiprintf_r+0x5c>
 800456e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004570:	07dc      	lsls	r4, r3, #31
 8004572:	d504      	bpl.n	800457e <_vfiprintf_r+0x4e>
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	b01d      	add	sp, #116	; 0x74
 800457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457e:	89ab      	ldrh	r3, [r5, #12]
 8004580:	0598      	lsls	r0, r3, #22
 8004582:	d4f7      	bmi.n	8004574 <_vfiprintf_r+0x44>
 8004584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004586:	f7ff feb0 	bl	80042ea <__retarget_lock_release_recursive>
 800458a:	e7f3      	b.n	8004574 <_vfiprintf_r+0x44>
 800458c:	2300      	movs	r3, #0
 800458e:	9309      	str	r3, [sp, #36]	; 0x24
 8004590:	2320      	movs	r3, #32
 8004592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004596:	f8cd 800c 	str.w	r8, [sp, #12]
 800459a:	2330      	movs	r3, #48	; 0x30
 800459c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004750 <_vfiprintf_r+0x220>
 80045a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045a4:	f04f 0901 	mov.w	r9, #1
 80045a8:	4623      	mov	r3, r4
 80045aa:	469a      	mov	sl, r3
 80045ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045b0:	b10a      	cbz	r2, 80045b6 <_vfiprintf_r+0x86>
 80045b2:	2a25      	cmp	r2, #37	; 0x25
 80045b4:	d1f9      	bne.n	80045aa <_vfiprintf_r+0x7a>
 80045b6:	ebba 0b04 	subs.w	fp, sl, r4
 80045ba:	d00b      	beq.n	80045d4 <_vfiprintf_r+0xa4>
 80045bc:	465b      	mov	r3, fp
 80045be:	4622      	mov	r2, r4
 80045c0:	4629      	mov	r1, r5
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7ff ffa1 	bl	800450a <__sfputs_r>
 80045c8:	3001      	adds	r0, #1
 80045ca:	f000 80a9 	beq.w	8004720 <_vfiprintf_r+0x1f0>
 80045ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045d0:	445a      	add	r2, fp
 80045d2:	9209      	str	r2, [sp, #36]	; 0x24
 80045d4:	f89a 3000 	ldrb.w	r3, [sl]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80a1 	beq.w	8004720 <_vfiprintf_r+0x1f0>
 80045de:	2300      	movs	r3, #0
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295
 80045e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045e8:	f10a 0a01 	add.w	sl, sl, #1
 80045ec:	9304      	str	r3, [sp, #16]
 80045ee:	9307      	str	r3, [sp, #28]
 80045f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045f4:	931a      	str	r3, [sp, #104]	; 0x68
 80045f6:	4654      	mov	r4, sl
 80045f8:	2205      	movs	r2, #5
 80045fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045fe:	4854      	ldr	r0, [pc, #336]	; (8004750 <_vfiprintf_r+0x220>)
 8004600:	f7fb fde6 	bl	80001d0 <memchr>
 8004604:	9a04      	ldr	r2, [sp, #16]
 8004606:	b9d8      	cbnz	r0, 8004640 <_vfiprintf_r+0x110>
 8004608:	06d1      	lsls	r1, r2, #27
 800460a:	bf44      	itt	mi
 800460c:	2320      	movmi	r3, #32
 800460e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004612:	0713      	lsls	r3, r2, #28
 8004614:	bf44      	itt	mi
 8004616:	232b      	movmi	r3, #43	; 0x2b
 8004618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800461c:	f89a 3000 	ldrb.w	r3, [sl]
 8004620:	2b2a      	cmp	r3, #42	; 0x2a
 8004622:	d015      	beq.n	8004650 <_vfiprintf_r+0x120>
 8004624:	9a07      	ldr	r2, [sp, #28]
 8004626:	4654      	mov	r4, sl
 8004628:	2000      	movs	r0, #0
 800462a:	f04f 0c0a 	mov.w	ip, #10
 800462e:	4621      	mov	r1, r4
 8004630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004634:	3b30      	subs	r3, #48	; 0x30
 8004636:	2b09      	cmp	r3, #9
 8004638:	d94d      	bls.n	80046d6 <_vfiprintf_r+0x1a6>
 800463a:	b1b0      	cbz	r0, 800466a <_vfiprintf_r+0x13a>
 800463c:	9207      	str	r2, [sp, #28]
 800463e:	e014      	b.n	800466a <_vfiprintf_r+0x13a>
 8004640:	eba0 0308 	sub.w	r3, r0, r8
 8004644:	fa09 f303 	lsl.w	r3, r9, r3
 8004648:	4313      	orrs	r3, r2
 800464a:	9304      	str	r3, [sp, #16]
 800464c:	46a2      	mov	sl, r4
 800464e:	e7d2      	b.n	80045f6 <_vfiprintf_r+0xc6>
 8004650:	9b03      	ldr	r3, [sp, #12]
 8004652:	1d19      	adds	r1, r3, #4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	9103      	str	r1, [sp, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	bfbb      	ittet	lt
 800465c:	425b      	neglt	r3, r3
 800465e:	f042 0202 	orrlt.w	r2, r2, #2
 8004662:	9307      	strge	r3, [sp, #28]
 8004664:	9307      	strlt	r3, [sp, #28]
 8004666:	bfb8      	it	lt
 8004668:	9204      	strlt	r2, [sp, #16]
 800466a:	7823      	ldrb	r3, [r4, #0]
 800466c:	2b2e      	cmp	r3, #46	; 0x2e
 800466e:	d10c      	bne.n	800468a <_vfiprintf_r+0x15a>
 8004670:	7863      	ldrb	r3, [r4, #1]
 8004672:	2b2a      	cmp	r3, #42	; 0x2a
 8004674:	d134      	bne.n	80046e0 <_vfiprintf_r+0x1b0>
 8004676:	9b03      	ldr	r3, [sp, #12]
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	9203      	str	r2, [sp, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	bfb8      	it	lt
 8004682:	f04f 33ff 	movlt.w	r3, #4294967295
 8004686:	3402      	adds	r4, #2
 8004688:	9305      	str	r3, [sp, #20]
 800468a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004760 <_vfiprintf_r+0x230>
 800468e:	7821      	ldrb	r1, [r4, #0]
 8004690:	2203      	movs	r2, #3
 8004692:	4650      	mov	r0, sl
 8004694:	f7fb fd9c 	bl	80001d0 <memchr>
 8004698:	b138      	cbz	r0, 80046aa <_vfiprintf_r+0x17a>
 800469a:	9b04      	ldr	r3, [sp, #16]
 800469c:	eba0 000a 	sub.w	r0, r0, sl
 80046a0:	2240      	movs	r2, #64	; 0x40
 80046a2:	4082      	lsls	r2, r0
 80046a4:	4313      	orrs	r3, r2
 80046a6:	3401      	adds	r4, #1
 80046a8:	9304      	str	r3, [sp, #16]
 80046aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ae:	4829      	ldr	r0, [pc, #164]	; (8004754 <_vfiprintf_r+0x224>)
 80046b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046b4:	2206      	movs	r2, #6
 80046b6:	f7fb fd8b 	bl	80001d0 <memchr>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d03f      	beq.n	800473e <_vfiprintf_r+0x20e>
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <_vfiprintf_r+0x228>)
 80046c0:	bb1b      	cbnz	r3, 800470a <_vfiprintf_r+0x1da>
 80046c2:	9b03      	ldr	r3, [sp, #12]
 80046c4:	3307      	adds	r3, #7
 80046c6:	f023 0307 	bic.w	r3, r3, #7
 80046ca:	3308      	adds	r3, #8
 80046cc:	9303      	str	r3, [sp, #12]
 80046ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d0:	443b      	add	r3, r7
 80046d2:	9309      	str	r3, [sp, #36]	; 0x24
 80046d4:	e768      	b.n	80045a8 <_vfiprintf_r+0x78>
 80046d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80046da:	460c      	mov	r4, r1
 80046dc:	2001      	movs	r0, #1
 80046de:	e7a6      	b.n	800462e <_vfiprintf_r+0xfe>
 80046e0:	2300      	movs	r3, #0
 80046e2:	3401      	adds	r4, #1
 80046e4:	9305      	str	r3, [sp, #20]
 80046e6:	4619      	mov	r1, r3
 80046e8:	f04f 0c0a 	mov.w	ip, #10
 80046ec:	4620      	mov	r0, r4
 80046ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046f2:	3a30      	subs	r2, #48	; 0x30
 80046f4:	2a09      	cmp	r2, #9
 80046f6:	d903      	bls.n	8004700 <_vfiprintf_r+0x1d0>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0c6      	beq.n	800468a <_vfiprintf_r+0x15a>
 80046fc:	9105      	str	r1, [sp, #20]
 80046fe:	e7c4      	b.n	800468a <_vfiprintf_r+0x15a>
 8004700:	fb0c 2101 	mla	r1, ip, r1, r2
 8004704:	4604      	mov	r4, r0
 8004706:	2301      	movs	r3, #1
 8004708:	e7f0      	b.n	80046ec <_vfiprintf_r+0x1bc>
 800470a:	ab03      	add	r3, sp, #12
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	462a      	mov	r2, r5
 8004710:	4b12      	ldr	r3, [pc, #72]	; (800475c <_vfiprintf_r+0x22c>)
 8004712:	a904      	add	r1, sp, #16
 8004714:	4630      	mov	r0, r6
 8004716:	f3af 8000 	nop.w
 800471a:	4607      	mov	r7, r0
 800471c:	1c78      	adds	r0, r7, #1
 800471e:	d1d6      	bne.n	80046ce <_vfiprintf_r+0x19e>
 8004720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004722:	07d9      	lsls	r1, r3, #31
 8004724:	d405      	bmi.n	8004732 <_vfiprintf_r+0x202>
 8004726:	89ab      	ldrh	r3, [r5, #12]
 8004728:	059a      	lsls	r2, r3, #22
 800472a:	d402      	bmi.n	8004732 <_vfiprintf_r+0x202>
 800472c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800472e:	f7ff fddc 	bl	80042ea <__retarget_lock_release_recursive>
 8004732:	89ab      	ldrh	r3, [r5, #12]
 8004734:	065b      	lsls	r3, r3, #25
 8004736:	f53f af1d 	bmi.w	8004574 <_vfiprintf_r+0x44>
 800473a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800473c:	e71c      	b.n	8004578 <_vfiprintf_r+0x48>
 800473e:	ab03      	add	r3, sp, #12
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	462a      	mov	r2, r5
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <_vfiprintf_r+0x22c>)
 8004746:	a904      	add	r1, sp, #16
 8004748:	4630      	mov	r0, r6
 800474a:	f000 f879 	bl	8004840 <_printf_i>
 800474e:	e7e4      	b.n	800471a <_vfiprintf_r+0x1ea>
 8004750:	08004f28 	.word	0x08004f28
 8004754:	08004f32 	.word	0x08004f32
 8004758:	00000000 	.word	0x00000000
 800475c:	0800450b 	.word	0x0800450b
 8004760:	08004f2e 	.word	0x08004f2e

08004764 <_printf_common>:
 8004764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	4616      	mov	r6, r2
 800476a:	4699      	mov	r9, r3
 800476c:	688a      	ldr	r2, [r1, #8]
 800476e:	690b      	ldr	r3, [r1, #16]
 8004770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004774:	4293      	cmp	r3, r2
 8004776:	bfb8      	it	lt
 8004778:	4613      	movlt	r3, r2
 800477a:	6033      	str	r3, [r6, #0]
 800477c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004780:	4607      	mov	r7, r0
 8004782:	460c      	mov	r4, r1
 8004784:	b10a      	cbz	r2, 800478a <_printf_common+0x26>
 8004786:	3301      	adds	r3, #1
 8004788:	6033      	str	r3, [r6, #0]
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	0699      	lsls	r1, r3, #26
 800478e:	bf42      	ittt	mi
 8004790:	6833      	ldrmi	r3, [r6, #0]
 8004792:	3302      	addmi	r3, #2
 8004794:	6033      	strmi	r3, [r6, #0]
 8004796:	6825      	ldr	r5, [r4, #0]
 8004798:	f015 0506 	ands.w	r5, r5, #6
 800479c:	d106      	bne.n	80047ac <_printf_common+0x48>
 800479e:	f104 0a19 	add.w	sl, r4, #25
 80047a2:	68e3      	ldr	r3, [r4, #12]
 80047a4:	6832      	ldr	r2, [r6, #0]
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	42ab      	cmp	r3, r5
 80047aa:	dc26      	bgt.n	80047fa <_printf_common+0x96>
 80047ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047b0:	1e13      	subs	r3, r2, #0
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	bf18      	it	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	0692      	lsls	r2, r2, #26
 80047ba:	d42b      	bmi.n	8004814 <_printf_common+0xb0>
 80047bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047c0:	4649      	mov	r1, r9
 80047c2:	4638      	mov	r0, r7
 80047c4:	47c0      	blx	r8
 80047c6:	3001      	adds	r0, #1
 80047c8:	d01e      	beq.n	8004808 <_printf_common+0xa4>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	6922      	ldr	r2, [r4, #16]
 80047ce:	f003 0306 	and.w	r3, r3, #6
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	bf02      	ittt	eq
 80047d6:	68e5      	ldreq	r5, [r4, #12]
 80047d8:	6833      	ldreq	r3, [r6, #0]
 80047da:	1aed      	subeq	r5, r5, r3
 80047dc:	68a3      	ldr	r3, [r4, #8]
 80047de:	bf0c      	ite	eq
 80047e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047e4:	2500      	movne	r5, #0
 80047e6:	4293      	cmp	r3, r2
 80047e8:	bfc4      	itt	gt
 80047ea:	1a9b      	subgt	r3, r3, r2
 80047ec:	18ed      	addgt	r5, r5, r3
 80047ee:	2600      	movs	r6, #0
 80047f0:	341a      	adds	r4, #26
 80047f2:	42b5      	cmp	r5, r6
 80047f4:	d11a      	bne.n	800482c <_printf_common+0xc8>
 80047f6:	2000      	movs	r0, #0
 80047f8:	e008      	b.n	800480c <_printf_common+0xa8>
 80047fa:	2301      	movs	r3, #1
 80047fc:	4652      	mov	r2, sl
 80047fe:	4649      	mov	r1, r9
 8004800:	4638      	mov	r0, r7
 8004802:	47c0      	blx	r8
 8004804:	3001      	adds	r0, #1
 8004806:	d103      	bne.n	8004810 <_printf_common+0xac>
 8004808:	f04f 30ff 	mov.w	r0, #4294967295
 800480c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004810:	3501      	adds	r5, #1
 8004812:	e7c6      	b.n	80047a2 <_printf_common+0x3e>
 8004814:	18e1      	adds	r1, r4, r3
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	2030      	movs	r0, #48	; 0x30
 800481a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800481e:	4422      	add	r2, r4
 8004820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004828:	3302      	adds	r3, #2
 800482a:	e7c7      	b.n	80047bc <_printf_common+0x58>
 800482c:	2301      	movs	r3, #1
 800482e:	4622      	mov	r2, r4
 8004830:	4649      	mov	r1, r9
 8004832:	4638      	mov	r0, r7
 8004834:	47c0      	blx	r8
 8004836:	3001      	adds	r0, #1
 8004838:	d0e6      	beq.n	8004808 <_printf_common+0xa4>
 800483a:	3601      	adds	r6, #1
 800483c:	e7d9      	b.n	80047f2 <_printf_common+0x8e>
	...

08004840 <_printf_i>:
 8004840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	7e0f      	ldrb	r7, [r1, #24]
 8004846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004848:	2f78      	cmp	r7, #120	; 0x78
 800484a:	4691      	mov	r9, r2
 800484c:	4680      	mov	r8, r0
 800484e:	460c      	mov	r4, r1
 8004850:	469a      	mov	sl, r3
 8004852:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004856:	d807      	bhi.n	8004868 <_printf_i+0x28>
 8004858:	2f62      	cmp	r7, #98	; 0x62
 800485a:	d80a      	bhi.n	8004872 <_printf_i+0x32>
 800485c:	2f00      	cmp	r7, #0
 800485e:	f000 80d4 	beq.w	8004a0a <_printf_i+0x1ca>
 8004862:	2f58      	cmp	r7, #88	; 0x58
 8004864:	f000 80c0 	beq.w	80049e8 <_printf_i+0x1a8>
 8004868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800486c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004870:	e03a      	b.n	80048e8 <_printf_i+0xa8>
 8004872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004876:	2b15      	cmp	r3, #21
 8004878:	d8f6      	bhi.n	8004868 <_printf_i+0x28>
 800487a:	a101      	add	r1, pc, #4	; (adr r1, 8004880 <_printf_i+0x40>)
 800487c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004880:	080048d9 	.word	0x080048d9
 8004884:	080048ed 	.word	0x080048ed
 8004888:	08004869 	.word	0x08004869
 800488c:	08004869 	.word	0x08004869
 8004890:	08004869 	.word	0x08004869
 8004894:	08004869 	.word	0x08004869
 8004898:	080048ed 	.word	0x080048ed
 800489c:	08004869 	.word	0x08004869
 80048a0:	08004869 	.word	0x08004869
 80048a4:	08004869 	.word	0x08004869
 80048a8:	08004869 	.word	0x08004869
 80048ac:	080049f1 	.word	0x080049f1
 80048b0:	08004919 	.word	0x08004919
 80048b4:	080049ab 	.word	0x080049ab
 80048b8:	08004869 	.word	0x08004869
 80048bc:	08004869 	.word	0x08004869
 80048c0:	08004a13 	.word	0x08004a13
 80048c4:	08004869 	.word	0x08004869
 80048c8:	08004919 	.word	0x08004919
 80048cc:	08004869 	.word	0x08004869
 80048d0:	08004869 	.word	0x08004869
 80048d4:	080049b3 	.word	0x080049b3
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	1d1a      	adds	r2, r3, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	602a      	str	r2, [r5, #0]
 80048e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e8:	2301      	movs	r3, #1
 80048ea:	e09f      	b.n	8004a2c <_printf_i+0x1ec>
 80048ec:	6820      	ldr	r0, [r4, #0]
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	0607      	lsls	r7, r0, #24
 80048f2:	f103 0104 	add.w	r1, r3, #4
 80048f6:	6029      	str	r1, [r5, #0]
 80048f8:	d501      	bpl.n	80048fe <_printf_i+0xbe>
 80048fa:	681e      	ldr	r6, [r3, #0]
 80048fc:	e003      	b.n	8004906 <_printf_i+0xc6>
 80048fe:	0646      	lsls	r6, r0, #25
 8004900:	d5fb      	bpl.n	80048fa <_printf_i+0xba>
 8004902:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004906:	2e00      	cmp	r6, #0
 8004908:	da03      	bge.n	8004912 <_printf_i+0xd2>
 800490a:	232d      	movs	r3, #45	; 0x2d
 800490c:	4276      	negs	r6, r6
 800490e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004912:	485a      	ldr	r0, [pc, #360]	; (8004a7c <_printf_i+0x23c>)
 8004914:	230a      	movs	r3, #10
 8004916:	e012      	b.n	800493e <_printf_i+0xfe>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	6820      	ldr	r0, [r4, #0]
 800491c:	1d19      	adds	r1, r3, #4
 800491e:	6029      	str	r1, [r5, #0]
 8004920:	0605      	lsls	r5, r0, #24
 8004922:	d501      	bpl.n	8004928 <_printf_i+0xe8>
 8004924:	681e      	ldr	r6, [r3, #0]
 8004926:	e002      	b.n	800492e <_printf_i+0xee>
 8004928:	0641      	lsls	r1, r0, #25
 800492a:	d5fb      	bpl.n	8004924 <_printf_i+0xe4>
 800492c:	881e      	ldrh	r6, [r3, #0]
 800492e:	4853      	ldr	r0, [pc, #332]	; (8004a7c <_printf_i+0x23c>)
 8004930:	2f6f      	cmp	r7, #111	; 0x6f
 8004932:	bf0c      	ite	eq
 8004934:	2308      	moveq	r3, #8
 8004936:	230a      	movne	r3, #10
 8004938:	2100      	movs	r1, #0
 800493a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800493e:	6865      	ldr	r5, [r4, #4]
 8004940:	60a5      	str	r5, [r4, #8]
 8004942:	2d00      	cmp	r5, #0
 8004944:	bfa2      	ittt	ge
 8004946:	6821      	ldrge	r1, [r4, #0]
 8004948:	f021 0104 	bicge.w	r1, r1, #4
 800494c:	6021      	strge	r1, [r4, #0]
 800494e:	b90e      	cbnz	r6, 8004954 <_printf_i+0x114>
 8004950:	2d00      	cmp	r5, #0
 8004952:	d04b      	beq.n	80049ec <_printf_i+0x1ac>
 8004954:	4615      	mov	r5, r2
 8004956:	fbb6 f1f3 	udiv	r1, r6, r3
 800495a:	fb03 6711 	mls	r7, r3, r1, r6
 800495e:	5dc7      	ldrb	r7, [r0, r7]
 8004960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004964:	4637      	mov	r7, r6
 8004966:	42bb      	cmp	r3, r7
 8004968:	460e      	mov	r6, r1
 800496a:	d9f4      	bls.n	8004956 <_printf_i+0x116>
 800496c:	2b08      	cmp	r3, #8
 800496e:	d10b      	bne.n	8004988 <_printf_i+0x148>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	07de      	lsls	r6, r3, #31
 8004974:	d508      	bpl.n	8004988 <_printf_i+0x148>
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	6861      	ldr	r1, [r4, #4]
 800497a:	4299      	cmp	r1, r3
 800497c:	bfde      	ittt	le
 800497e:	2330      	movle	r3, #48	; 0x30
 8004980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004984:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004988:	1b52      	subs	r2, r2, r5
 800498a:	6122      	str	r2, [r4, #16]
 800498c:	f8cd a000 	str.w	sl, [sp]
 8004990:	464b      	mov	r3, r9
 8004992:	aa03      	add	r2, sp, #12
 8004994:	4621      	mov	r1, r4
 8004996:	4640      	mov	r0, r8
 8004998:	f7ff fee4 	bl	8004764 <_printf_common>
 800499c:	3001      	adds	r0, #1
 800499e:	d14a      	bne.n	8004a36 <_printf_i+0x1f6>
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	b004      	add	sp, #16
 80049a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	f043 0320 	orr.w	r3, r3, #32
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	4833      	ldr	r0, [pc, #204]	; (8004a80 <_printf_i+0x240>)
 80049b4:	2778      	movs	r7, #120	; 0x78
 80049b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	6829      	ldr	r1, [r5, #0]
 80049be:	061f      	lsls	r7, r3, #24
 80049c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80049c4:	d402      	bmi.n	80049cc <_printf_i+0x18c>
 80049c6:	065f      	lsls	r7, r3, #25
 80049c8:	bf48      	it	mi
 80049ca:	b2b6      	uxthmi	r6, r6
 80049cc:	07df      	lsls	r7, r3, #31
 80049ce:	bf48      	it	mi
 80049d0:	f043 0320 	orrmi.w	r3, r3, #32
 80049d4:	6029      	str	r1, [r5, #0]
 80049d6:	bf48      	it	mi
 80049d8:	6023      	strmi	r3, [r4, #0]
 80049da:	b91e      	cbnz	r6, 80049e4 <_printf_i+0x1a4>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	f023 0320 	bic.w	r3, r3, #32
 80049e2:	6023      	str	r3, [r4, #0]
 80049e4:	2310      	movs	r3, #16
 80049e6:	e7a7      	b.n	8004938 <_printf_i+0xf8>
 80049e8:	4824      	ldr	r0, [pc, #144]	; (8004a7c <_printf_i+0x23c>)
 80049ea:	e7e4      	b.n	80049b6 <_printf_i+0x176>
 80049ec:	4615      	mov	r5, r2
 80049ee:	e7bd      	b.n	800496c <_printf_i+0x12c>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	6826      	ldr	r6, [r4, #0]
 80049f4:	6961      	ldr	r1, [r4, #20]
 80049f6:	1d18      	adds	r0, r3, #4
 80049f8:	6028      	str	r0, [r5, #0]
 80049fa:	0635      	lsls	r5, r6, #24
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	d501      	bpl.n	8004a04 <_printf_i+0x1c4>
 8004a00:	6019      	str	r1, [r3, #0]
 8004a02:	e002      	b.n	8004a0a <_printf_i+0x1ca>
 8004a04:	0670      	lsls	r0, r6, #25
 8004a06:	d5fb      	bpl.n	8004a00 <_printf_i+0x1c0>
 8004a08:	8019      	strh	r1, [r3, #0]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6123      	str	r3, [r4, #16]
 8004a0e:	4615      	mov	r5, r2
 8004a10:	e7bc      	b.n	800498c <_printf_i+0x14c>
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	1d1a      	adds	r2, r3, #4
 8004a16:	602a      	str	r2, [r5, #0]
 8004a18:	681d      	ldr	r5, [r3, #0]
 8004a1a:	6862      	ldr	r2, [r4, #4]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f7fb fbd6 	bl	80001d0 <memchr>
 8004a24:	b108      	cbz	r0, 8004a2a <_printf_i+0x1ea>
 8004a26:	1b40      	subs	r0, r0, r5
 8004a28:	6060      	str	r0, [r4, #4]
 8004a2a:	6863      	ldr	r3, [r4, #4]
 8004a2c:	6123      	str	r3, [r4, #16]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a34:	e7aa      	b.n	800498c <_printf_i+0x14c>
 8004a36:	6923      	ldr	r3, [r4, #16]
 8004a38:	462a      	mov	r2, r5
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	47d0      	blx	sl
 8004a40:	3001      	adds	r0, #1
 8004a42:	d0ad      	beq.n	80049a0 <_printf_i+0x160>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	079b      	lsls	r3, r3, #30
 8004a48:	d413      	bmi.n	8004a72 <_printf_i+0x232>
 8004a4a:	68e0      	ldr	r0, [r4, #12]
 8004a4c:	9b03      	ldr	r3, [sp, #12]
 8004a4e:	4298      	cmp	r0, r3
 8004a50:	bfb8      	it	lt
 8004a52:	4618      	movlt	r0, r3
 8004a54:	e7a6      	b.n	80049a4 <_printf_i+0x164>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4632      	mov	r2, r6
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	47d0      	blx	sl
 8004a60:	3001      	adds	r0, #1
 8004a62:	d09d      	beq.n	80049a0 <_printf_i+0x160>
 8004a64:	3501      	adds	r5, #1
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	9903      	ldr	r1, [sp, #12]
 8004a6a:	1a5b      	subs	r3, r3, r1
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	dcf2      	bgt.n	8004a56 <_printf_i+0x216>
 8004a70:	e7eb      	b.n	8004a4a <_printf_i+0x20a>
 8004a72:	2500      	movs	r5, #0
 8004a74:	f104 0619 	add.w	r6, r4, #25
 8004a78:	e7f5      	b.n	8004a66 <_printf_i+0x226>
 8004a7a:	bf00      	nop
 8004a7c:	08004f39 	.word	0x08004f39
 8004a80:	08004f4a 	.word	0x08004f4a

08004a84 <__sflush_r>:
 8004a84:	898a      	ldrh	r2, [r1, #12]
 8004a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	0710      	lsls	r0, r2, #28
 8004a8e:	460c      	mov	r4, r1
 8004a90:	d458      	bmi.n	8004b44 <__sflush_r+0xc0>
 8004a92:	684b      	ldr	r3, [r1, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	dc05      	bgt.n	8004aa4 <__sflush_r+0x20>
 8004a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	dc02      	bgt.n	8004aa4 <__sflush_r+0x20>
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004aa6:	2e00      	cmp	r6, #0
 8004aa8:	d0f9      	beq.n	8004a9e <__sflush_r+0x1a>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ab0:	682f      	ldr	r7, [r5, #0]
 8004ab2:	6a21      	ldr	r1, [r4, #32]
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	d032      	beq.n	8004b1e <__sflush_r+0x9a>
 8004ab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	075a      	lsls	r2, r3, #29
 8004abe:	d505      	bpl.n	8004acc <__sflush_r+0x48>
 8004ac0:	6863      	ldr	r3, [r4, #4]
 8004ac2:	1ac0      	subs	r0, r0, r3
 8004ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ac6:	b10b      	cbz	r3, 8004acc <__sflush_r+0x48>
 8004ac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aca:	1ac0      	subs	r0, r0, r3
 8004acc:	2300      	movs	r3, #0
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad2:	6a21      	ldr	r1, [r4, #32]
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	47b0      	blx	r6
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	d106      	bne.n	8004aec <__sflush_r+0x68>
 8004ade:	6829      	ldr	r1, [r5, #0]
 8004ae0:	291d      	cmp	r1, #29
 8004ae2:	d82b      	bhi.n	8004b3c <__sflush_r+0xb8>
 8004ae4:	4a29      	ldr	r2, [pc, #164]	; (8004b8c <__sflush_r+0x108>)
 8004ae6:	410a      	asrs	r2, r1
 8004ae8:	07d6      	lsls	r6, r2, #31
 8004aea:	d427      	bmi.n	8004b3c <__sflush_r+0xb8>
 8004aec:	2200      	movs	r2, #0
 8004aee:	6062      	str	r2, [r4, #4]
 8004af0:	04d9      	lsls	r1, r3, #19
 8004af2:	6922      	ldr	r2, [r4, #16]
 8004af4:	6022      	str	r2, [r4, #0]
 8004af6:	d504      	bpl.n	8004b02 <__sflush_r+0x7e>
 8004af8:	1c42      	adds	r2, r0, #1
 8004afa:	d101      	bne.n	8004b00 <__sflush_r+0x7c>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	b903      	cbnz	r3, 8004b02 <__sflush_r+0x7e>
 8004b00:	6560      	str	r0, [r4, #84]	; 0x54
 8004b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b04:	602f      	str	r7, [r5, #0]
 8004b06:	2900      	cmp	r1, #0
 8004b08:	d0c9      	beq.n	8004a9e <__sflush_r+0x1a>
 8004b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b0e:	4299      	cmp	r1, r3
 8004b10:	d002      	beq.n	8004b18 <__sflush_r+0x94>
 8004b12:	4628      	mov	r0, r5
 8004b14:	f7ff fbea 	bl	80042ec <_free_r>
 8004b18:	2000      	movs	r0, #0
 8004b1a:	6360      	str	r0, [r4, #52]	; 0x34
 8004b1c:	e7c0      	b.n	8004aa0 <__sflush_r+0x1c>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4628      	mov	r0, r5
 8004b22:	47b0      	blx	r6
 8004b24:	1c41      	adds	r1, r0, #1
 8004b26:	d1c8      	bne.n	8004aba <__sflush_r+0x36>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0c5      	beq.n	8004aba <__sflush_r+0x36>
 8004b2e:	2b1d      	cmp	r3, #29
 8004b30:	d001      	beq.n	8004b36 <__sflush_r+0xb2>
 8004b32:	2b16      	cmp	r3, #22
 8004b34:	d101      	bne.n	8004b3a <__sflush_r+0xb6>
 8004b36:	602f      	str	r7, [r5, #0]
 8004b38:	e7b1      	b.n	8004a9e <__sflush_r+0x1a>
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b40:	81a3      	strh	r3, [r4, #12]
 8004b42:	e7ad      	b.n	8004aa0 <__sflush_r+0x1c>
 8004b44:	690f      	ldr	r7, [r1, #16]
 8004b46:	2f00      	cmp	r7, #0
 8004b48:	d0a9      	beq.n	8004a9e <__sflush_r+0x1a>
 8004b4a:	0793      	lsls	r3, r2, #30
 8004b4c:	680e      	ldr	r6, [r1, #0]
 8004b4e:	bf08      	it	eq
 8004b50:	694b      	ldreq	r3, [r1, #20]
 8004b52:	600f      	str	r7, [r1, #0]
 8004b54:	bf18      	it	ne
 8004b56:	2300      	movne	r3, #0
 8004b58:	eba6 0807 	sub.w	r8, r6, r7
 8004b5c:	608b      	str	r3, [r1, #8]
 8004b5e:	f1b8 0f00 	cmp.w	r8, #0
 8004b62:	dd9c      	ble.n	8004a9e <__sflush_r+0x1a>
 8004b64:	6a21      	ldr	r1, [r4, #32]
 8004b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b68:	4643      	mov	r3, r8
 8004b6a:	463a      	mov	r2, r7
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b0      	blx	r6
 8004b70:	2800      	cmp	r0, #0
 8004b72:	dc06      	bgt.n	8004b82 <__sflush_r+0xfe>
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b7a:	81a3      	strh	r3, [r4, #12]
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	e78e      	b.n	8004aa0 <__sflush_r+0x1c>
 8004b82:	4407      	add	r7, r0
 8004b84:	eba8 0800 	sub.w	r8, r8, r0
 8004b88:	e7e9      	b.n	8004b5e <__sflush_r+0xda>
 8004b8a:	bf00      	nop
 8004b8c:	dfbffffe 	.word	0xdfbffffe

08004b90 <_fflush_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	690b      	ldr	r3, [r1, #16]
 8004b94:	4605      	mov	r5, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	b913      	cbnz	r3, 8004ba0 <_fflush_r+0x10>
 8004b9a:	2500      	movs	r5, #0
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	b118      	cbz	r0, 8004baa <_fflush_r+0x1a>
 8004ba2:	6a03      	ldr	r3, [r0, #32]
 8004ba4:	b90b      	cbnz	r3, 8004baa <_fflush_r+0x1a>
 8004ba6:	f7ff fa9b 	bl	80040e0 <__sinit>
 8004baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f3      	beq.n	8004b9a <_fflush_r+0xa>
 8004bb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bb4:	07d0      	lsls	r0, r2, #31
 8004bb6:	d404      	bmi.n	8004bc2 <_fflush_r+0x32>
 8004bb8:	0599      	lsls	r1, r3, #22
 8004bba:	d402      	bmi.n	8004bc2 <_fflush_r+0x32>
 8004bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bbe:	f7ff fb93 	bl	80042e8 <__retarget_lock_acquire_recursive>
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	f7ff ff5d 	bl	8004a84 <__sflush_r>
 8004bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bcc:	07da      	lsls	r2, r3, #31
 8004bce:	4605      	mov	r5, r0
 8004bd0:	d4e4      	bmi.n	8004b9c <_fflush_r+0xc>
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	059b      	lsls	r3, r3, #22
 8004bd6:	d4e1      	bmi.n	8004b9c <_fflush_r+0xc>
 8004bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bda:	f7ff fb86 	bl	80042ea <__retarget_lock_release_recursive>
 8004bde:	e7dd      	b.n	8004b9c <_fflush_r+0xc>

08004be0 <__swbuf_r>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	460e      	mov	r6, r1
 8004be4:	4614      	mov	r4, r2
 8004be6:	4605      	mov	r5, r0
 8004be8:	b118      	cbz	r0, 8004bf2 <__swbuf_r+0x12>
 8004bea:	6a03      	ldr	r3, [r0, #32]
 8004bec:	b90b      	cbnz	r3, 8004bf2 <__swbuf_r+0x12>
 8004bee:	f7ff fa77 	bl	80040e0 <__sinit>
 8004bf2:	69a3      	ldr	r3, [r4, #24]
 8004bf4:	60a3      	str	r3, [r4, #8]
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	071a      	lsls	r2, r3, #28
 8004bfa:	d525      	bpl.n	8004c48 <__swbuf_r+0x68>
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	b31b      	cbz	r3, 8004c48 <__swbuf_r+0x68>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	6922      	ldr	r2, [r4, #16]
 8004c04:	1a98      	subs	r0, r3, r2
 8004c06:	6963      	ldr	r3, [r4, #20]
 8004c08:	b2f6      	uxtb	r6, r6
 8004c0a:	4283      	cmp	r3, r0
 8004c0c:	4637      	mov	r7, r6
 8004c0e:	dc04      	bgt.n	8004c1a <__swbuf_r+0x3a>
 8004c10:	4621      	mov	r1, r4
 8004c12:	4628      	mov	r0, r5
 8004c14:	f7ff ffbc 	bl	8004b90 <_fflush_r>
 8004c18:	b9e0      	cbnz	r0, 8004c54 <__swbuf_r+0x74>
 8004c1a:	68a3      	ldr	r3, [r4, #8]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	60a3      	str	r3, [r4, #8]
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	6022      	str	r2, [r4, #0]
 8004c26:	701e      	strb	r6, [r3, #0]
 8004c28:	6962      	ldr	r2, [r4, #20]
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d004      	beq.n	8004c3a <__swbuf_r+0x5a>
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	07db      	lsls	r3, r3, #31
 8004c34:	d506      	bpl.n	8004c44 <__swbuf_r+0x64>
 8004c36:	2e0a      	cmp	r6, #10
 8004c38:	d104      	bne.n	8004c44 <__swbuf_r+0x64>
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f7ff ffa7 	bl	8004b90 <_fflush_r>
 8004c42:	b938      	cbnz	r0, 8004c54 <__swbuf_r+0x74>
 8004c44:	4638      	mov	r0, r7
 8004c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f000 f806 	bl	8004c5c <__swsetup_r>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d0d5      	beq.n	8004c00 <__swbuf_r+0x20>
 8004c54:	f04f 37ff 	mov.w	r7, #4294967295
 8004c58:	e7f4      	b.n	8004c44 <__swbuf_r+0x64>
	...

08004c5c <__swsetup_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4b2a      	ldr	r3, [pc, #168]	; (8004d08 <__swsetup_r+0xac>)
 8004c60:	4605      	mov	r5, r0
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	460c      	mov	r4, r1
 8004c66:	b118      	cbz	r0, 8004c70 <__swsetup_r+0x14>
 8004c68:	6a03      	ldr	r3, [r0, #32]
 8004c6a:	b90b      	cbnz	r3, 8004c70 <__swsetup_r+0x14>
 8004c6c:	f7ff fa38 	bl	80040e0 <__sinit>
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c76:	0718      	lsls	r0, r3, #28
 8004c78:	d422      	bmi.n	8004cc0 <__swsetup_r+0x64>
 8004c7a:	06d9      	lsls	r1, r3, #27
 8004c7c:	d407      	bmi.n	8004c8e <__swsetup_r+0x32>
 8004c7e:	2309      	movs	r3, #9
 8004c80:	602b      	str	r3, [r5, #0]
 8004c82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c86:	81a3      	strh	r3, [r4, #12]
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	e034      	b.n	8004cf8 <__swsetup_r+0x9c>
 8004c8e:	0758      	lsls	r0, r3, #29
 8004c90:	d512      	bpl.n	8004cb8 <__swsetup_r+0x5c>
 8004c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c94:	b141      	cbz	r1, 8004ca8 <__swsetup_r+0x4c>
 8004c96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c9a:	4299      	cmp	r1, r3
 8004c9c:	d002      	beq.n	8004ca4 <__swsetup_r+0x48>
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f7ff fb24 	bl	80042ec <_free_r>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6363      	str	r3, [r4, #52]	; 0x34
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6063      	str	r3, [r4, #4]
 8004cb4:	6923      	ldr	r3, [r4, #16]
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	f043 0308 	orr.w	r3, r3, #8
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	6923      	ldr	r3, [r4, #16]
 8004cc2:	b94b      	cbnz	r3, 8004cd8 <__swsetup_r+0x7c>
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cce:	d003      	beq.n	8004cd8 <__swsetup_r+0x7c>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f000 f850 	bl	8004d78 <__smakebuf_r>
 8004cd8:	89a0      	ldrh	r0, [r4, #12]
 8004cda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cde:	f010 0301 	ands.w	r3, r0, #1
 8004ce2:	d00a      	beq.n	8004cfa <__swsetup_r+0x9e>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60a3      	str	r3, [r4, #8]
 8004ce8:	6963      	ldr	r3, [r4, #20]
 8004cea:	425b      	negs	r3, r3
 8004cec:	61a3      	str	r3, [r4, #24]
 8004cee:	6923      	ldr	r3, [r4, #16]
 8004cf0:	b943      	cbnz	r3, 8004d04 <__swsetup_r+0xa8>
 8004cf2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cf6:	d1c4      	bne.n	8004c82 <__swsetup_r+0x26>
 8004cf8:	bd38      	pop	{r3, r4, r5, pc}
 8004cfa:	0781      	lsls	r1, r0, #30
 8004cfc:	bf58      	it	pl
 8004cfe:	6963      	ldrpl	r3, [r4, #20]
 8004d00:	60a3      	str	r3, [r4, #8]
 8004d02:	e7f4      	b.n	8004cee <__swsetup_r+0x92>
 8004d04:	2000      	movs	r0, #0
 8004d06:	e7f7      	b.n	8004cf8 <__swsetup_r+0x9c>
 8004d08:	2000006c 	.word	0x2000006c

08004d0c <_sbrk_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	4d06      	ldr	r5, [pc, #24]	; (8004d28 <_sbrk_r+0x1c>)
 8004d10:	2300      	movs	r3, #0
 8004d12:	4604      	mov	r4, r0
 8004d14:	4608      	mov	r0, r1
 8004d16:	602b      	str	r3, [r5, #0]
 8004d18:	f7fc f8a6 	bl	8000e68 <_sbrk>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_sbrk_r+0x1a>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_sbrk_r+0x1a>
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	20012f54 	.word	0x20012f54

08004d2c <__swhatbuf_r>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	460c      	mov	r4, r1
 8004d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d34:	2900      	cmp	r1, #0
 8004d36:	b096      	sub	sp, #88	; 0x58
 8004d38:	4615      	mov	r5, r2
 8004d3a:	461e      	mov	r6, r3
 8004d3c:	da0d      	bge.n	8004d5a <__swhatbuf_r+0x2e>
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	bf0c      	ite	eq
 8004d4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004d4e:	2340      	movne	r3, #64	; 0x40
 8004d50:	2000      	movs	r0, #0
 8004d52:	6031      	str	r1, [r6, #0]
 8004d54:	602b      	str	r3, [r5, #0]
 8004d56:	b016      	add	sp, #88	; 0x58
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
 8004d5a:	466a      	mov	r2, sp
 8004d5c:	f000 f848 	bl	8004df0 <_fstat_r>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	dbec      	blt.n	8004d3e <__swhatbuf_r+0x12>
 8004d64:	9901      	ldr	r1, [sp, #4]
 8004d66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004d6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004d6e:	4259      	negs	r1, r3
 8004d70:	4159      	adcs	r1, r3
 8004d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d76:	e7eb      	b.n	8004d50 <__swhatbuf_r+0x24>

08004d78 <__smakebuf_r>:
 8004d78:	898b      	ldrh	r3, [r1, #12]
 8004d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d7c:	079d      	lsls	r5, r3, #30
 8004d7e:	4606      	mov	r6, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	d507      	bpl.n	8004d94 <__smakebuf_r+0x1c>
 8004d84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	6123      	str	r3, [r4, #16]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	6163      	str	r3, [r4, #20]
 8004d90:	b002      	add	sp, #8
 8004d92:	bd70      	pop	{r4, r5, r6, pc}
 8004d94:	ab01      	add	r3, sp, #4
 8004d96:	466a      	mov	r2, sp
 8004d98:	f7ff ffc8 	bl	8004d2c <__swhatbuf_r>
 8004d9c:	9900      	ldr	r1, [sp, #0]
 8004d9e:	4605      	mov	r5, r0
 8004da0:	4630      	mov	r0, r6
 8004da2:	f7ff fb0f 	bl	80043c4 <_malloc_r>
 8004da6:	b948      	cbnz	r0, 8004dbc <__smakebuf_r+0x44>
 8004da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dac:	059a      	lsls	r2, r3, #22
 8004dae:	d4ef      	bmi.n	8004d90 <__smakebuf_r+0x18>
 8004db0:	f023 0303 	bic.w	r3, r3, #3
 8004db4:	f043 0302 	orr.w	r3, r3, #2
 8004db8:	81a3      	strh	r3, [r4, #12]
 8004dba:	e7e3      	b.n	8004d84 <__smakebuf_r+0xc>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	6020      	str	r0, [r4, #0]
 8004dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc4:	81a3      	strh	r3, [r4, #12]
 8004dc6:	9b00      	ldr	r3, [sp, #0]
 8004dc8:	6163      	str	r3, [r4, #20]
 8004dca:	9b01      	ldr	r3, [sp, #4]
 8004dcc:	6120      	str	r0, [r4, #16]
 8004dce:	b15b      	cbz	r3, 8004de8 <__smakebuf_r+0x70>
 8004dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f000 f81d 	bl	8004e14 <_isatty_r>
 8004dda:	b128      	cbz	r0, 8004de8 <__smakebuf_r+0x70>
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	431d      	orrs	r5, r3
 8004dec:	81a5      	strh	r5, [r4, #12]
 8004dee:	e7cf      	b.n	8004d90 <__smakebuf_r+0x18>

08004df0 <_fstat_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4d07      	ldr	r5, [pc, #28]	; (8004e10 <_fstat_r+0x20>)
 8004df4:	2300      	movs	r3, #0
 8004df6:	4604      	mov	r4, r0
 8004df8:	4608      	mov	r0, r1
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	602b      	str	r3, [r5, #0]
 8004dfe:	f7fc f80a 	bl	8000e16 <_fstat>
 8004e02:	1c43      	adds	r3, r0, #1
 8004e04:	d102      	bne.n	8004e0c <_fstat_r+0x1c>
 8004e06:	682b      	ldr	r3, [r5, #0]
 8004e08:	b103      	cbz	r3, 8004e0c <_fstat_r+0x1c>
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	bd38      	pop	{r3, r4, r5, pc}
 8004e0e:	bf00      	nop
 8004e10:	20012f54 	.word	0x20012f54

08004e14 <_isatty_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4d06      	ldr	r5, [pc, #24]	; (8004e30 <_isatty_r+0x1c>)
 8004e18:	2300      	movs	r3, #0
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	602b      	str	r3, [r5, #0]
 8004e20:	f7fc f809 	bl	8000e36 <_isatty>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	d102      	bne.n	8004e2e <_isatty_r+0x1a>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	b103      	cbz	r3, 8004e2e <_isatty_r+0x1a>
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	bd38      	pop	{r3, r4, r5, pc}
 8004e30:	20012f54 	.word	0x20012f54

08004e34 <_init>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr

08004e40 <_fini>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr
