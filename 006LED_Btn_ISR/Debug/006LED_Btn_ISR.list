
006LED_Btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eec  08003eec  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ef4  08003ef4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000191a0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200191b4  200191b4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c5eb  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002076  00000000  00000000  0002c672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cc0  00000000  00000000  0002e6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009e1  00000000  00000000  0002f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021e3c  00000000  00000000  0002fd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e732  00000000  00000000  00051bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5f46  00000000  00000000  000602f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003480  00000000  00000000  00136240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001396c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e84 	.word	0x08003e84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08003e84 	.word	0x08003e84

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fc0b 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f871 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8d9 	bl	8000690 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

//  SEGGER_UART_init(500000);

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 80004de:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <main+0xc4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a2b      	ldr	r2, [pc, #172]	; (8000590 <main+0xc4>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6013      	str	r3, [r2, #0]

//  SEGGER_SYSVIEW_Conf();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 80004ea:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <main+0xc8>)
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2303      	movs	r3, #3
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	22c8      	movs	r2, #200	; 0xc8
 80004f6:	4928      	ldr	r1, [pc, #160]	; (8000598 <main+0xcc>)
 80004f8:	4828      	ldr	r0, [pc, #160]	; (800059c <main+0xd0>)
 80004fa:	f001 ff63 	bl	80023c4 <xTaskCreate>
 80004fe:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d00a      	beq.n	800051c <main+0x50>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800050a:	f383 8811 	msr	BASEPRI, r3
 800050e:	f3bf 8f6f 	isb	sy
 8000512:	f3bf 8f4f 	dsb	sy
 8000516:	60bb      	str	r3, [r7, #8]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000518:	bf00      	nop
 800051a:	e7fe      	b.n	800051a <main+0x4e>

  next_task_handle = ledg_task_handle;
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <main+0xc8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <main+0xd4>)
 8000522:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 8000524:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <main+0xd8>)
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	2302      	movs	r3, #2
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2300      	movs	r3, #0
 800052e:	22c8      	movs	r2, #200	; 0xc8
 8000530:	491d      	ldr	r1, [pc, #116]	; (80005a8 <main+0xdc>)
 8000532:	481e      	ldr	r0, [pc, #120]	; (80005ac <main+0xe0>)
 8000534:	f001 ff46 	bl	80023c4 <xTaskCreate>
 8000538:	60f8      	str	r0, [r7, #12]

   configASSERT(status == pdPASS);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d00a      	beq.n	8000556 <main+0x8a>
    __asm volatile
 8000540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000544:	f383 8811 	msr	BASEPRI, r3
 8000548:	f3bf 8f6f 	isb	sy
 800054c:	f3bf 8f4f 	dsb	sy
 8000550:	607b      	str	r3, [r7, #4]
}
 8000552:	bf00      	nop
 8000554:	e7fe      	b.n	8000554 <main+0x88>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 1, &ledr_task_handle);
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <main+0xe4>)
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2301      	movs	r3, #1
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	22c8      	movs	r2, #200	; 0xc8
 8000562:	4914      	ldr	r1, [pc, #80]	; (80005b4 <main+0xe8>)
 8000564:	4814      	ldr	r0, [pc, #80]	; (80005b8 <main+0xec>)
 8000566:	f001 ff2d 	bl	80023c4 <xTaskCreate>
 800056a:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d00a      	beq.n	8000588 <main+0xbc>
    __asm volatile
 8000572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000576:	f383 8811 	msr	BASEPRI, r3
 800057a:	f3bf 8f6f 	isb	sy
 800057e:	f3bf 8f4f 	dsb	sy
 8000582:	603b      	str	r3, [r7, #0]
}
 8000584:	bf00      	nop
 8000586:	e7fe      	b.n	8000586 <main+0xba>



  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000588:	f002 f952 	bl	8002830 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0xc0>
 800058e:	bf00      	nop
 8000590:	e0001000 	.word	0xe0001000
 8000594:	20000030 	.word	0x20000030
 8000598:	08003e9c 	.word	0x08003e9c
 800059c:	080009a5 	.word	0x080009a5
 80005a0:	2000003c 	.word	0x2000003c
 80005a4:	20000034 	.word	0x20000034
 80005a8:	08003eac 	.word	0x08003eac
 80005ac:	08000a01 	.word	0x08000a01
 80005b0:	20000038 	.word	0x20000038
 80005b4:	08003ebc 	.word	0x08003ebc
 80005b8:	08000a5d 	.word	0x08000a5d

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fc2e 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800062c:	2308      	movs	r3, #8
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000630:	23a8      	movs	r3, #168	; 0xa8
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fe6b 	bl	800131c <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 fa44 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2105      	movs	r1, #5
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f8cc 	bl	800180c <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 fa2d 	bl	8000ad8 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	4ba6      	ldr	r3, [pc, #664]	; (8000944 <MX_GPIO_Init+0x2b4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4aa5      	ldr	r2, [pc, #660]	; (8000944 <MX_GPIO_Init+0x2b4>)
 80006b0:	f043 0310 	orr.w	r3, r3, #16
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4ba3      	ldr	r3, [pc, #652]	; (8000944 <MX_GPIO_Init+0x2b4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	61bb      	str	r3, [r7, #24]
 80006c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	4b9f      	ldr	r3, [pc, #636]	; (8000944 <MX_GPIO_Init+0x2b4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a9e      	ldr	r2, [pc, #632]	; (8000944 <MX_GPIO_Init+0x2b4>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b9c      	ldr	r3, [pc, #624]	; (8000944 <MX_GPIO_Init+0x2b4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b98      	ldr	r3, [pc, #608]	; (8000944 <MX_GPIO_Init+0x2b4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a97      	ldr	r2, [pc, #604]	; (8000944 <MX_GPIO_Init+0x2b4>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b95      	ldr	r3, [pc, #596]	; (8000944 <MX_GPIO_Init+0x2b4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b91      	ldr	r3, [pc, #580]	; (8000944 <MX_GPIO_Init+0x2b4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a90      	ldr	r2, [pc, #576]	; (8000944 <MX_GPIO_Init+0x2b4>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b8e      	ldr	r3, [pc, #568]	; (8000944 <MX_GPIO_Init+0x2b4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b8a      	ldr	r3, [pc, #552]	; (8000944 <MX_GPIO_Init+0x2b4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a89      	ldr	r2, [pc, #548]	; (8000944 <MX_GPIO_Init+0x2b4>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b87      	ldr	r3, [pc, #540]	; (8000944 <MX_GPIO_Init+0x2b4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b83      	ldr	r3, [pc, #524]	; (8000944 <MX_GPIO_Init+0x2b4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a82      	ldr	r2, [pc, #520]	; (8000944 <MX_GPIO_Init+0x2b4>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b80      	ldr	r3, [pc, #512]	; (8000944 <MX_GPIO_Init+0x2b4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2108      	movs	r1, #8
 8000752:	487d      	ldr	r0, [pc, #500]	; (8000948 <MX_GPIO_Init+0x2b8>)
 8000754:	f000 fd8a 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2101      	movs	r1, #1
 800075c:	487b      	ldr	r0, [pc, #492]	; (800094c <MX_GPIO_Init+0x2bc>)
 800075e:	f000 fd85 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000762:	2200      	movs	r2, #0
 8000764:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000768:	4879      	ldr	r0, [pc, #484]	; (8000950 <MX_GPIO_Init+0x2c0>)
 800076a:	f000 fd7f 	bl	800126c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800076e:	2308      	movs	r3, #8
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4870      	ldr	r0, [pc, #448]	; (8000948 <MX_GPIO_Init+0x2b8>)
 8000786:	f000 fbd5 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800078a:	2301      	movs	r3, #1
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	486a      	ldr	r0, [pc, #424]	; (800094c <MX_GPIO_Init+0x2bc>)
 80007a2:	f000 fbc7 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007a6:	2308      	movs	r3, #8
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007b6:	2305      	movs	r3, #5
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4862      	ldr	r0, [pc, #392]	; (800094c <MX_GPIO_Init+0x2bc>)
 80007c2:	f000 fbb7 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	485e      	ldr	r0, [pc, #376]	; (8000954 <MX_GPIO_Init+0x2c4>)
 80007dc:	f000 fbaa 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007e0:	2310      	movs	r3, #16
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007f0:	2306      	movs	r3, #6
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4856      	ldr	r0, [pc, #344]	; (8000954 <MX_GPIO_Init+0x2c4>)
 80007fc:	f000 fb9a 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000800:	23e0      	movs	r3, #224	; 0xe0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000810:	2305      	movs	r3, #5
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	484e      	ldr	r0, [pc, #312]	; (8000954 <MX_GPIO_Init+0x2c4>)
 800081c:	f000 fb8a 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000820:	2304      	movs	r3, #4
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4849      	ldr	r0, [pc, #292]	; (8000958 <MX_GPIO_Init+0x2c8>)
 8000834:	f000 fb7e 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4840      	ldr	r0, [pc, #256]	; (8000958 <MX_GPIO_Init+0x2c8>)
 8000856:	f000 fb6d 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800085e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4837      	ldr	r0, [pc, #220]	; (8000950 <MX_GPIO_Init+0x2c0>)
 8000874:	f000 fb5e 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000878:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800088a:	2306      	movs	r3, #6
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	482d      	ldr	r0, [pc, #180]	; (800094c <MX_GPIO_Init+0x2bc>)
 8000896:	f000 fb4d 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800089a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4829      	ldr	r0, [pc, #164]	; (8000954 <MX_GPIO_Init+0x2c4>)
 80008b0:	f000 fb40 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008c6:	230a      	movs	r3, #10
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4820      	ldr	r0, [pc, #128]	; (8000954 <MX_GPIO_Init+0x2c4>)
 80008d2:	f000 fb2f 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008d6:	2320      	movs	r3, #32
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4819      	ldr	r0, [pc, #100]	; (8000950 <MX_GPIO_Init+0x2c0>)
 80008ea:	f000 fb23 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f4:	2312      	movs	r3, #18
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000900:	2304      	movs	r3, #4
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4813      	ldr	r0, [pc, #76]	; (8000958 <MX_GPIO_Init+0x2c8>)
 800090c:	f000 fb12 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000914:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_GPIO_Init+0x2b8>)
 8000926:	f000 fb05 	bl	8000f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2106      	movs	r1, #6
 800092e:	2006      	movs	r0, #6
 8000930:	f000 fad6 	bl	8000ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000934:	2006      	movs	r0, #6
 8000936:	f000 faef 	bl	8000f18 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093a:	bf00      	nop
 800093c:	3730      	adds	r7, #48	; 0x30
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40021000 	.word	0x40021000
 800094c:	40020800 	.word	0x40020800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40020000 	.word	0x40020000
 8000958:	40020400 	.word	0x40020400

0800095c <button_interrupt_handler>:

/* USER CODE BEGIN 4 */


void button_interrupt_handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]


	traceISR_ENTER();
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <button_interrupt_handler+0x40>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2300      	movs	r3, #0
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	f002 fb66 	bl	8003048 <xTaskGenericNotifyFromISR>
	/**
	 * manually made the scheduler to run. So that the scheduler can pick the higher priority task which
	 * is there in the ready state and it's schedule it to run on the CPU.
	 *
	 */
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d007      	beq.n	8000992 <button_interrupt_handler+0x36>
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <button_interrupt_handler+0x44>)
 8000984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	f3bf 8f4f 	dsb	sy
 800098e:	f3bf 8f6f 	isb	sy

	traceISR_EXIT();

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000003c 	.word	0x2000003c
 80009a0:	e000ed04 	.word	0xe000ed04

080009a4 <led_green_handler>:


static void led_green_handler(void* parameters)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
//		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b0:	4810      	ldr	r0, [pc, #64]	; (80009f4 <led_green_handler+0x50>)
 80009b2:	f000 fc74 	bl	800129e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2300      	movs	r3, #0
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2000      	movs	r0, #0
 80009c4:	f002 faae 	bl	8002f24 <xTaskGenericNotifyWait>
 80009c8:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d1ed      	bne.n	80009ac <led_green_handler+0x8>
			portENTER_CRITICAL();
 80009d0:	f002 fe92 	bl	80036f8 <vPortEnterCritical>
			next_task_handle = ledo_task_handle;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <led_green_handler+0x54>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a08      	ldr	r2, [pc, #32]	; (80009fc <led_green_handler+0x58>)
 80009da:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN,GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <led_green_handler+0x50>)
 80009e4:	f000 fc42 	bl	800126c <HAL_GPIO_WritePin>
//			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
			portEXIT_CRITICAL();
 80009e8:	f002 feb6 	bl	8003758 <vPortExitCritical>
			vTaskDelete(NULL);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f001 fe33 	bl	8002658 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009f2:	e7db      	b.n	80009ac <led_green_handler+0x8>
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	20000034 	.word	0x20000034
 80009fc:	2000003c 	.word	0x2000003c

08000a00 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
//		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN );
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	4810      	ldr	r0, [pc, #64]	; (8000a50 <led_orange_handler+0x50>)
 8000a0e:	f000 fc46 	bl	800129e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000a12:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f002 fa80 	bl	8002f24 <xTaskGenericNotifyWait>
 8000a24:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d1ed      	bne.n	8000a08 <led_orange_handler+0x8>
			portENTER_CRITICAL();
 8000a2c:	f002 fe64 	bl	80036f8 <vPortEnterCritical>
			next_task_handle = ledr_task_handle;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <led_orange_handler+0x54>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <led_orange_handler+0x58>)
 8000a36:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN,GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <led_orange_handler+0x50>)
 8000a40:	f000 fc14 	bl	800126c <HAL_GPIO_WritePin>
//			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
			portEXIT_CRITICAL();
 8000a44:	f002 fe88 	bl	8003758 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 fe05 	bl	8002658 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN );
 8000a4e:	e7db      	b.n	8000a08 <led_orange_handler+0x8>
 8000a50:	40020c00 	.word	0x40020c00
 8000a54:	20000038 	.word	0x20000038
 8000a58:	2000003c 	.word	0x2000003c

08000a5c <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
//		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a68:	4810      	ldr	r0, [pc, #64]	; (8000aac <led_red_handler+0x50>)
 8000a6a:	f000 fc18 	bl	800129e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000a6e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2300      	movs	r3, #0
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f002 fa52 	bl	8002f24 <xTaskGenericNotifyWait>
 8000a80:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d1ed      	bne.n	8000a64 <led_red_handler+0x8>
			portENTER_CRITICAL();
 8000a88:	f002 fe36 	bl	80036f8 <vPortEnterCritical>
			next_task_handle = NULL;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <led_red_handler+0x54>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN,GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <led_red_handler+0x50>)
 8000a9a:	f000 fbe7 	bl	800126c <HAL_GPIO_WritePin>
//			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
			portEXIT_CRITICAL();
 8000a9e:	f002 fe5b 	bl	8003758 <vPortExitCritical>
			vTaskDelete(NULL);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f001 fdd8 	bl	8002658 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000aa8:	e7dc      	b.n	8000a64 <led_red_handler+0x8>
 8000aaa:	bf00      	nop
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	2000003c 	.word	0x2000003c

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac6:	f000 f933 	bl	8000d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40001000 	.word	0x40001000

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	; 0x38
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <HAL_InitTick+0xe4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a32      	ldr	r2, [pc, #200]	; (8000c1c <HAL_InitTick+0xe4>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <HAL_InitTick+0xe4>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 0310 	and.w	r3, r3, #16
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b64:	f107 0210 	add.w	r2, r7, #16
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 f858 	bl	8001c24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d103      	bne.n	8000b86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b7e:	f001 f83d 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8000b82:	6378      	str	r0, [r7, #52]	; 0x34
 8000b84:	e004      	b.n	8000b90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b86:	f001 f839 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b92:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <HAL_InitTick+0xe8>)
 8000b94:	fba2 2303 	umull	r2, r3, r2, r3
 8000b98:	0c9b      	lsrs	r3, r3, #18
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <HAL_InitTick+0xec>)
 8000ba0:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <HAL_InitTick+0xf0>)
 8000ba2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <HAL_InitTick+0xec>)
 8000ba6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000baa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <HAL_InitTick+0xec>)
 8000bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <HAL_InitTick+0xec>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <HAL_InitTick+0xec>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_InitTick+0xec>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bc4:	4817      	ldr	r0, [pc, #92]	; (8000c24 <HAL_InitTick+0xec>)
 8000bc6:	f001 f85f 	bl	8001c88 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d11b      	bne.n	8000c10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bd8:	4812      	ldr	r0, [pc, #72]	; (8000c24 <HAL_InitTick+0xec>)
 8000bda:	f001 f8af 	bl	8001d3c <HAL_TIM_Base_Start_IT>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d111      	bne.n	8000c10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bec:	2036      	movs	r0, #54	; 0x36
 8000bee:	f000 f993 	bl	8000f18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d808      	bhi.n	8000c0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	2036      	movs	r0, #54	; 0x36
 8000bfe:	f000 f96f 	bl	8000ee0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_InitTick+0xf4>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e002      	b.n	8000c10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3738      	adds	r7, #56	; 0x38
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	431bde83 	.word	0x431bde83
 8000c24:	20000040 	.word	0x20000040
 8000c28:	40001000 	.word	0x40001000
 8000c2c:	20000004 	.word	0x20000004

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 8000c52:	f7ff fe83 	bl	800095c <button_interrupt_handler>

	//clear EXTI 0 pending bit in the exti pending register
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fb3c 	bl	80012d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  /* USER CODE BEGIN EXTI0_IRQn 1 */


  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <TIM6_DAC_IRQHandler+0x10>)
 8000c66:	f001 f8d9 	bl	8001e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000040 	.word	0x20000040

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc2:	f7ff ffd7 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f003 f8b9 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fbff 	bl	80004cc <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cdc:	08003efc 	.word	0x08003efc
  ldr r2, =_sbss
 8000ce0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ce4:	200191b4 	.word	0x200191b4

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <HAL_Init+0x40>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_Init+0x40>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_Init+0x40>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f8d8 	bl	8000eca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff ff0c 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff fee2 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000088 	.word	0x20000088

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000088 	.word	0x20000088

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff4c 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef2:	f7ff ff61 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000ef6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	6978      	ldr	r0, [r7, #20]
 8000efe:	f7ff ffb1 	bl	8000e64 <NVIC_EncodePriority>
 8000f02:	4602      	mov	r2, r0
 8000f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff80 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff54 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e16b      	b.n	8001228 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 815a 	bne.w	8001222 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d005      	beq.n	8000f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d130      	bne.n	8000fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 0201 	and.w	r2, r3, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d017      	beq.n	8001024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d123      	bne.n	8001078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0203 	and.w	r2, r3, #3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80b4 	beq.w	8001222 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b60      	ldr	r3, [pc, #384]	; (8001240 <HAL_GPIO_Init+0x30c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a5f      	ldr	r2, [pc, #380]	; (8001240 <HAL_GPIO_Init+0x30c>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <HAL_GPIO_Init+0x30c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d6:	4a5b      	ldr	r2, [pc, #364]	; (8001244 <HAL_GPIO_Init+0x310>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_GPIO_Init+0x314>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d02b      	beq.n	800115a <HAL_GPIO_Init+0x226>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a51      	ldr	r2, [pc, #324]	; (800124c <HAL_GPIO_Init+0x318>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d025      	beq.n	8001156 <HAL_GPIO_Init+0x222>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a50      	ldr	r2, [pc, #320]	; (8001250 <HAL_GPIO_Init+0x31c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d01f      	beq.n	8001152 <HAL_GPIO_Init+0x21e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4f      	ldr	r2, [pc, #316]	; (8001254 <HAL_GPIO_Init+0x320>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d019      	beq.n	800114e <HAL_GPIO_Init+0x21a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4e      	ldr	r2, [pc, #312]	; (8001258 <HAL_GPIO_Init+0x324>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0x216>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4d      	ldr	r2, [pc, #308]	; (800125c <HAL_GPIO_Init+0x328>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_GPIO_Init+0x212>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_GPIO_Init+0x32c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d007      	beq.n	8001142 <HAL_GPIO_Init+0x20e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4b      	ldr	r2, [pc, #300]	; (8001264 <HAL_GPIO_Init+0x330>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_GPIO_Init+0x20a>
 800113a:	2307      	movs	r3, #7
 800113c:	e00e      	b.n	800115c <HAL_GPIO_Init+0x228>
 800113e:	2308      	movs	r3, #8
 8001140:	e00c      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001142:	2306      	movs	r3, #6
 8001144:	e00a      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001146:	2305      	movs	r3, #5
 8001148:	e008      	b.n	800115c <HAL_GPIO_Init+0x228>
 800114a:	2304      	movs	r3, #4
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x228>
 800114e:	2303      	movs	r3, #3
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x228>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x228>
 800115a:	2300      	movs	r3, #0
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116c:	4935      	ldr	r1, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x310>)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_GPIO_Init+0x334>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119e:	4a32      	ldr	r2, [pc, #200]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c8:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f2:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_GPIO_Init+0x334>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <HAL_GPIO_Init+0x334>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3301      	adds	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	f67f ae90 	bls.w	8000f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40013800 	.word	0x40013800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40021400 	.word	0x40021400
 8001260:	40021800 	.word	0x40021800
 8001264:	40021c00 	.word	0x40021c00
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b0:	887a      	ldrh	r2, [r7, #2]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	041a      	lsls	r2, r3, #16
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	400b      	ands	r3, r1
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e0:	695a      	ldr	r2, [r3, #20]
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d006      	beq.n	80012f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f806 	bl	8001304 <HAL_GPIO_EXTI_Callback>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e267      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d075      	beq.n	8001426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800133a:	4b88      	ldr	r3, [pc, #544]	; (800155c <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b04      	cmp	r3, #4
 8001344:	d00c      	beq.n	8001360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001346:	4b85      	ldr	r3, [pc, #532]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134e:	2b08      	cmp	r3, #8
 8001350:	d112      	bne.n	8001378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001352:	4b82      	ldr	r3, [pc, #520]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800135e:	d10b      	bne.n	8001378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	4b7e      	ldr	r3, [pc, #504]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d05b      	beq.n	8001424 <HAL_RCC_OscConfig+0x108>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d157      	bne.n	8001424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e242      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001380:	d106      	bne.n	8001390 <HAL_RCC_OscConfig+0x74>
 8001382:	4b76      	ldr	r3, [pc, #472]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a75      	ldr	r2, [pc, #468]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e01d      	b.n	80013cc <HAL_RCC_OscConfig+0xb0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x98>
 800139a:	4b70      	ldr	r3, [pc, #448]	; (800155c <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6f      	ldr	r2, [pc, #444]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b6d      	ldr	r3, [pc, #436]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a6c      	ldr	r2, [pc, #432]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0xb0>
 80013b4:	4b69      	ldr	r3, [pc, #420]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a68      	ldr	r2, [pc, #416]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b66      	ldr	r3, [pc, #408]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a65      	ldr	r2, [pc, #404]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fcc0 	bl	8000d58 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fcbc 	bl	8000d58 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e207      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	4b5b      	ldr	r3, [pc, #364]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0xc0>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fcac 	bl	8000d58 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fca8 	bl	8000d58 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e1f3      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	4b51      	ldr	r3, [pc, #324]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0xe8>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d063      	beq.n	80014fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001432:	4b4a      	ldr	r3, [pc, #296]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00b      	beq.n	8001456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001446:	2b08      	cmp	r3, #8
 8001448:	d11c      	bne.n	8001484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144a:	4b44      	ldr	r3, [pc, #272]	; (800155c <HAL_RCC_OscConfig+0x240>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d116      	bne.n	8001484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	4b41      	ldr	r3, [pc, #260]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x152>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e1c7      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4937      	ldr	r1, [pc, #220]	; (800155c <HAL_RCC_OscConfig+0x240>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	e03a      	b.n	80014fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d020      	beq.n	80014ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_RCC_OscConfig+0x244>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fc61 	bl	8000d58 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fc5d 	bl	8000d58 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e1a8      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4925      	ldr	r1, [pc, #148]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]
 80014cc:	e015      	b.n	80014fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <HAL_RCC_OscConfig+0x244>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc40 	bl	8000d58 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fc3c 	bl	8000d58 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e187      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d036      	beq.n	8001574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d016      	beq.n	800153c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_RCC_OscConfig+0x248>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001514:	f7ff fc20 	bl	8000d58 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fc1c 	bl	8000d58 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e167      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_OscConfig+0x240>)
 8001530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x200>
 800153a:	e01b      	b.n	8001574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_RCC_OscConfig+0x248>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fc09 	bl	8000d58 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	e00e      	b.n	8001568 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154a:	f7ff fc05 	bl	8000d58 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d907      	bls.n	8001568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e150      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
 800155c:	40023800 	.word	0x40023800
 8001560:	42470000 	.word	0x42470000
 8001564:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	4b88      	ldr	r3, [pc, #544]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800156a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1ea      	bne.n	800154a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 8097 	beq.w	80016b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001586:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10f      	bne.n	80015b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b7d      	ldr	r3, [pc, #500]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a7c      	ldr	r2, [pc, #496]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b7a      	ldr	r3, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b77      	ldr	r3, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x474>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d118      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b74      	ldr	r3, [pc, #464]	; (8001790 <HAL_RCC_OscConfig+0x474>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a73      	ldr	r2, [pc, #460]	; (8001790 <HAL_RCC_OscConfig+0x474>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbc5 	bl	8000d58 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d2:	f7ff fbc1 	bl	8000d58 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e10c      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	4b6a      	ldr	r3, [pc, #424]	; (8001790 <HAL_RCC_OscConfig+0x474>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x2ea>
 80015f8:	4b64      	ldr	r3, [pc, #400]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	4a63      	ldr	r2, [pc, #396]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6713      	str	r3, [r2, #112]	; 0x70
 8001604:	e01c      	b.n	8001640 <HAL_RCC_OscConfig+0x324>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b05      	cmp	r3, #5
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x30c>
 800160e:	4b5f      	ldr	r3, [pc, #380]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	4a5e      	ldr	r2, [pc, #376]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6713      	str	r3, [r2, #112]	; 0x70
 800161a:	4b5c      	ldr	r3, [pc, #368]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	4a5b      	ldr	r2, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6713      	str	r3, [r2, #112]	; 0x70
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0x324>
 8001628:	4b58      	ldr	r3, [pc, #352]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a57      	ldr	r2, [pc, #348]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
 8001634:	4b55      	ldr	r3, [pc, #340]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a54      	ldr	r2, [pc, #336]	; (800178c <HAL_RCC_OscConfig+0x470>)
 800163a:	f023 0304 	bic.w	r3, r3, #4
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d015      	beq.n	8001674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fb86 	bl	8000d58 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164e:	e00a      	b.n	8001666 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff fb82 	bl	8000d58 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e0cb      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001666:	4b49      	ldr	r3, [pc, #292]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0ee      	beq.n	8001650 <HAL_RCC_OscConfig+0x334>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7ff fb70 	bl	8000d58 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff fb6c 	bl	8000d58 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e0b5      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001692:	4b3e      	ldr	r3, [pc, #248]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ee      	bne.n	800167c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800169e:	7dfb      	ldrb	r3, [r7, #23]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a4:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a38      	ldr	r2, [pc, #224]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80016aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80a1 	beq.w	80017fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d05c      	beq.n	8001780 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d141      	bne.n	8001752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b31      	ldr	r3, [pc, #196]	; (8001794 <HAL_RCC_OscConfig+0x478>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb40 	bl	8000d58 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fb3c 	bl	8000d58 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e087      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_RCC_OscConfig+0x470>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69da      	ldr	r2, [r3, #28]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	019b      	lsls	r3, r3, #6
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	085b      	lsrs	r3, r3, #1
 8001712:	3b01      	subs	r3, #1
 8001714:	041b      	lsls	r3, r3, #16
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	491b      	ldr	r1, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_RCC_OscConfig+0x478>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fb15 	bl	8000d58 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff fb11 	bl	8000d58 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e05c      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x416>
 8001750:	e054      	b.n	80017fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_RCC_OscConfig+0x478>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fafe 	bl	8000d58 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff fafa 	bl	8000d58 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e045      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_RCC_OscConfig+0x470>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x444>
 800177e:	e03d      	b.n	80017fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e038      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000
 8001794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x4ec>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d028      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d121      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d11a      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c8:	4013      	ands	r3, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d111      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	3b01      	subs	r3, #1
 80017e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d107      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800

0800180c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0cc      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d90c      	bls.n	8001848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0b8      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800186a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001878:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	494d      	ldr	r1, [pc, #308]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d044      	beq.n	800192c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d119      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e07f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e06f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e067      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4934      	ldr	r1, [pc, #208]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018fc:	f7ff fa2c 	bl	8000d58 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7ff fa28 	bl	8000d58 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e04f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 020c 	and.w	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	429a      	cmp	r2, r3
 800192a:	d1eb      	bne.n	8001904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d20c      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e032      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4916      	ldr	r1, [pc, #88]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	490e      	ldr	r1, [pc, #56]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001992:	f000 f821 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001996:	4602      	mov	r2, r0
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	490a      	ldr	r1, [pc, #40]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	5ccb      	ldrb	r3, [r1, r3]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1c8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f8c0 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00
 80019c8:	40023800 	.word	0x40023800
 80019cc:	08003ed4 	.word	0x08003ed4
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019dc:	b094      	sub	sp, #80	; 0x50
 80019de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	647b      	str	r3, [r7, #68]	; 0x44
 80019e4:	2300      	movs	r3, #0
 80019e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019e8:	2300      	movs	r3, #0
 80019ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f0:	4b79      	ldr	r3, [pc, #484]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d00d      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x40>
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	f200 80e1 	bhi.w	8001bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x34>
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a0a:	e0db      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a0c:	4b73      	ldr	r3, [pc, #460]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a10:	e0db      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a12:	4b73      	ldr	r3, [pc, #460]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a16:	e0d8      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a18:	4b6f      	ldr	r3, [pc, #444]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a22:	4b6d      	ldr	r3, [pc, #436]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d063      	beq.n	8001af6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	2200      	movs	r2, #0
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
 8001a46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	462b      	mov	r3, r5
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	0159      	lsls	r1, r3, #5
 8001a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5c:	0150      	lsls	r0, r2, #5
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4621      	mov	r1, r4
 8001a64:	1a51      	subs	r1, r2, r1
 8001a66:	6139      	str	r1, [r7, #16]
 8001a68:	4629      	mov	r1, r5
 8001a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a7c:	4659      	mov	r1, fp
 8001a7e:	018b      	lsls	r3, r1, #6
 8001a80:	4651      	mov	r1, sl
 8001a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a86:	4651      	mov	r1, sl
 8001a88:	018a      	lsls	r2, r1, #6
 8001a8a:	4651      	mov	r1, sl
 8001a8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a90:	4659      	mov	r1, fp
 8001a92:	eb63 0901 	sbc.w	r9, r3, r1
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aaa:	4690      	mov	r8, r2
 8001aac:	4699      	mov	r9, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	eb18 0303 	adds.w	r3, r8, r3
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	462b      	mov	r3, r5
 8001ab8:	eb49 0303 	adc.w	r3, r9, r3
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aca:	4629      	mov	r1, r5
 8001acc:	024b      	lsls	r3, r1, #9
 8001ace:	4621      	mov	r1, r4
 8001ad0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	024a      	lsls	r2, r1, #9
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ade:	2200      	movs	r2, #0
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ae8:	f7fe fb72 	bl	80001d0 <__aeabi_uldivmod>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4613      	mov	r3, r2
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af4:	e058      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af6:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	099b      	lsrs	r3, r3, #6
 8001afc:	2200      	movs	r2, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	4611      	mov	r1, r2
 8001b02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b10:	4642      	mov	r2, r8
 8001b12:	464b      	mov	r3, r9
 8001b14:	f04f 0000 	mov.w	r0, #0
 8001b18:	f04f 0100 	mov.w	r1, #0
 8001b1c:	0159      	lsls	r1, r3, #5
 8001b1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b22:	0150      	lsls	r0, r2, #5
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4641      	mov	r1, r8
 8001b2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b2e:	4649      	mov	r1, r9
 8001b30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b48:	ebb2 040a 	subs.w	r4, r2, sl
 8001b4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	00eb      	lsls	r3, r5, #3
 8001b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b5e:	00e2      	lsls	r2, r4, #3
 8001b60:	4614      	mov	r4, r2
 8001b62:	461d      	mov	r5, r3
 8001b64:	4643      	mov	r3, r8
 8001b66:	18e3      	adds	r3, r4, r3
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	eb45 0303 	adc.w	r3, r5, r3
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	028b      	lsls	r3, r1, #10
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b88:	4621      	mov	r1, r4
 8001b8a:	028a      	lsls	r2, r1, #10
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b92:	2200      	movs	r2, #0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	61fa      	str	r2, [r7, #28]
 8001b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9c:	f7fe fb18 	bl	80001d0 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001bc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3750      	adds	r7, #80	; 0x50
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	00f42400 	.word	0x00f42400
 8001be0:	007a1200 	.word	0x007a1200

08001be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c00:	f7ff fff0 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0a9b      	lsrs	r3, r3, #10
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08003ee4 	.word	0x08003ee4

08001c24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	220f      	movs	r2, #15
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <HAL_RCC_GetClockConfig+0x60>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0207 	and.w	r2, r3, #7
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	601a      	str	r2, [r3, #0]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40023c00 	.word	0x40023c00

08001c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e041      	b.n	8001d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f839 	bl	8001d26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f000 f9d8 	bl	800207c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d001      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e04e      	b.n	8001df2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d022      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x80>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7e:	d01d      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x80>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d018      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x80>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d013      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x80>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00e      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x80>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d009      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x80>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d004      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x80>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d111      	bne.n	8001de0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d010      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dde:	e007      	b.n	8001df0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40010000 	.word	0x40010000
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40000800 	.word	0x40000800
 8001e0c:	40000c00 	.word	0x40000c00
 8001e10:	40010400 	.word	0x40010400
 8001e14:	40014000 	.word	0x40014000
 8001e18:	40001800 	.word	0x40001800

08001e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d122      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d11b      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0202 	mvn.w	r2, #2
 8001e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f8ee 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8e0 	bl	800202c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f8f1 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d122      	bne.n	8001ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d11b      	bne.n	8001ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0204 	mvn.w	r2, #4
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8c4 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8b6 	bl	800202c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8c7 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d122      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d11b      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0208 	mvn.w	r2, #8
 8001ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f89a 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f88c 	bl	800202c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f89d 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b10      	cmp	r3, #16
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0210 	mvn.w	r2, #16
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2208      	movs	r2, #8
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f870 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f862 	bl	800202c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f873 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d10e      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0201 	mvn.w	r2, #1
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fd8a 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	2b80      	cmp	r3, #128	; 0x80
 8001fac:	d10e      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb8:	2b80      	cmp	r3, #128	; 0x80
 8001fba:	d107      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f902 	bl	80021d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd6:	2b40      	cmp	r3, #64	; 0x40
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe4:	2b40      	cmp	r3, #64	; 0x40
 8001fe6:	d107      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f838 	bl	8002068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b20      	cmp	r3, #32
 8002004:	d10e      	bne.n	8002024 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b20      	cmp	r3, #32
 8002012:	d107      	bne.n	8002024 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0220 	mvn.w	r2, #32
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8cc 	bl	80021bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a40      	ldr	r2, [pc, #256]	; (8002190 <TIM_Base_SetConfig+0x114>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d013      	beq.n	80020bc <TIM_Base_SetConfig+0x40>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209a:	d00f      	beq.n	80020bc <TIM_Base_SetConfig+0x40>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3d      	ldr	r2, [pc, #244]	; (8002194 <TIM_Base_SetConfig+0x118>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00b      	beq.n	80020bc <TIM_Base_SetConfig+0x40>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a3c      	ldr	r2, [pc, #240]	; (8002198 <TIM_Base_SetConfig+0x11c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d007      	beq.n	80020bc <TIM_Base_SetConfig+0x40>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a3b      	ldr	r2, [pc, #236]	; (800219c <TIM_Base_SetConfig+0x120>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <TIM_Base_SetConfig+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a3a      	ldr	r2, [pc, #232]	; (80021a0 <TIM_Base_SetConfig+0x124>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d108      	bne.n	80020ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a2f      	ldr	r2, [pc, #188]	; (8002190 <TIM_Base_SetConfig+0x114>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d02b      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d027      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a2c      	ldr	r2, [pc, #176]	; (8002194 <TIM_Base_SetConfig+0x118>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d023      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a2b      	ldr	r2, [pc, #172]	; (8002198 <TIM_Base_SetConfig+0x11c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01f      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a2a      	ldr	r2, [pc, #168]	; (800219c <TIM_Base_SetConfig+0x120>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01b      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <TIM_Base_SetConfig+0x124>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d017      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <TIM_Base_SetConfig+0x128>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a27      	ldr	r2, [pc, #156]	; (80021a8 <TIM_Base_SetConfig+0x12c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00f      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <TIM_Base_SetConfig+0x130>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00b      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <TIM_Base_SetConfig+0x134>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <TIM_Base_SetConfig+0x138>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d003      	beq.n	800212e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a23      	ldr	r2, [pc, #140]	; (80021b8 <TIM_Base_SetConfig+0x13c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d108      	bne.n	8002140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <TIM_Base_SetConfig+0x114>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <TIM_Base_SetConfig+0xf8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <TIM_Base_SetConfig+0x124>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d103      	bne.n	800217c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	615a      	str	r2, [r3, #20]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40010000 	.word	0x40010000
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800
 800219c:	40000c00 	.word	0x40000c00
 80021a0:	40010400 	.word	0x40010400
 80021a4:	40014000 	.word	0x40014000
 80021a8:	40014400 	.word	0x40014400
 80021ac:	40014800 	.word	0x40014800
 80021b0:	40001800 	.word	0x40001800
 80021b4:	40001c00 	.word	0x40001c00
 80021b8:	40002000 	.word	0x40002000

080021bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f103 0208 	add.w	r2, r3, #8
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f103 0208 	add.w	r2, r3, #8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f103 0208 	add.w	r2, r3, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d103      	bne.n	80022a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e00c      	b.n	80022c0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3308      	adds	r3, #8
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e002      	b.n	80022b4 <vListInsert+0x2e>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d2f6      	bcs.n	80022ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6892      	ldr	r2, [r2, #8]
 800230e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6852      	ldr	r2, [r2, #4]
 8002318:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	d103      	bne.n	800232c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1e5a      	subs	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af04      	add	r7, sp, #16
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f001 faec 	bl	800393c <pvPortMalloc>
 8002364:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800236c:	2058      	movs	r0, #88	; 0x58
 800236e:	f001 fae5 	bl	800393c <pvPortMalloc>
 8002372:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800237a:	2258      	movs	r2, #88	; 0x58
 800237c:	2100      	movs	r1, #0
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f001 fd54 	bl	8003e2c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
 800238a:	e005      	b.n	8002398 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800238c:	6938      	ldr	r0, [r7, #16]
 800238e:	f001 fc01 	bl	8003b94 <vPortFree>
 8002392:	e001      	b.n	8002398 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00d      	beq.n	80023ba <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800239e:	2300      	movs	r3, #0
 80023a0:	9303      	str	r3, [sp, #12]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f828 	bl	800240a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80023ba:	697b      	ldr	r3, [r7, #20]
    }
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f7ff ffb3 	bl	800234c <prvCreateTask>
 80023e6:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80023ee:	6938      	ldr	r0, [r7, #16]
 80023f0:	f000 f89a 	bl	8002528 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023f4:	2301      	movs	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e002      	b.n	8002400 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8002400:	697b      	ldr	r3, [r7, #20]
    }
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b088      	sub	sp, #32
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	461a      	mov	r2, r3
 8002422:	21a5      	movs	r1, #165	; 0xa5
 8002424:	f001 fd02 	bl	8003e2c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002432:	3b01      	subs	r3, #1
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f023 0307 	bic.w	r3, r3, #7
 8002440:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <prvInitialiseNewTask+0x58>
    __asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	617b      	str	r3, [r7, #20]
}
 800245e:	bf00      	nop
 8002460:	e7fe      	b.n	8002460 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01e      	beq.n	80024a6 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	e012      	b.n	8002494 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	4413      	add	r3, r2
 8002474:	7819      	ldrb	r1, [r3, #0]
 8002476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	3334      	adds	r3, #52	; 0x34
 800247e:	460a      	mov	r2, r1
 8002480:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b09      	cmp	r3, #9
 8002498:	d9e9      	bls.n	800246e <prvInitialiseNewTask+0x64>
 800249a:	e000      	b.n	800249e <prvInitialiseNewTask+0x94>
            {
                break;
 800249c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d90a      	bls.n	80024c2 <prvInitialiseNewTask+0xb8>
    __asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	613b      	str	r3, [r7, #16]
}
 80024be:	bf00      	nop
 80024c0:	e7fe      	b.n	80024c0 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d901      	bls.n	80024cc <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024c8:	2304      	movs	r3, #4
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d6:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	3304      	adds	r3, #4
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fea1 	bl	8002224 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	3318      	adds	r3, #24
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fe9c 	bl	8002224 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	f1c3 0205 	rsb	r2, r3, #5
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	69b8      	ldr	r0, [r7, #24]
 8002508:	f000 ff7e 	bl	8003408 <pxPortInitialiseStack>
 800250c:	4602      	mov	r2, r0
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800251c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800251e:	bf00      	nop
 8002520:	3720      	adds	r7, #32
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002530:	f001 f8e2 	bl	80036f8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002534:	4b41      	ldr	r3, [pc, #260]	; (800263c <prvAddNewTaskToReadyList+0x114>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	4a40      	ldr	r2, [pc, #256]	; (800263c <prvAddNewTaskToReadyList+0x114>)
 800253c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800253e:	4b40      	ldr	r3, [pc, #256]	; (8002640 <prvAddNewTaskToReadyList+0x118>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002546:	4a3e      	ldr	r2, [pc, #248]	; (8002640 <prvAddNewTaskToReadyList+0x118>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <prvAddNewTaskToReadyList+0x114>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d110      	bne.n	8002576 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002554:	f000 fc4c 	bl	8002df0 <prvInitialiseTaskLists>
 8002558:	e00d      	b.n	8002576 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800255a:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <prvAddNewTaskToReadyList+0x11c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <prvAddNewTaskToReadyList+0x118>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	429a      	cmp	r2, r3
 800256e:	d802      	bhi.n	8002576 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002570:	4a33      	ldr	r2, [pc, #204]	; (8002640 <prvAddNewTaskToReadyList+0x118>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <prvAddNewTaskToReadyList+0x120>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a32      	ldr	r2, [pc, #200]	; (8002648 <prvAddNewTaskToReadyList+0x120>)
 800257e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <prvAddNewTaskToReadyList+0x120>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	2201      	movs	r2, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	4b2e      	ldr	r3, [pc, #184]	; (800264c <prvAddNewTaskToReadyList+0x124>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	4a2d      	ldr	r2, [pc, #180]	; (800264c <prvAddNewTaskToReadyList+0x124>)
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259e:	492c      	ldr	r1, [pc, #176]	; (8002650 <prvAddNewTaskToReadyList+0x128>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3304      	adds	r3, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	3204      	adds	r2, #4
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	1d1a      	adds	r2, r3, #4
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <prvAddNewTaskToReadyList+0x128>)
 80025de:	441a      	add	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	615a      	str	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	4919      	ldr	r1, [pc, #100]	; (8002650 <prvAddNewTaskToReadyList+0x128>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025fa:	1c59      	adds	r1, r3, #1
 80025fc:	4814      	ldr	r0, [pc, #80]	; (8002650 <prvAddNewTaskToReadyList+0x128>)
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4403      	add	r3, r0
 8002608:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800260a:	f001 f8a5 	bl	8003758 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <prvAddNewTaskToReadyList+0x11c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00e      	beq.n	8002634 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <prvAddNewTaskToReadyList+0x118>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	429a      	cmp	r2, r3
 8002622:	d207      	bcs.n	8002634 <prvAddNewTaskToReadyList+0x10c>
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <prvAddNewTaskToReadyList+0x12c>)
 8002626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000164 	.word	0x20000164
 8002640:	2000008c 	.word	0x2000008c
 8002644:	20000170 	.word	0x20000170
 8002648:	20000180 	.word	0x20000180
 800264c:	2000016c 	.word	0x2000016c
 8002650:	20000090 	.word	0x20000090
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8002664:	f001 f848 	bl	80036f8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <vTaskDelete+0x1c>
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <vTaskDelete+0x11c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e000      	b.n	8002676 <vTaskDelete+0x1e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	3304      	adds	r3, #4
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fe3b 	bl	80022f8 <uxListRemove>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d115      	bne.n	80026b4 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	493a      	ldr	r1, [pc, #232]	; (8002778 <vTaskDelete+0x120>)
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <vTaskDelete+0x5c>
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	2201      	movs	r2, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43da      	mvns	r2, r3
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <vTaskDelete+0x124>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4013      	ands	r3, r2
 80026b0:	4a32      	ldr	r2, [pc, #200]	; (800277c <vTaskDelete+0x124>)
 80026b2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d004      	beq.n	80026c6 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	3318      	adds	r3, #24
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fe19 	bl	80022f8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80026c6:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <vTaskDelete+0x128>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	4a2c      	ldr	r2, [pc, #176]	; (8002780 <vTaskDelete+0x128>)
 80026ce:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 80026d0:	4b28      	ldr	r3, [pc, #160]	; (8002774 <vTaskDelete+0x11c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d101      	bne.n	80026de <vTaskDelete+0x86>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <vTaskDelete+0x88>
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 80026e2:	4b28      	ldr	r3, [pc, #160]	; (8002784 <vTaskDelete+0x12c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d010      	beq.n	800270c <vTaskDelete+0xb4>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4824      	ldr	r0, [pc, #144]	; (8002788 <vTaskDelete+0x130>)
 80026f8:	f7ff fda1 	bl	800223e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80026fc:	4b23      	ldr	r3, [pc, #140]	; (800278c <vTaskDelete+0x134>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <vTaskDelete+0x134>)
 8002704:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8002706:	2301      	movs	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e006      	b.n	800271a <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800270c:	4b20      	ldr	r3, [pc, #128]	; (8002790 <vTaskDelete+0x138>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3b01      	subs	r3, #1
 8002712:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <vTaskDelete+0x138>)
 8002714:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002716:	f000 fbe9 	bl	8002eec <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800271a:	f001 f81d 	bl	8003758 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d002      	beq.n	800272a <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8002724:	6938      	ldr	r0, [r7, #16]
 8002726:	f000 fbd1 	bl	8002ecc <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <vTaskDelete+0x12c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01b      	beq.n	800276a <vTaskDelete+0x112>
            {
                if( pxTCB == pxCurrentTCB )
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <vTaskDelete+0x11c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d116      	bne.n	800276a <vTaskDelete+0x112>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <vTaskDelete+0x13c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <vTaskDelete+0x102>
    __asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	60bb      	str	r3, [r7, #8]
}
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <vTaskDelete+0x100>
                    taskYIELD_WITHIN_API();
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <vTaskDelete+0x140>)
 800275c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000008c 	.word	0x2000008c
 8002778:	20000090 	.word	0x20000090
 800277c:	2000016c 	.word	0x2000016c
 8002780:	20000180 	.word	0x20000180
 8002784:	20000170 	.word	0x20000170
 8002788:	20000138 	.word	0x20000138
 800278c:	2000014c 	.word	0x2000014c
 8002790:	20000164 	.word	0x20000164
 8002794:	2000018c 	.word	0x2000018c
 8002798:	e000ed04 	.word	0xe000ed04

0800279c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e011      	b.n	80027d4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80027b0:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <prvCreateIdleTasks+0x88>)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	4413      	add	r3, r2
 80027b6:	7819      	ldrb	r1, [r3, #0]
 80027b8:	1d3a      	adds	r2, r7, #4
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	4413      	add	r3, r2
 80027be:	460a      	mov	r2, r1
 80027c0:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80027c2:	1d3a      	adds	r2, r7, #4
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	4413      	add	r3, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	3301      	adds	r3, #1
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b09      	cmp	r3, #9
 80027d8:	ddea      	ble.n	80027b0 <prvCreateIdleTasks+0x14>
 80027da:	e000      	b.n	80027de <prvCreateIdleTasks+0x42>
        {
            break;
 80027dc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	e015      	b.n	8002810 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <prvCreateIdleTasks+0x8c>)
 80027e6:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4a0f      	ldr	r2, [pc, #60]	; (800282c <prvCreateIdleTasks+0x90>)
 80027ee:	4413      	add	r3, r2
 80027f0:	1d39      	adds	r1, r7, #4
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2300      	movs	r3, #0
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2300      	movs	r3, #0
 80027fa:	2282      	movs	r2, #130	; 0x82
 80027fc:	6938      	ldr	r0, [r7, #16]
 80027fe:	f7ff fde1 	bl	80023c4 <xTaskCreate>
 8002802:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3301      	adds	r3, #1
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	dde6      	ble.n	80027e4 <prvCreateIdleTasks+0x48>
 8002816:	e000      	b.n	800281a <prvCreateIdleTasks+0x7e>
        {
            break;
 8002818:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800281a:	69fb      	ldr	r3, [r7, #28]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	08003ecc 	.word	0x08003ecc
 8002828:	08002dc1 	.word	0x08002dc1
 800282c:	20000188 	.word	0x20000188

08002830 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002836:	f7ff ffb1 	bl	800279c <prvCreateIdleTasks>
 800283a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d116      	bne.n	8002870 <vTaskStartScheduler+0x40>
    __asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	60bb      	str	r3, [r7, #8]
}
 8002854:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <vTaskStartScheduler+0x6c>)
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <vTaskStartScheduler+0x70>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <vTaskStartScheduler+0x74>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800286a:	f000 fe5b 	bl	8003524 <xPortStartScheduler>
 800286e:	e00e      	b.n	800288e <vTaskStartScheduler+0x5e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d10a      	bne.n	800288e <vTaskStartScheduler+0x5e>
    __asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	607b      	str	r3, [r7, #4]
}
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <vTaskStartScheduler+0x5c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <vTaskStartScheduler+0x78>)
 8002890:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000184 	.word	0x20000184
 80028a0:	20000170 	.word	0x20000170
 80028a4:	20000168 	.word	0x20000168
 80028a8:	2000000c 	.word	0x2000000c

080028ac <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <vTaskSuspendAll+0x18>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	4a03      	ldr	r2, [pc, #12]	; (80028c4 <vTaskSuspendAll+0x18>)
 80028b8:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	2000018c 	.word	0x2000018c

080028c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80028d6:	f000 ff0f 	bl	80036f8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80028de:	4b75      	ldr	r3, [pc, #468]	; (8002ab4 <xTaskResumeAll+0x1ec>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <xTaskResumeAll+0x34>
    __asm volatile
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	603b      	str	r3, [r7, #0]
}
 80028f8:	bf00      	nop
 80028fa:	e7fe      	b.n	80028fa <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80028fc:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <xTaskResumeAll+0x1ec>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3b01      	subs	r3, #1
 8002902:	4a6c      	ldr	r2, [pc, #432]	; (8002ab4 <xTaskResumeAll+0x1ec>)
 8002904:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002906:	4b6b      	ldr	r3, [pc, #428]	; (8002ab4 <xTaskResumeAll+0x1ec>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 80ca 	bne.w	8002aa4 <xTaskResumeAll+0x1dc>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002910:	4b69      	ldr	r3, [pc, #420]	; (8002ab8 <xTaskResumeAll+0x1f0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80c5 	beq.w	8002aa4 <xTaskResumeAll+0x1dc>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800291a:	e08e      	b.n	8002a3a <xTaskResumeAll+0x172>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800291c:	4b67      	ldr	r3, [pc, #412]	; (8002abc <xTaskResumeAll+0x1f4>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	6a12      	ldr	r2, [r2, #32]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	69d2      	ldr	r2, [r2, #28]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3318      	adds	r3, #24
 8002946:	429a      	cmp	r2, r3
 8002948:	d103      	bne.n	8002952 <xTaskResumeAll+0x8a>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	2200      	movs	r2, #0
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1e5a      	subs	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	68d2      	ldr	r2, [r2, #12]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	6892      	ldr	r2, [r2, #8]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	3304      	adds	r3, #4
 8002984:	429a      	cmp	r2, r3
 8002986:	d103      	bne.n	8002990 <xTaskResumeAll+0xc8>
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2200      	movs	r2, #0
 8002994:	615a      	str	r2, [r3, #20]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1e5a      	subs	r2, r3, #1
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	2201      	movs	r2, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <xTaskResumeAll+0x1f8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	4a44      	ldr	r2, [pc, #272]	; (8002ac0 <xTaskResumeAll+0x1f8>)
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b6:	4943      	ldr	r1, [pc, #268]	; (8002ac4 <xTaskResumeAll+0x1fc>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3304      	adds	r3, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	3204      	adds	r2, #4
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4a33      	ldr	r2, [pc, #204]	; (8002ac4 <xTaskResumeAll+0x1fc>)
 80029f6:	441a      	add	r2, r3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	615a      	str	r2, [r3, #20]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	4930      	ldr	r1, [pc, #192]	; (8002ac4 <xTaskResumeAll+0x1fc>)
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a12:	1c59      	adds	r1, r3, #1
 8002a14:	482b      	ldr	r0, [pc, #172]	; (8002ac4 <xTaskResumeAll+0x1fc>)
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4403      	add	r3, r0
 8002a20:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <xTaskResumeAll+0x200>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d904      	bls.n	8002a3a <xTaskResumeAll+0x172>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002a30:	4a26      	ldr	r2, [pc, #152]	; (8002acc <xTaskResumeAll+0x204>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2101      	movs	r1, #1
 8002a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <xTaskResumeAll+0x1f4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f47f af6c 	bne.w	800291c <xTaskResumeAll+0x54>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <xTaskResumeAll+0x186>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002a4a:	f000 fa4f 	bl	8002eec <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <xTaskResumeAll+0x208>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <xTaskResumeAll+0x1b8>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002a5a:	f000 f83d 	bl	8002ad8 <xTaskIncrementTick>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <xTaskResumeAll+0x1a6>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <xTaskResumeAll+0x204>)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ef      	bne.n	8002a5a <xTaskResumeAll+0x192>

                            xPendedTicks = 0;
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <xTaskResumeAll+0x208>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <xTaskResumeAll+0x204>)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <xTaskResumeAll+0x1dc>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002a90:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <xTaskResumeAll+0x200>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <xTaskResumeAll+0x20c>)
 8002a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002aa4:	f000 fe58 	bl	8003758 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000018c 	.word	0x2000018c
 8002ab8:	20000164 	.word	0x20000164
 8002abc:	20000124 	.word	0x20000124
 8002ac0:	2000016c 	.word	0x2000016c
 8002ac4:	20000090 	.word	0x20000090
 8002ac8:	2000008c 	.word	0x2000008c
 8002acc:	20000178 	.word	0x20000178
 8002ad0:	20000174 	.word	0x20000174
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002ae2:	4b7e      	ldr	r3, [pc, #504]	; (8002cdc <xTaskIncrementTick+0x204>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 80ee 	bne.w	8002cc8 <xTaskIncrementTick+0x1f0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002aec:	4b7c      	ldr	r3, [pc, #496]	; (8002ce0 <xTaskIncrementTick+0x208>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002af4:	4a7a      	ldr	r2, [pc, #488]	; (8002ce0 <xTaskIncrementTick+0x208>)
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d120      	bne.n	8002b42 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b00:	4b78      	ldr	r3, [pc, #480]	; (8002ce4 <xTaskIncrementTick+0x20c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <xTaskIncrementTick+0x48>
    __asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	607b      	str	r3, [r7, #4]
}
 8002b1c:	bf00      	nop
 8002b1e:	e7fe      	b.n	8002b1e <xTaskIncrementTick+0x46>
 8002b20:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <xTaskIncrementTick+0x20c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <xTaskIncrementTick+0x210>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6e      	ldr	r2, [pc, #440]	; (8002ce4 <xTaskIncrementTick+0x20c>)
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4a6e      	ldr	r2, [pc, #440]	; (8002ce8 <xTaskIncrementTick+0x210>)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b6d      	ldr	r3, [pc, #436]	; (8002cec <xTaskIncrementTick+0x214>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a6c      	ldr	r2, [pc, #432]	; (8002cec <xTaskIncrementTick+0x214>)
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	f000 f9d5 	bl	8002eec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b42:	4b6b      	ldr	r3, [pc, #428]	; (8002cf0 <xTaskIncrementTick+0x218>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6a3a      	ldr	r2, [r7, #32]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f0c0 80a8 	bcc.w	8002c9e <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <xTaskIncrementTick+0x20c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002b58:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <xTaskIncrementTick+0x218>)
 8002b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5e:	601a      	str	r2, [r3, #0]
                    break;
 8002b60:	e09d      	b.n	8002c9e <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b62:	4b60      	ldr	r3, [pc, #384]	; (8002ce4 <xTaskIncrementTick+0x20c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002b72:	6a3a      	ldr	r2, [r7, #32]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d203      	bcs.n	8002b82 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b7a:	4a5d      	ldr	r2, [pc, #372]	; (8002cf0 <xTaskIncrementTick+0x218>)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	6013      	str	r3, [r2, #0]
                        break;
 8002b80:	e08d      	b.n	8002c9e <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	68d2      	ldr	r2, [r2, #12]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	6892      	ldr	r2, [r2, #8]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d103      	bne.n	8002bb0 <xTaskIncrementTick+0xd8>
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	615a      	str	r2, [r3, #20]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1e5a      	subs	r2, r3, #1
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01e      	beq.n	8002c06 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	6a12      	ldr	r2, [r2, #32]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	69d2      	ldr	r2, [r2, #28]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	3318      	adds	r3, #24
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d103      	bne.n	8002bf6 <xTaskIncrementTick+0x11e>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	6a1a      	ldr	r2, [r3, #32]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	1e5a      	subs	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <xTaskIncrementTick+0x21c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	4a37      	ldr	r2, [pc, #220]	; (8002cf4 <xTaskIncrementTick+0x21c>)
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	4936      	ldr	r1, [pc, #216]	; (8002cf8 <xTaskIncrementTick+0x220>)
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3304      	adds	r3, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	60da      	str	r2, [r3, #12]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	3204      	adds	r2, #4
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	1d1a      	adds	r2, r3, #4
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <xTaskIncrementTick+0x220>)
 8002c5c:	441a      	add	r2, r3
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	615a      	str	r2, [r3, #20]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	4924      	ldr	r1, [pc, #144]	; (8002cf8 <xTaskIncrementTick+0x220>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c78:	1c59      	adds	r1, r3, #1
 8002c7a:	481f      	ldr	r0, [pc, #124]	; (8002cf8 <xTaskIncrementTick+0x220>)
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4403      	add	r3, r0
 8002c86:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <xTaskIncrementTick+0x224>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	429a      	cmp	r2, r3
 8002c94:	f67f af5b 	bls.w	8002b4e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c9c:	e757      	b.n	8002b4e <xTaskIncrementTick+0x76>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <xTaskIncrementTick+0x224>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	4914      	ldr	r1, [pc, #80]	; (8002cf8 <xTaskIncrementTick+0x220>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d901      	bls.n	8002cba <xTaskIncrementTick+0x1e2>
                {
                    xSwitchRequired = pdTRUE;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <xTaskIncrementTick+0x228>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <xTaskIncrementTick+0x1fa>
                {
                    xSwitchRequired = pdTRUE;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	e004      	b.n	8002cd2 <xTaskIncrementTick+0x1fa>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <xTaskIncrementTick+0x22c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <xTaskIncrementTick+0x22c>)
 8002cd0:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3728      	adds	r7, #40	; 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	2000018c 	.word	0x2000018c
 8002ce0:	20000168 	.word	0x20000168
 8002ce4:	2000011c 	.word	0x2000011c
 8002ce8:	20000120 	.word	0x20000120
 8002cec:	2000017c 	.word	0x2000017c
 8002cf0:	20000184 	.word	0x20000184
 8002cf4:	2000016c 	.word	0x2000016c
 8002cf8:	20000090 	.word	0x20000090
 8002cfc:	2000008c 	.word	0x2000008c
 8002d00:	20000178 	.word	0x20000178
 8002d04:	20000174 	.word	0x20000174

08002d08 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002d0e:	4b27      	ldr	r3, [pc, #156]	; (8002dac <vTaskSwitchContext+0xa4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002d16:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <vTaskSwitchContext+0xa8>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002d1c:	e040      	b.n	8002da0 <vTaskSwitchContext+0x98>
            xYieldPendings[ 0 ] = pdFALSE;
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <vTaskSwitchContext+0xa8>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <vTaskSwitchContext+0xac>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	f1c3 031f 	rsb	r3, r3, #31
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	491f      	ldr	r1, [pc, #124]	; (8002db8 <vTaskSwitchContext+0xb0>)
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <vTaskSwitchContext+0x5c>
    __asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	607b      	str	r3, [r7, #4]
}
 8002d60:	bf00      	nop
 8002d62:	e7fe      	b.n	8002d62 <vTaskSwitchContext+0x5a>
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <vTaskSwitchContext+0xb0>)
 8002d70:	4413      	add	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	3308      	adds	r3, #8
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d103      	bne.n	8002d92 <vTaskSwitchContext+0x8a>
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <vTaskSwitchContext+0xb4>)
 8002d9a:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002d9c:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <vTaskSwitchContext+0xb4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
    }
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	2000018c 	.word	0x2000018c
 8002db0:	20000178 	.word	0x20000178
 8002db4:	2000016c 	.word	0x2000016c
 8002db8:	20000090 	.word	0x20000090
 8002dbc:	2000008c 	.word	0x2000008c

08002dc0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002dc8:	f000 f852 	bl	8002e70 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <prvIdleTask+0x28>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d9f9      	bls.n	8002dc8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <prvIdleTask+0x2c>)
 8002dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002de4:	e7f0      	b.n	8002dc8 <prvIdleTask+0x8>
 8002de6:	bf00      	nop
 8002de8:	20000090 	.word	0x20000090
 8002dec:	e000ed04 	.word	0xe000ed04

08002df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	e00c      	b.n	8002e16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <prvInitialiseTaskLists+0x60>)
 8002e08:	4413      	add	r3, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f9ea 	bl	80021e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3301      	adds	r3, #1
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d9ef      	bls.n	8002dfc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <prvInitialiseTaskLists+0x64>)
 8002e1e:	f7ff f9e1 	bl	80021e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e22:	480d      	ldr	r0, [pc, #52]	; (8002e58 <prvInitialiseTaskLists+0x68>)
 8002e24:	f7ff f9de 	bl	80021e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e28:	480c      	ldr	r0, [pc, #48]	; (8002e5c <prvInitialiseTaskLists+0x6c>)
 8002e2a:	f7ff f9db 	bl	80021e4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002e2e:	480c      	ldr	r0, [pc, #48]	; (8002e60 <prvInitialiseTaskLists+0x70>)
 8002e30:	f7ff f9d8 	bl	80021e4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002e34:	480b      	ldr	r0, [pc, #44]	; (8002e64 <prvInitialiseTaskLists+0x74>)
 8002e36:	f7ff f9d5 	bl	80021e4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <prvInitialiseTaskLists+0x78>)
 8002e3c:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <prvInitialiseTaskLists+0x64>)
 8002e3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <prvInitialiseTaskLists+0x7c>)
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <prvInitialiseTaskLists+0x68>)
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000090 	.word	0x20000090
 8002e54:	200000f4 	.word	0x200000f4
 8002e58:	20000108 	.word	0x20000108
 8002e5c:	20000124 	.word	0x20000124
 8002e60:	20000138 	.word	0x20000138
 8002e64:	20000150 	.word	0x20000150
 8002e68:	2000011c 	.word	0x2000011c
 8002e6c:	20000120 	.word	0x20000120

08002e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e76:	e019      	b.n	8002eac <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002e78:	f000 fc3e 	bl	80036f8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <prvCheckTasksWaitingTermination+0x50>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fa35 	bl	80022f8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <prvCheckTasksWaitingTermination+0x54>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <prvCheckTasksWaitingTermination+0x54>)
 8002e96:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <prvCheckTasksWaitingTermination+0x58>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <prvCheckTasksWaitingTermination+0x58>)
 8002ea0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002ea2:	f000 fc59 	bl	8003758 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f810 	bl	8002ecc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <prvCheckTasksWaitingTermination+0x58>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e1      	bne.n	8002e78 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000138 	.word	0x20000138
 8002ec4:	20000164 	.word	0x20000164
 8002ec8:	2000014c 	.word	0x2000014c

08002ecc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fe5b 	bl	8003b94 <vPortFree>
            vPortFree( pxTCB );
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fe58 	bl	8003b94 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <prvResetNextTaskUnblockTime+0x30>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <prvResetNextTaskUnblockTime+0x34>)
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f02:	e005      	b.n	8002f10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <prvResetNextTaskUnblockTime+0x30>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <prvResetNextTaskUnblockTime+0x34>)
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2000011c 	.word	0x2000011c
 8002f20:	20000184 	.word	0x20000184

08002f24 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <xTaskGenericNotifyWait+0x2e>
    __asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	613b      	str	r3, [r7, #16]
}
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8002f52:	f7ff fcab 	bl	80028ac <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8002f56:	f000 fbcf 	bl	80036f8 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8002f5a:	4b39      	ldr	r3, [pc, #228]	; (8003040 <xTaskGenericNotifyWait+0x11c>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4413      	add	r3, r2
 8002f62:	3354      	adds	r3, #84	; 0x54
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d018      	beq.n	8002f9e <xTaskGenericNotifyWait+0x7a>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8002f6c:	4b34      	ldr	r3, [pc, #208]	; (8003040 <xTaskGenericNotifyWait+0x11c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	3214      	adds	r2, #20
 8002f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	43d2      	mvns	r2, r2
 8002f7c:	4011      	ands	r1, r2
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	3214      	adds	r2, #20
 8002f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <xTaskGenericNotifyWait+0x11c>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3354      	adds	r3, #84	; 0x54
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <xTaskGenericNotifyWait+0x7a>
                    {
                        xShouldBlock = pdTRUE;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002f9e:	f000 fbdb 	bl	8003758 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d103      	bne.n	8002fb0 <xTaskGenericNotifyWait+0x8c>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fa8:	2101      	movs	r1, #1
 8002faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fac:	f000 f9aa 	bl	8003304 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002fb0:	f7ff fc8a 	bl	80028c8 <xTaskResumeAll>
 8002fb4:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d10a      	bne.n	8002fd2 <xTaskGenericNotifyWait+0xae>
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d107      	bne.n	8002fd2 <xTaskGenericNotifyWait+0xae>
        {
            taskYIELD_WITHIN_API();
 8002fc2:	4b20      	ldr	r3, [pc, #128]	; (8003044 <xTaskGenericNotifyWait+0x120>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002fd2:	f000 fb91 	bl	80036f8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <xTaskGenericNotifyWait+0xc8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <xTaskGenericNotifyWait+0x11c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	3214      	adds	r2, #20
 8002fe4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <xTaskGenericNotifyWait+0x11c>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3354      	adds	r3, #84	; 0x54
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d002      	beq.n	8003004 <xTaskGenericNotifyWait+0xe0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e00e      	b.n	8003022 <xTaskGenericNotifyWait+0xfe>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8003004:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <xTaskGenericNotifyWait+0x11c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	3214      	adds	r2, #20
 800300c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	43d2      	mvns	r2, r2
 8003014:	4011      	ands	r1, r2
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	3214      	adds	r2, #20
 800301a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800301e:	2301      	movs	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <xTaskGenericNotifyWait+0x11c>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4413      	add	r3, r2
 800302a:	3354      	adds	r3, #84	; 0x54
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003030:	f000 fb92 	bl	8003758 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8003034:	69fb      	ldr	r3, [r7, #28]
    }
 8003036:	4618      	mov	r0, r3
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	2000008c 	.word	0x2000008c
 8003044:	e000ed04 	.word	0xe000ed04

08003048 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003048:	b580      	push	{r7, lr}
 800304a:	b092      	sub	sp, #72	; 0x48
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003056:	2301      	movs	r3, #1
 8003058:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <xTaskGenericNotifyFromISR+0x2e>
    __asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003072:	bf00      	nop
 8003074:	e7fe      	b.n	8003074 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <xTaskGenericNotifyFromISR+0x4a>
    __asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800308e:	bf00      	nop
 8003090:	e7fe      	b.n	8003090 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003092:	f000 fc13 	bl	80038bc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	643b      	str	r3, [r7, #64]	; 0x40

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800309a:	f3ef 8211 	mrs	r2, BASEPRI
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	623a      	str	r2, [r7, #32]
 80030b0:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 80030b2:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80030b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80030bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	3214      	adds	r2, #20
 80030c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80030ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4413      	add	r3, r2
 80030d0:	3354      	adds	r3, #84	; 0x54
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80030d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4413      	add	r3, r2
 80030de:	3354      	adds	r3, #84	; 0x54
 80030e0:	2202      	movs	r2, #2
 80030e2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d83b      	bhi.n	8003162 <xTaskGenericNotifyFromISR+0x11a>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <xTaskGenericNotifyFromISR+0xa8>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	08003181 	.word	0x08003181
 80030f4:	08003105 	.word	0x08003105
 80030f8:	08003121 	.word	0x08003121
 80030fc:	08003139 	.word	0x08003139
 8003100:	08003147 	.word	0x08003147
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	3214      	adds	r2, #20
 800310a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	ea42 0103 	orr.w	r1, r2, r3
 8003114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	3214      	adds	r2, #20
 800311a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800311e:	e032      	b.n	8003186 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	3214      	adds	r2, #20
 8003126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312a:	1c59      	adds	r1, r3, #1
 800312c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	3214      	adds	r2, #20
 8003132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003136:	e026      	b.n	8003186 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	3214      	adds	r2, #20
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003144:	e01f      	b.n	8003186 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003146:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800314a:	2b02      	cmp	r3, #2
 800314c:	d006      	beq.n	800315c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800314e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	3214      	adds	r2, #20
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800315a:	e014      	b.n	8003186 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800315c:	2300      	movs	r3, #0
 800315e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8003160:	e011      	b.n	8003186 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003162:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <xTaskGenericNotifyFromISR+0x2a0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00c      	beq.n	8003184 <xTaskGenericNotifyFromISR+0x13c>
    __asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	61bb      	str	r3, [r7, #24]
}
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003180:	bf00      	nop
 8003182:	e000      	b.n	8003186 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003184:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003186:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800318a:	2b01      	cmp	r3, #1
 800318c:	f040 80a0 	bne.w	80032d0 <xTaskGenericNotifyFromISR+0x288>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <xTaskGenericNotifyFromISR+0x166>
    __asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	617b      	str	r3, [r7, #20]
}
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80031ae:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <xTaskGenericNotifyFromISR+0x2a4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d160      	bne.n	8003278 <xTaskGenericNotifyFromISR+0x230>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80031b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	633b      	str	r3, [r7, #48]	; 0x30
 80031bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031c2:	68d2      	ldr	r2, [r2, #12]
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031cc:	6892      	ldr	r2, [r2, #8]
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d6:	3304      	adds	r3, #4
 80031d8:	429a      	cmp	r2, r3
 80031da:	d103      	bne.n	80031e4 <xTaskGenericNotifyFromISR+0x19c>
 80031dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e6:	2200      	movs	r2, #0
 80031e8:	615a      	str	r2, [r3, #20]
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	1e5a      	subs	r2, r3, #1
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80031f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2201      	movs	r2, #1
 80031fa:	409a      	lsls	r2, r3
 80031fc:	4b3c      	ldr	r3, [pc, #240]	; (80032f0 <xTaskGenericNotifyFromISR+0x2a8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	4a3b      	ldr	r2, [pc, #236]	; (80032f0 <xTaskGenericNotifyFromISR+0x2a8>)
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320a:	493a      	ldr	r1, [pc, #232]	; (80032f4 <xTaskGenericNotifyFromISR+0x2ac>)
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3304      	adds	r3, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003230:	3204      	adds	r2, #4
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003236:	1d1a      	adds	r2, r3, #4
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <xTaskGenericNotifyFromISR+0x2ac>)
 800324a:	441a      	add	r2, r3
 800324c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324e:	615a      	str	r2, [r3, #20]
 8003250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	4927      	ldr	r1, [pc, #156]	; (80032f4 <xTaskGenericNotifyFromISR+0x2ac>)
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003264:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	4822      	ldr	r0, [pc, #136]	; (80032f4 <xTaskGenericNotifyFromISR+0x2ac>)
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4403      	add	r3, r0
 8003274:	6019      	str	r1, [r3, #0]
 8003276:	e01b      	b.n	80032b0 <xTaskGenericNotifyFromISR+0x268>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003278:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <xTaskGenericNotifyFromISR+0x2b0>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
 800327e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003282:	61da      	str	r2, [r3, #28]
 8003284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328a:	621a      	str	r2, [r3, #32]
 800328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003292:	3218      	adds	r2, #24
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003298:	f103 0218 	add.w	r2, r3, #24
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a2:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <xTaskGenericNotifyFromISR+0x2b0>)
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <xTaskGenericNotifyFromISR+0x2b0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3301      	adds	r3, #1
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <xTaskGenericNotifyFromISR+0x2b0>)
 80032ae:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <xTaskGenericNotifyFromISR+0x2b4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d908      	bls.n	80032d0 <xTaskGenericNotifyFromISR+0x288>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80032be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <xTaskGenericNotifyFromISR+0x282>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80032c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <xTaskGenericNotifyFromISR+0x2b8>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80032da:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 80032dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80032de:	4618      	mov	r0, r3
 80032e0:	3748      	adds	r7, #72	; 0x48
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000168 	.word	0x20000168
 80032ec:	2000018c 	.word	0x2000018c
 80032f0:	2000016c 	.word	0x2000016c
 80032f4:	20000090 	.word	0x20000090
 80032f8:	20000124 	.word	0x20000124
 80032fc:	2000008c 	.word	0x2000008c
 8003300:	20000178 	.word	0x20000178

08003304 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800331a:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003320:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3304      	adds	r3, #4
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe ffe6 	bl	80022f8 <uxListRemove>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003332:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	2201      	movs	r2, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <prvAddCurrentTaskToDelayedList+0xf8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4013      	ands	r3, r2
 8003346:	4a2d      	ldr	r2, [pc, #180]	; (80033fc <prvAddCurrentTaskToDelayedList+0xf8>)
 8003348:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d124      	bne.n	800339c <prvAddCurrentTaskToDelayedList+0x98>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d021      	beq.n	800339c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003358:	4b29      	ldr	r3, [pc, #164]	; (8003400 <prvAddCurrentTaskToDelayedList+0xfc>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	6892      	ldr	r2, [r2, #8]
 800336e:	60da      	str	r2, [r3, #12]
 8003370:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	3204      	adds	r2, #4
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1d1a      	adds	r2, r3, #4
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <prvAddCurrentTaskToDelayedList+0xfc>)
 800338c:	615a      	str	r2, [r3, #20]
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	4a1a      	ldr	r2, [pc, #104]	; (8003400 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800339a:	e022      	b.n	80033e2 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d207      	bcs.n	80033c4 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3304      	adds	r3, #4
 80033ba:	4619      	mov	r1, r3
 80033bc:	6978      	ldr	r0, [r7, #20]
 80033be:	f7fe ff62 	bl	8002286 <vListInsert>
}
 80033c2:	e00e      	b.n	80033e2 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	69b8      	ldr	r0, [r7, #24]
 80033ce:	f7fe ff5a 	bl	8002286 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <prvAddCurrentTaskToDelayedList+0x100>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d202      	bcs.n	80033e2 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80033dc:	4a09      	ldr	r2, [pc, #36]	; (8003404 <prvAddCurrentTaskToDelayedList+0x100>)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6013      	str	r3, [r2, #0]
}
 80033e2:	bf00      	nop
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000168 	.word	0x20000168
 80033f0:	2000011c 	.word	0x2000011c
 80033f4:	20000120 	.word	0x20000120
 80033f8:	2000008c 	.word	0x2000008c
 80033fc:	2000016c 	.word	0x2000016c
 8003400:	20000150 	.word	0x20000150
 8003404:	20000184 	.word	0x20000184

08003408 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3b04      	subs	r3, #4
 8003418:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003420:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3b04      	subs	r3, #4
 8003426:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f023 0201 	bic.w	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3b04      	subs	r3, #4
 8003436:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <pxPortInitialiseStack+0x64>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3b14      	subs	r3, #20
 8003442:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3b04      	subs	r3, #4
 800344e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f06f 0202 	mvn.w	r2, #2
 8003456:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3b20      	subs	r3, #32
 800345c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	08003471 	.word	0x08003471

08003470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800347a:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <prvTaskExitError+0x54>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d00a      	beq.n	800349a <prvTaskExitError+0x2a>
    __asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	60fb      	str	r3, [r7, #12]
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <prvTaskExitError+0x28>
    __asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	60bb      	str	r3, [r7, #8]
}
 80034ac:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80034ae:	bf00      	nop
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0fc      	beq.n	80034b0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	20000010 	.word	0x20000010
	...

080034d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <pxCurrentTCBConst2>)
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	6808      	ldr	r0, [r1, #0]
 80034d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034da:	f380 8809 	msr	PSP, r0
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f380 8811 	msr	BASEPRI, r0
 80034ea:	4770      	bx	lr
 80034ec:	f3af 8000 	nop.w

080034f0 <pxCurrentTCBConst2>:
 80034f0:	2000008c 	.word	0x2000008c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop

080034f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80034f8:	4808      	ldr	r0, [pc, #32]	; (800351c <prvPortStartFirstTask+0x24>)
 80034fa:	6800      	ldr	r0, [r0, #0]
 80034fc:	6800      	ldr	r0, [r0, #0]
 80034fe:	f380 8808 	msr	MSP, r0
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f380 8814 	msr	CONTROL, r0
 800350a:	b662      	cpsie	i
 800350c:	b661      	cpsie	f
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	df00      	svc	0
 8003518:	bf00      	nop
 800351a:	0000      	.short	0x0000
 800351c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop

08003524 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08c      	sub	sp, #48	; 0x30
 8003528:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800352a:	4b66      	ldr	r3, [pc, #408]	; (80036c4 <xPortStartScheduler+0x1a0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a66      	ldr	r2, [pc, #408]	; (80036c8 <xPortStartScheduler+0x1a4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d10a      	bne.n	800354a <xPortStartScheduler+0x26>
    __asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800354a:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <xPortStartScheduler+0x1a0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5f      	ldr	r2, [pc, #380]	; (80036cc <xPortStartScheduler+0x1a8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d10a      	bne.n	800356a <xPortStartScheduler+0x46>
    __asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	623b      	str	r3, [r7, #32]
}
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xPortStartScheduler+0x44>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800356a:	4b59      	ldr	r3, [pc, #356]	; (80036d0 <xPortStartScheduler+0x1ac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	332c      	adds	r3, #44	; 0x2c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a57      	ldr	r2, [pc, #348]	; (80036d4 <xPortStartScheduler+0x1b0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00a      	beq.n	8003592 <xPortStartScheduler+0x6e>
    __asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	61fb      	str	r3, [r7, #28]
}
 800358e:	bf00      	nop
 8003590:	e7fe      	b.n	8003590 <xPortStartScheduler+0x6c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	3338      	adds	r3, #56	; 0x38
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a4f      	ldr	r2, [pc, #316]	; (80036d8 <xPortStartScheduler+0x1b4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00a      	beq.n	80035b4 <xPortStartScheduler+0x90>
    __asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	61bb      	str	r3, [r7, #24]
}
 80035b0:	bf00      	nop
 80035b2:	e7fe      	b.n	80035b2 <xPortStartScheduler+0x8e>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035b8:	4b48      	ldr	r3, [pc, #288]	; (80036dc <xPortStartScheduler+0x1b8>)
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	22ff      	movs	r2, #255	; 0xff
 80035c8:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <xPortStartScheduler+0x1bc>)
 80035de:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80035e0:	4b3f      	ldr	r3, [pc, #252]	; (80036e0 <xPortStartScheduler+0x1bc>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xPortStartScheduler+0xda>
    __asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	617b      	str	r3, [r7, #20]
}
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <xPortStartScheduler+0xd8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003608:	2b00      	cmp	r3, #0
 800360a:	d012      	beq.n	8003632 <xPortStartScheduler+0x10e>
    __asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	613b      	str	r3, [r7, #16]
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <xPortStartScheduler+0xfc>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3301      	adds	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d0f1      	beq.n	8003622 <xPortStartScheduler+0xfe>
        }

        if( ulImplementedPrioBits == 8 )
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d103      	bne.n	800364c <xPortStartScheduler+0x128>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <xPortStartScheduler+0x1c0>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e004      	b.n	8003656 <xPortStartScheduler+0x132>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f1c3 0307 	rsb	r3, r3, #7
 8003652:	4a24      	ldr	r2, [pc, #144]	; (80036e4 <xPortStartScheduler+0x1c0>)
 8003654:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003656:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <xPortStartScheduler+0x1c0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <xPortStartScheduler+0x1c0>)
 800365e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <xPortStartScheduler+0x1c0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003668:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <xPortStartScheduler+0x1c0>)
 800366a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003674:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <xPortStartScheduler+0x1c4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <xPortStartScheduler+0x1c4>)
 800367a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <xPortStartScheduler+0x1c4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <xPortStartScheduler+0x1c4>)
 8003686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800368c:	4b17      	ldr	r3, [pc, #92]	; (80036ec <xPortStartScheduler+0x1c8>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003692:	f000 f8e3 	bl	800385c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003696:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <xPortStartScheduler+0x1cc>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800369c:	f000 f902 	bl	80038a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036a0:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <xPortStartScheduler+0x1d0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <xPortStartScheduler+0x1d0>)
 80036a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80036ac:	f7ff ff24 	bl	80034f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80036b0:	f7ff fb2a 	bl	8002d08 <vTaskSwitchContext>
    prvTaskExitError();
 80036b4:	f7ff fedc 	bl	8003470 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3730      	adds	r7, #48	; 0x30
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000ed00 	.word	0xe000ed00
 80036c8:	410fc271 	.word	0x410fc271
 80036cc:	410fc270 	.word	0x410fc270
 80036d0:	e000ed08 	.word	0xe000ed08
 80036d4:	080034d1 	.word	0x080034d1
 80036d8:	080037b1 	.word	0x080037b1
 80036dc:	e000e400 	.word	0xe000e400
 80036e0:	20000190 	.word	0x20000190
 80036e4:	20000194 	.word	0x20000194
 80036e8:	e000ed20 	.word	0xe000ed20
 80036ec:	e000ed1c 	.word	0xe000ed1c
 80036f0:	20000010 	.word	0x20000010
 80036f4:	e000ef34 	.word	0xe000ef34

080036f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
    __asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	607b      	str	r3, [r7, #4]
}
 8003710:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003712:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <vPortEnterCritical+0x58>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <vPortEnterCritical+0x58>)
 800371a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <vPortEnterCritical+0x58>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10f      	bne.n	8003744 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <vPortEnterCritical+0x5c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <vPortEnterCritical+0x4c>
    __asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	603b      	str	r3, [r7, #0]
}
 8003740:	bf00      	nop
 8003742:	e7fe      	b.n	8003742 <vPortEnterCritical+0x4a>
    }
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	20000010 	.word	0x20000010
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <vPortExitCritical+0x50>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <vPortExitCritical+0x24>
    __asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	607b      	str	r3, [r7, #4]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <vPortExitCritical+0x50>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3b01      	subs	r3, #1
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <vPortExitCritical+0x50>)
 8003784:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <vPortExitCritical+0x50>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d105      	bne.n	800379a <vPortExitCritical+0x42>
 800378e:	2300      	movs	r3, #0
 8003790:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f383 8811 	msr	BASEPRI, r3
}
 8003798:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000010 	.word	0x20000010
 80037ac:	00000000 	.word	0x00000000

080037b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80037b0:	f3ef 8009 	mrs	r0, PSP
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	4b15      	ldr	r3, [pc, #84]	; (8003810 <pxCurrentTCBConst>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f01e 0f10 	tst.w	lr, #16
 80037c0:	bf08      	it	eq
 80037c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ca:	6010      	str	r0, [r2, #0]
 80037cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80037d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037d4:	f380 8811 	msr	BASEPRI, r0
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f7ff fa92 	bl	8002d08 <vTaskSwitchContext>
 80037e4:	f04f 0000 	mov.w	r0, #0
 80037e8:	f380 8811 	msr	BASEPRI, r0
 80037ec:	bc09      	pop	{r0, r3}
 80037ee:	6819      	ldr	r1, [r3, #0]
 80037f0:	6808      	ldr	r0, [r1, #0]
 80037f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f6:	f01e 0f10 	tst.w	lr, #16
 80037fa:	bf08      	it	eq
 80037fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003800:	f380 8809 	msr	PSP, r0
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	f3af 8000 	nop.w

08003810 <pxCurrentTCBConst>:
 8003810:	2000008c 	.word	0x2000008c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop

08003818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
    __asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	607b      	str	r3, [r7, #4]
}
 8003830:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003832:	f7ff f951 	bl	8002ad8 <xTaskIncrementTick>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <SysTick_Handler+0x40>)
 800383e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	2300      	movs	r3, #0
 8003846:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f383 8811 	msr	BASEPRI, r3
}
 800384e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	e000ed04 	.word	0xe000ed04

0800385c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <vPortSetupTimerInterrupt+0x34>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <vPortSetupTimerInterrupt+0x38>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <vPortSetupTimerInterrupt+0x3c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <vPortSetupTimerInterrupt+0x40>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <vPortSetupTimerInterrupt+0x44>)
 800387a:	3b01      	subs	r3, #1
 800387c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <vPortSetupTimerInterrupt+0x34>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e010 	.word	0xe000e010
 8003894:	e000e018 	.word	0xe000e018
 8003898:	20000000 	.word	0x20000000
 800389c:	10624dd3 	.word	0x10624dd3
 80038a0:	e000e014 	.word	0xe000e014

080038a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80038a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038b4 <vPortEnableVFP+0x10>
 80038a8:	6801      	ldr	r1, [r0, #0]
 80038aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038ae:	6001      	str	r1, [r0, #0]
 80038b0:	4770      	bx	lr
 80038b2:	0000      	.short	0x0000
 80038b4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop

080038bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80038c2:	f3ef 8305 	mrs	r3, IPSR
 80038c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	d914      	bls.n	80038f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80038ce:	4a17      	ldr	r2, [pc, #92]	; (800392c <vPortValidateInterruptPriority+0x70>)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <vPortValidateInterruptPriority+0x74>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	7afa      	ldrb	r2, [r7, #11]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d20a      	bcs.n	80038f8 <vPortValidateInterruptPriority+0x3c>
    __asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	607b      	str	r3, [r7, #4]
}
 80038f4:	bf00      	nop
 80038f6:	e7fe      	b.n	80038f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <vPortValidateInterruptPriority+0x78>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003900:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <vPortValidateInterruptPriority+0x7c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d90a      	bls.n	800391e <vPortValidateInterruptPriority+0x62>
    __asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	603b      	str	r3, [r7, #0]
}
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <vPortValidateInterruptPriority+0x60>
    }
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000e3f0 	.word	0xe000e3f0
 8003930:	20000190 	.word	0x20000190
 8003934:	e000ed0c 	.word	0xe000ed0c
 8003938:	20000194 	.word	0x20000194

0800393c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08e      	sub	sp, #56	; 0x38
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d022      	beq.n	8003994 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800394e:	2308      	movs	r3, #8
 8003950:	43db      	mvns	r3, r3
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d81b      	bhi.n	8003990 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003958:	2208      	movs	r2, #8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	2b00      	cmp	r3, #0
 8003968:	d014      	beq.n	8003994 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	f1c3 0308 	rsb	r3, r3, #8
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	43db      	mvns	r3, r3
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	429a      	cmp	r2, r3
 800397e:	d804      	bhi.n	800398a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	4413      	add	r3, r2
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	e004      	b.n	8003994 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	e001      	b.n	8003994 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003994:	f7fe ff8a 	bl	80028ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003998:	4b77      	ldr	r3, [pc, #476]	; (8003b78 <pvPortMalloc+0x23c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80039a0:	f000 f970 	bl	8003c84 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f2c0 80ce 	blt.w	8003b48 <pvPortMalloc+0x20c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80ca 	beq.w	8003b48 <pvPortMalloc+0x20c>
 80039b4:	4b71      	ldr	r3, [pc, #452]	; (8003b7c <pvPortMalloc+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	f200 80c4 	bhi.w	8003b48 <pvPortMalloc+0x20c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80039c0:	4b6f      	ldr	r3, [pc, #444]	; (8003b80 <pvPortMalloc+0x244>)
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80039c4:	4b6e      	ldr	r3, [pc, #440]	; (8003b80 <pvPortMalloc+0x244>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80039ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039cc:	4a6d      	ldr	r2, [pc, #436]	; (8003b84 <pvPortMalloc+0x248>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d305      	bcc.n	80039de <pvPortMalloc+0xa2>
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	4a6c      	ldr	r2, [pc, #432]	; (8003b88 <pvPortMalloc+0x24c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d801      	bhi.n	80039de <pvPortMalloc+0xa2>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <pvPortMalloc+0xa4>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d127      	bne.n	8003a34 <pvPortMalloc+0xf8>
    __asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	623b      	str	r3, [r7, #32]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80039fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fc:	633b      	str	r3, [r7, #48]	; 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80039fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	4a5f      	ldr	r2, [pc, #380]	; (8003b84 <pvPortMalloc+0x248>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d305      	bcc.n	8003a18 <pvPortMalloc+0xdc>
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0e:	4a5e      	ldr	r2, [pc, #376]	; (8003b88 <pvPortMalloc+0x24c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d801      	bhi.n	8003a18 <pvPortMalloc+0xdc>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <pvPortMalloc+0xde>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <pvPortMalloc+0xf8>
    __asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	61fb      	str	r3, [r7, #28]
}
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <pvPortMalloc+0xf6>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d903      	bls.n	8003a46 <pvPortMalloc+0x10a>
 8003a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1d9      	bne.n	80039fa <pvPortMalloc+0xbe>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003a46:	4b4c      	ldr	r3, [pc, #304]	; (8003b78 <pvPortMalloc+0x23c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d07b      	beq.n	8003b48 <pvPortMalloc+0x20c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2208      	movs	r2, #8
 8003a56:	4413      	add	r3, r2
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	4a49      	ldr	r2, [pc, #292]	; (8003b84 <pvPortMalloc+0x248>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d305      	bcc.n	8003a6e <pvPortMalloc+0x132>
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	4a48      	ldr	r2, [pc, #288]	; (8003b88 <pvPortMalloc+0x24c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d801      	bhi.n	8003a6e <pvPortMalloc+0x132>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <pvPortMalloc+0x134>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <pvPortMalloc+0x14e>
    __asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	61bb      	str	r3, [r7, #24]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <pvPortMalloc+0x14c>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d90a      	bls.n	8003ab2 <pvPortMalloc+0x176>
    __asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	617b      	str	r3, [r7, #20]
}
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <pvPortMalloc+0x174>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	1ad2      	subs	r2, r2, r3
 8003aba:	2308      	movs	r3, #8
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d923      	bls.n	8003b0a <pvPortMalloc+0x1ce>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <pvPortMalloc+0x1ae>
    __asm volatile
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	613b      	str	r3, [r7, #16]
}
 8003ae6:	bf00      	nop
 8003ae8:	e7fe      	b.n	8003ae8 <pvPortMalloc+0x1ac>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	1ad2      	subs	r2, r2, r3
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b08:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <pvPortMalloc+0x240>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	4a19      	ldr	r2, [pc, #100]	; (8003b7c <pvPortMalloc+0x240>)
 8003b16:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b18:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <pvPortMalloc+0x240>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <pvPortMalloc+0x250>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d203      	bcs.n	8003b2c <pvPortMalloc+0x1f0>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b24:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <pvPortMalloc+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <pvPortMalloc+0x250>)
 8003b2a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <pvPortMalloc+0x254>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <pvPortMalloc+0x254>)
 8003b46:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003b48:	f7fe febe 	bl	80028c8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <pvPortMalloc+0x230>
    __asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	60fb      	str	r3, [r7, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <pvPortMalloc+0x22e>
    return pvReturn;
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3738      	adds	r7, #56	; 0x38
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200191a0 	.word	0x200191a0
 8003b7c:	200191a4 	.word	0x200191a4
 8003b80:	20019198 	.word	0x20019198
 8003b84:	20000198 	.word	0x20000198
 8003b88:	20019197 	.word	0x20019197
 8003b8c:	200191a8 	.word	0x200191a8
 8003b90:	200191ac 	.word	0x200191ac

08003b94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d061      	beq.n	8003c6a <vPortFree+0xd6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	425b      	negs	r3, r3
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	4a2f      	ldr	r2, [pc, #188]	; (8003c74 <vPortFree+0xe0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d305      	bcc.n	8003bc8 <vPortFree+0x34>
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	4a2e      	ldr	r2, [pc, #184]	; (8003c78 <vPortFree+0xe4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d801      	bhi.n	8003bc8 <vPortFree+0x34>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <vPortFree+0x36>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <vPortFree+0x50>
    __asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	617b      	str	r3, [r7, #20]
}
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	db0a      	blt.n	8003c02 <vPortFree+0x6e>
    __asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	613b      	str	r3, [r7, #16]
}
 8003bfe:	bf00      	nop
 8003c00:	e7fe      	b.n	8003c00 <vPortFree+0x6c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <vPortFree+0x8c>
    __asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	60fb      	str	r3, [r7, #12]
}
 8003c1c:	bf00      	nop
 8003c1e:	e7fe      	b.n	8003c1e <vPortFree+0x8a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	0fdb      	lsrs	r3, r3, #31
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01c      	beq.n	8003c6a <vPortFree+0xd6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d118      	bne.n	8003c6a <vPortFree+0xd6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003c44:	f7fe fe32 	bl	80028ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <vPortFree+0xe8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4413      	add	r3, r2
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <vPortFree+0xe8>)
 8003c54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c56:	69b8      	ldr	r0, [r7, #24]
 8003c58:	f000 f86e 	bl	8003d38 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <vPortFree+0xec>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <vPortFree+0xec>)
 8003c64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c66:	f7fe fe2f 	bl	80028c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c6a:	bf00      	nop
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000198 	.word	0x20000198
 8003c78:	20019197 	.word	0x20019197
 8003c7c:	200191a4 	.word	0x200191a4
 8003c80:	200191b0 	.word	0x200191b0

08003c84 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c8a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8003c8e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003c90:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <prvHeapInit+0xa0>)
 8003c92:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00c      	beq.n	8003cb8 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3307      	adds	r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0307 	bic.w	r3, r3, #7
 8003caa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <prvHeapInit+0xa0>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <prvHeapInit+0xa4>)
 8003cbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <prvHeapInit+0xa4>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4413      	add	r3, r2
 8003cca:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003ccc:	2208      	movs	r2, #8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f023 0307 	bic.w	r3, r3, #7
 8003cda:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <prvHeapInit+0xa8>)
 8003ce0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <prvHeapInit+0xa8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <prvHeapInit+0xa8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <prvHeapInit+0xa8>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <prvHeapInit+0xac>)
 8003d0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <prvHeapInit+0xb0>)
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	20000198 	.word	0x20000198
 8003d28:	20019198 	.word	0x20019198
 8003d2c:	200191a0 	.word	0x200191a0
 8003d30:	200191a8 	.word	0x200191a8
 8003d34:	200191a4 	.word	0x200191a4

08003d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003d40:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <prvInsertBlockIntoFreeList+0xe4>)
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e002      	b.n	8003d4c <prvInsertBlockIntoFreeList+0x14>
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d8f7      	bhi.n	8003d46 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	4a30      	ldr	r2, [pc, #192]	; (8003e1c <prvInsertBlockIntoFreeList+0xe4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d017      	beq.n	8003d8e <prvInsertBlockIntoFreeList+0x56>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4a2f      	ldr	r2, [pc, #188]	; (8003e20 <prvInsertBlockIntoFreeList+0xe8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d305      	bcc.n	8003d72 <prvInsertBlockIntoFreeList+0x3a>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	4a2e      	ldr	r2, [pc, #184]	; (8003e24 <prvInsertBlockIntoFreeList+0xec>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d801      	bhi.n	8003d72 <prvInsertBlockIntoFreeList+0x3a>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <prvInsertBlockIntoFreeList+0x3c>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <prvInsertBlockIntoFreeList+0x56>
    __asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	60fb      	str	r3, [r7, #12]
}
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4413      	add	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d108      	bne.n	8003db2 <prvInsertBlockIntoFreeList+0x7a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	441a      	add	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	441a      	add	r2, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d118      	bne.n	8003df8 <prvInsertBlockIntoFreeList+0xc0>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <prvInsertBlockIntoFreeList+0xf0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d00d      	beq.n	8003dee <prvInsertBlockIntoFreeList+0xb6>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	441a      	add	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	e008      	b.n	8003e00 <prvInsertBlockIntoFreeList+0xc8>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003dee:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <prvInsertBlockIntoFreeList+0xf0>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e003      	b.n	8003e00 <prvInsertBlockIntoFreeList+0xc8>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d002      	beq.n	8003e0e <prvInsertBlockIntoFreeList+0xd6>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20019198 	.word	0x20019198
 8003e20:	20000198 	.word	0x20000198
 8003e24:	20019197 	.word	0x20019197
 8003e28:	200191a0 	.word	0x200191a0

08003e2c <memset>:
 8003e2c:	4402      	add	r2, r0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4d0d      	ldr	r5, [pc, #52]	; (8003e74 <__libc_init_array+0x38>)
 8003e40:	4c0d      	ldr	r4, [pc, #52]	; (8003e78 <__libc_init_array+0x3c>)
 8003e42:	1b64      	subs	r4, r4, r5
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	2600      	movs	r6, #0
 8003e48:	42a6      	cmp	r6, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	4d0b      	ldr	r5, [pc, #44]	; (8003e7c <__libc_init_array+0x40>)
 8003e4e:	4c0c      	ldr	r4, [pc, #48]	; (8003e80 <__libc_init_array+0x44>)
 8003e50:	f000 f818 	bl	8003e84 <_init>
 8003e54:	1b64      	subs	r4, r4, r5
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	2600      	movs	r6, #0
 8003e5a:	42a6      	cmp	r6, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e64:	4798      	blx	r3
 8003e66:	3601      	adds	r6, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6e:	4798      	blx	r3
 8003e70:	3601      	adds	r6, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	08003ef4 	.word	0x08003ef4
 8003e78:	08003ef4 	.word	0x08003ef4
 8003e7c:	08003ef4 	.word	0x08003ef4
 8003e80:	08003ef8 	.word	0x08003ef8

08003e84 <_init>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr

08003e90 <_fini>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr
